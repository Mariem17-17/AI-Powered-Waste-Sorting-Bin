
ROTATE_TO_BIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008560  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  080086f0  080086f0  000096f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ac8  08008ac8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008ac8  08008ac8  00009ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ad0  08008ad0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ad0  08008ad0  00009ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ad4  08008ad4  00009ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008ad8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          000003fc  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005d0  200005d0  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db90  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f1e  00000000  00000000  00017d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00019cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a73  00000000  00000000  0001aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cc7  00000000  00000000  0001b483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f157  00000000  00000000  0003d14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd13b  00000000  00000000  0004c2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001193dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049b0  00000000  00000000  00119420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0011ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086d8 	.word	0x080086d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080086d8 	.word	0x080086d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f001 f84f 	bl	8001f80 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1 ); //start the timer
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	482f      	ldr	r0, [pc, #188]	@ (8000fa4 <main+0xcc>)
 8000ee6:	f002 fc4f 	bl	8003788 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000eea:	2100      	movs	r1, #0
 8000eec:	482e      	ldr	r0, [pc, #184]	@ (8000fa8 <main+0xd0>)
 8000eee:	f002 fc4b 	bl	8003788 <HAL_TIM_PWM_Start>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef2:	f000 f867 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef6:	f000 fae1 	bl	80014bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000efa:	f000 fabf 	bl	800147c <MX_DMA_Init>
  MX_TIM5_Init();
 8000efe:	f000 f987 	bl	8001210 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8000f02:	f000 fa91 	bl	8001428 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f06:	f000 f8c7 	bl	8001098 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f0a:	f000 f935 	bl	8001178 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000f0e:	f000 f9f7 	bl	8001300 <MX_TIM9_Init>
  MX_TIM13_Init();
 8000f12:	f000 fa3b 	bl	800138c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rx_data, 1); //whenever it receives 1 bytes at time, will interupt and jump to a callback
 8000f16:	2201      	movs	r2, #1
 8000f18:	4924      	ldr	r1, [pc, #144]	@ (8000fac <main+0xd4>)
 8000f1a:	4825      	ldr	r0, [pc, #148]	@ (8000fb0 <main+0xd8>)
 8000f1c:	f004 f85f 	bl	8004fde <HAL_UART_Receive_DMA>
  {
	  //sprintf(uartBuf, "printing in while");
	  //HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);

	  // if a new data is sent through UART2
	  if (newDataIn == 1){
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <main+0xdc>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d1fb      	bne.n	8000f20 <main+0x48>

		  // treating an item
		  newDataIn = 0;
 8000f28:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <main+0xdc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]

		  // put the right bin under the lid
		  ROTATE_BIN((uint8_t)rx_data[0] - 48);
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <main+0xd4>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	3b30      	subs	r3, #48	@ 0x30
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fba0 	bl	800167c <ROTATE_BIN>
		  // wait till it gets to the position
		  HAL_Delay(1000);
 8000f3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f40:	f001 f890 	bl	8002064 <HAL_Delay>
		  // update the status of the bins' fullnes
		  UPDATE_FULLNESS(rx_data[0] - 48);
 8000f44:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <main+0xd4>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3b30      	subs	r3, #48	@ 0x30
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fc05 	bl	800175c <UPDATE_FULLNESS>
		  sprintf(uartBuf, "{\"plastic\": %d, \"metal\":%d,\"other\":%d}\r\n", percent_class[0], percent_class[1], percent_class[2]);
 8000f52:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <main+0xe0>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <main+0xe0>)
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <main+0xe0>)
 8000f60:	789b      	ldrb	r3, [r3, #2]
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	460b      	mov	r3, r1
 8000f66:	4915      	ldr	r1, [pc, #84]	@ (8000fbc <main+0xe4>)
 8000f68:	4815      	ldr	r0, [pc, #84]	@ (8000fc0 <main+0xe8>)
 8000f6a:	f005 fa89 	bl	8006480 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8000f6e:	4814      	ldr	r0, [pc, #80]	@ (8000fc0 <main+0xe8>)
 8000f70:	f7ff f97e 	bl	8000270 <strlen>
 8000f74:	4603      	mov	r3, r0
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	2364      	movs	r3, #100	@ 0x64
 8000f7a:	4911      	ldr	r1, [pc, #68]	@ (8000fc0 <main+0xe8>)
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <main+0xd8>)
 8000f7e:	f003 ffa3 	bl	8004ec8 <HAL_UART_Transmit>
		  // wait till the sensor gets and sends the measurement
		  HAL_Delay(100);
 8000f82:	2064      	movs	r0, #100	@ 0x64
 8000f84:	f001 f86e 	bl	8002064 <HAL_Delay>

		  // open the lid
		  ROTATE_MOTOR(POSITION_OPEN, SERVO_LID);
 8000f88:	2101      	movs	r1, #1
 8000f8a:	2064      	movs	r0, #100	@ 0x64
 8000f8c:	f000 fb9c 	bl	80016c8 <ROTATE_MOTOR>
		  // wait till it opens
		  HAL_Delay(1500);
 8000f90:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f94:	f001 f866 	bl	8002064 <HAL_Delay>

		  //close the lid
		  ROTATE_MOTOR(POSITION_CLOSE, SERVO_LID);
 8000f98:	2101      	movs	r1, #1
 8000f9a:	20b1      	movs	r0, #177	@ 0xb1
 8000f9c:	f000 fb94 	bl	80016c8 <ROTATE_MOTOR>
	  if (newDataIn == 1){
 8000fa0:	e7be      	b.n	8000f20 <main+0x48>
 8000fa2:	bf00      	nop
 8000fa4:	20000310 	.word	0x20000310
 8000fa8:	20000280 	.word	0x20000280
 8000fac:	20000478 	.word	0x20000478
 8000fb0:	20000358 	.word	0x20000358
 8000fb4:	2000040c 	.word	0x2000040c
 8000fb8:	20000410 	.word	0x20000410
 8000fbc:	080086f0 	.word	0x080086f0
 8000fc0:	20000414 	.word	0x20000414

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	@ 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2230      	movs	r2, #48	@ 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 fab7 	bl	8006546 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <SystemClock_Config+0xcc>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	4a27      	ldr	r2, [pc, #156]	@ (8001090 <SystemClock_Config+0xcc>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff8:	4b25      	ldr	r3, [pc, #148]	@ (8001090 <SystemClock_Config+0xcc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <SystemClock_Config+0xd0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a21      	ldr	r2, [pc, #132]	@ (8001094 <SystemClock_Config+0xd0>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001024:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102a:	2302      	movs	r3, #2
 800102c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001034:	2308      	movs	r3, #8
 8001036:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001038:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800103c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103e:	2302      	movs	r3, #2
 8001040:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001042:	2307      	movs	r3, #7
 8001044:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fe66 	bl	8002d1c <HAL_RCC_OscConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001056:	f000 fc57 	bl	8001908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105a:	230f      	movs	r3, #15
 800105c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	2302      	movs	r3, #2
 8001060:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001066:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800106a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800106c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001070:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2105      	movs	r1, #5
 8001078:	4618      	mov	r0, r3
 800107a:	f002 f8c7 	bl	800320c <HAL_RCC_ClockConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001084:	f000 fc40 	bl	8001908 <Error_Handler>
  }
}
 8001088:	bf00      	nop
 800108a:	3750      	adds	r7, #80	@ 0x50
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	@ 0x28
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	f107 0318 	add.w	r3, r7, #24
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010b6:	463b      	mov	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <MX_TIM3_Init+0xd8>)
 80010c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001174 <MX_TIM3_Init+0xdc>)
 80010c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <MX_TIM3_Init+0xd8>)
 80010ca:	2253      	movs	r2, #83	@ 0x53
 80010cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b28      	ldr	r3, [pc, #160]	@ (8001170 <MX_TIM3_Init+0xd8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010d4:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <MX_TIM3_Init+0xd8>)
 80010d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <MX_TIM3_Init+0xd8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <MX_TIM3_Init+0xd8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010e8:	4821      	ldr	r0, [pc, #132]	@ (8001170 <MX_TIM3_Init+0xd8>)
 80010ea:	f002 faaf 	bl	800364c <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80010f4:	f000 fc08 	bl	8001908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	4619      	mov	r1, r3
 8001104:	481a      	ldr	r0, [pc, #104]	@ (8001170 <MX_TIM3_Init+0xd8>)
 8001106:	f003 f885 	bl	8004214 <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001110:	f000 fbfa 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001114:	4816      	ldr	r0, [pc, #88]	@ (8001170 <MX_TIM3_Init+0xd8>)
 8001116:	f002 fbff 	bl	8003918 <HAL_TIM_IC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001120:	f000 fbf2 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4619      	mov	r1, r3
 8001132:	480f      	ldr	r0, [pc, #60]	@ (8001170 <MX_TIM3_Init+0xd8>)
 8001134:	f003 fde8 	bl	8004d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800113e:	f000 fbe3 	bl	8001908 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001142:	230a      	movs	r3, #10
 8001144:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001146:	2301      	movs	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 800114e:	2305      	movs	r3, #5
 8001150:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_TIM3_Init+0xd8>)
 800115a:	f002 fefd 	bl	8003f58 <HAL_TIM_IC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001164:	f000 fbd0 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	@ 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200001f0 	.word	0x200001f0
 8001174:	40000400 	.word	0x40000400

08001178 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	463b      	mov	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001194:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_TIM4_Init+0x90>)
 8001196:	4a1d      	ldr	r2, [pc, #116]	@ (800120c <MX_TIM4_Init+0x94>)
 8001198:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800119a:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_TIM4_Init+0x90>)
 800119c:	2253      	movs	r2, #83	@ 0x53
 800119e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_TIM4_Init+0x90>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_TIM4_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_TIM4_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <MX_TIM4_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011b8:	4813      	ldr	r0, [pc, #76]	@ (8001208 <MX_TIM4_Init+0x90>)
 80011ba:	f002 fa47 	bl	800364c <HAL_TIM_Base_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80011c4:	f000 fba0 	bl	8001908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <MX_TIM4_Init+0x90>)
 80011d6:	f003 f81d 	bl	8004214 <HAL_TIM_ConfigClockSource>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80011e0:	f000 fb92 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	@ (8001208 <MX_TIM4_Init+0x90>)
 80011f2:	f003 fd89 	bl	8004d08 <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80011fc:	f000 fb84 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000238 	.word	0x20000238
 800120c:	40000800 	.word	0x40000800

08001210 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	@ 0x38
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001240:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <MX_TIM5_Init+0xe8>)
 8001242:	4a2e      	ldr	r2, [pc, #184]	@ (80012fc <MX_TIM5_Init+0xec>)
 8001244:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1680-1;
 8001246:	4b2c      	ldr	r3, [pc, #176]	@ (80012f8 <MX_TIM5_Init+0xe8>)
 8001248:	f240 628f 	movw	r2, #1679	@ 0x68f
 800124c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <MX_TIM5_Init+0xe8>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001254:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <MX_TIM5_Init+0xe8>)
 8001256:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800125a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <MX_TIM5_Init+0xe8>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b25      	ldr	r3, [pc, #148]	@ (80012f8 <MX_TIM5_Init+0xe8>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001268:	4823      	ldr	r0, [pc, #140]	@ (80012f8 <MX_TIM5_Init+0xe8>)
 800126a:	f002 f9ef 	bl	800364c <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001274:	f000 fb48 	bl	8001908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001282:	4619      	mov	r1, r3
 8001284:	481c      	ldr	r0, [pc, #112]	@ (80012f8 <MX_TIM5_Init+0xe8>)
 8001286:	f002 ffc5 	bl	8004214 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001290:	f000 fb3a 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001294:	4818      	ldr	r0, [pc, #96]	@ (80012f8 <MX_TIM5_Init+0xe8>)
 8001296:	f002 fa28 	bl	80036ea <HAL_TIM_PWM_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80012a0:	f000 fb32 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	4619      	mov	r1, r3
 80012b2:	4811      	ldr	r0, [pc, #68]	@ (80012f8 <MX_TIM5_Init+0xe8>)
 80012b4:	f003 fd28 	bl	8004d08 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80012be:	f000 fb23 	bl	8001908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c2:	2360      	movs	r3, #96	@ 0x60
 80012c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <MX_TIM5_Init+0xe8>)
 80012da:	f002 fed9 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80012e4:	f000 fb10 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <MX_TIM5_Init+0xe8>)
 80012ea:	f000 fbf7 	bl	8001adc <HAL_TIM_MspPostInit>

}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	@ 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000280 	.word	0x20000280
 80012fc:	40000c00 	.word	0x40000c00

08001300 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]
 8001316:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <MX_TIM9_Init+0x84>)
 800131a:	4a1b      	ldr	r2, [pc, #108]	@ (8001388 <MX_TIM9_Init+0x88>)
 800131c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800131e:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <MX_TIM9_Init+0x84>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <MX_TIM9_Init+0x84>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800132a:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <MX_TIM9_Init+0x84>)
 800132c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001330:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <MX_TIM9_Init+0x84>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <MX_TIM9_Init+0x84>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800133e:	4811      	ldr	r0, [pc, #68]	@ (8001384 <MX_TIM9_Init+0x84>)
 8001340:	f002 f9d3 	bl	80036ea <HAL_TIM_PWM_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800134a:	f000 fadd 	bl	8001908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134e:	2360      	movs	r3, #96	@ 0x60
 8001350:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	4807      	ldr	r0, [pc, #28]	@ (8001384 <MX_TIM9_Init+0x84>)
 8001366:	f002 fe93 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001370:	f000 faca 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001374:	4803      	ldr	r0, [pc, #12]	@ (8001384 <MX_TIM9_Init+0x84>)
 8001376:	f000 fbb1 	bl	8001adc <HAL_TIM_MspPostInit>

}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200002c8 	.word	0x200002c8
 8001388:	40014000 	.word	0x40014000

0800138c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80013a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <MX_TIM13_Init+0x94>)
 80013a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001424 <MX_TIM13_Init+0x98>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1680-1;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <MX_TIM13_Init+0x94>)
 80013ac:	f240 628f 	movw	r2, #1679	@ 0x68f
 80013b0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <MX_TIM13_Init+0x94>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80013b8:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <MX_TIM13_Init+0x94>)
 80013ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013be:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <MX_TIM13_Init+0x94>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <MX_TIM13_Init+0x94>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80013cc:	4814      	ldr	r0, [pc, #80]	@ (8001420 <MX_TIM13_Init+0x94>)
 80013ce:	f002 f93d 	bl	800364c <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 80013d8:	f000 fa96 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80013dc:	4810      	ldr	r0, [pc, #64]	@ (8001420 <MX_TIM13_Init+0x94>)
 80013de:	f002 f984 	bl	80036ea <HAL_TIM_PWM_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 80013e8:	f000 fa8e 	bl	8001908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ec:	2360      	movs	r3, #96	@ 0x60
 80013ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	4807      	ldr	r0, [pc, #28]	@ (8001420 <MX_TIM13_Init+0x94>)
 8001404:	f002 fe44 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 800140e:	f000 fa7b 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001412:	4803      	ldr	r0, [pc, #12]	@ (8001420 <MX_TIM13_Init+0x94>)
 8001414:	f000 fb62 	bl	8001adc <HAL_TIM_MspPostInit>

}
 8001418:	bf00      	nop
 800141a:	3720      	adds	r7, #32
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000310 	.word	0x20000310
 8001424:	40001c00 	.word	0x40001c00

08001428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 800142e:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <MX_USART2_UART_Init+0x50>)
 8001430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_USART2_UART_Init+0x4c>)
 8001460:	f003 fce2 	bl	8004e28 <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800146a:	f000 fa4d 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000358 	.word	0x20000358
 8001478:	40004400 	.word	0x40004400

0800147c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_DMA_Init+0x3c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <MX_DMA_Init+0x3c>)
 800148c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_DMA_Init+0x3c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2010      	movs	r0, #16
 80014a4:	f000 fedd 	bl	8002262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014a8:	2010      	movs	r0, #16
 80014aa:	f000 fef6 	bl	800229a <HAL_NVIC_EnableIRQ>

}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001590 <MX_GPIO_Init+0xd4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a2d      	ldr	r2, [pc, #180]	@ (8001590 <MX_GPIO_Init+0xd4>)
 80014dc:	f043 0310 	orr.w	r3, r3, #16
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <MX_GPIO_Init+0xd4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <MX_GPIO_Init+0xd4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a26      	ldr	r2, [pc, #152]	@ (8001590 <MX_GPIO_Init+0xd4>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <MX_GPIO_Init+0xd4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b20      	ldr	r3, [pc, #128]	@ (8001590 <MX_GPIO_Init+0xd4>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a1f      	ldr	r2, [pc, #124]	@ (8001590 <MX_GPIO_Init+0xd4>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <MX_GPIO_Init+0xd4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <MX_GPIO_Init+0xd4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a18      	ldr	r2, [pc, #96]	@ (8001590 <MX_GPIO_Init+0xd4>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <MX_GPIO_Init+0xd4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <MX_GPIO_Init+0xd4>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a11      	ldr	r2, [pc, #68]	@ (8001590 <MX_GPIO_Init+0xd4>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <MX_GPIO_Init+0xd4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|trig_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001564:	480b      	ldr	r0, [pc, #44]	@ (8001594 <MX_GPIO_Init+0xd8>)
 8001566:	f001 fbbf 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 trig_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|trig_Pin;
 800156a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	4804      	ldr	r0, [pc, #16]	@ (8001594 <MX_GPIO_Init+0xd8>)
 8001584:	f001 fa14 	bl	80029b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	@ 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	40020c00 	.word	0x40020c00

08001598 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
		if(captureIdx == 0) //Fisrt edge
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_TIM_IC_CaptureCallback+0x50>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10a      	bne.n	80015be <HAL_TIM_IC_CaptureCallback+0x26>
		{
			edge1Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //__HAL_TIM_GetCounter(&htim3);//
 80015a8:	2100      	movs	r1, #0
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f002 fefa 	bl	80043a4 <HAL_TIM_ReadCapturedValue>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a0e      	ldr	r2, [pc, #56]	@ (80015ec <HAL_TIM_IC_CaptureCallback+0x54>)
 80015b4:	6013      	str	r3, [r2, #0]

			captureIdx = 1;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <HAL_TIM_IC_CaptureCallback+0x50>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
		{
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			captureIdx = 0;
			icFlag = 1;
		}
}
 80015bc:	e010      	b.n	80015e0 <HAL_TIM_IC_CaptureCallback+0x48>
		else if(captureIdx == 1) //Second edge
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_TIM_IC_CaptureCallback+0x50>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d10c      	bne.n	80015e0 <HAL_TIM_IC_CaptureCallback+0x48>
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80015c6:	2100      	movs	r1, #0
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f002 feeb 	bl	80043a4 <HAL_TIM_ReadCapturedValue>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a07      	ldr	r2, [pc, #28]	@ (80015f0 <HAL_TIM_IC_CaptureCallback+0x58>)
 80015d2:	6013      	str	r3, [r2, #0]
			captureIdx = 0;
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <HAL_TIM_IC_CaptureCallback+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
			icFlag = 1;
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000401 	.word	0x20000401
 80015ec:	20000404 	.word	0x20000404
 80015f0:	20000408 	.word	0x20000408
 80015f4:	20000400 	.word	0x20000400

080015f8 <usDelay>:
void usDelay(uint32_t uSec)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d801      	bhi.n	800160a <usDelay+0x12>
 8001606:	2302      	movs	r3, #2
 8001608:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 800160a:	4a13      	ldr	r2, [pc, #76]	@ (8001658 <usDelay+0x60>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	62d3      	str	r3, [r2, #44]	@ 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <usDelay+0x60>)
 8001614:	2201      	movs	r2, #1
 8001616:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <usDelay+0x60>)
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	4a0e      	ldr	r2, [pc, #56]	@ (8001658 <usDelay+0x60>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <usDelay+0x60>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0b      	ldr	r2, [pc, #44]	@ (8001658 <usDelay+0x60>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8001630:	bf00      	nop
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <usDelay+0x60>)
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b01      	cmp	r3, #1
 800163c:	d1f9      	bne.n	8001632 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <usDelay+0x60>)
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	4a05      	ldr	r2, [pc, #20]	@ (8001658 <usDelay+0x60>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6113      	str	r3, [r2, #16]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40000800 	.word	0x40000800

0800165c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
   */
  //debugging message
  //sends what it just received
  //HAL_UART_Transmit(&huart2, (uint8_t *)rx_data, strlen(rx_data), 10);

  newDataIn = 1;
 8001664:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <HAL_UART_RxCpltCallback+0x1c>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]


}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	2000040c 	.word	0x2000040c

0800167c <ROTATE_BIN>:

		  //HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
		  HAL_Delay(1000);
}
int ROTATE_BIN(uint8_t position)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]

  //HAL_UART_Transmit(&huart2, (uint8_t *) flag_0, strlen(flag_0), 10);
  switch (position)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d010      	beq.n	80016ae <ROTATE_BIN+0x32>
 800168c:	2b02      	cmp	r3, #2
 800168e:	dc13      	bgt.n	80016b8 <ROTATE_BIN+0x3c>
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <ROTATE_BIN+0x1e>
 8001694:	2b01      	cmp	r3, #1
 8001696:	d005      	beq.n	80016a4 <ROTATE_BIN+0x28>
  case 2:
    ROTATE_MOTOR(POSITION_TRASH, SERVO_BIN);
    break;
  default:
	  //HAL_UART_Transmit(&huart2, (uint8_t *) error_0, strlen(error_0), 10);
    break;
 8001698:	e00e      	b.n	80016b8 <ROTATE_BIN+0x3c>
    ROTATE_MOTOR(POSITION_PLASTIC, SERVO_BIN);
 800169a:	2100      	movs	r1, #0
 800169c:	2000      	movs	r0, #0
 800169e:	f000 f813 	bl	80016c8 <ROTATE_MOTOR>
    break;
 80016a2:	e00a      	b.n	80016ba <ROTATE_BIN+0x3e>
    ROTATE_MOTOR(POSITION_METAL, SERVO_BIN);
 80016a4:	2100      	movs	r1, #0
 80016a6:	2050      	movs	r0, #80	@ 0x50
 80016a8:	f000 f80e 	bl	80016c8 <ROTATE_MOTOR>
    break;
 80016ac:	e005      	b.n	80016ba <ROTATE_BIN+0x3e>
    ROTATE_MOTOR(POSITION_TRASH, SERVO_BIN);
 80016ae:	2100      	movs	r1, #0
 80016b0:	20b4      	movs	r0, #180	@ 0xb4
 80016b2:	f000 f809 	bl	80016c8 <ROTATE_MOTOR>
    break;
 80016b6:	e000      	b.n	80016ba <ROTATE_BIN+0x3e>
    break;
 80016b8:	bf00      	nop
  }
  return 0;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	0000      	movs	r0, r0
	...

080016c8 <ROTATE_MOTOR>:
int ROTATE_MOTOR(uint8_t degree, uint8_t servo)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	460a      	mov	r2, r1
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	4613      	mov	r3, r2
 80016d6:	71bb      	strb	r3, [r7, #6]
  uint8_t duty_cycle = degree * 0.64444 + 14;
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff22 	bl	8000524 <__aeabi_i2d>
 80016e0:	a31c      	add	r3, pc, #112	@ (adr r3, 8001754 <ROTATE_MOTOR+0x8c>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe ff87 	bl	80005f8 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <ROTATE_MOTOR+0x80>)
 80016f8:	f7fe fdc8 	bl	800028c <__adddf3>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa50 	bl	8000ba8 <__aeabi_d2uiz>
 8001708:	4603      	mov	r3, r0
 800170a:	73fb      	strb	r3, [r7, #15]
  //sprintf(flag_1,"duty_cycle = %u \r\n",duty_cycle);
  //HAL_UART_Transmit(&huart2, (uint8_t *) flag_1, strlen(flag_1), 10);

  switch(servo)
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <ROTATE_MOTOR+0x50>
 8001712:	2b01      	cmp	r3, #1
 8001714:	d009      	beq.n	800172a <ROTATE_MOTOR+0x62>
    	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
    	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, duty_cycle);
      break;
    default:
  	  //HAL_UART_Transmit(&huart2, (uint8_t *) error_0, strlen(error_0), 10);
      break;
 8001716:	e011      	b.n	800173c <ROTATE_MOTOR+0x74>
    	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001718:	2100      	movs	r1, #0
 800171a:	480c      	ldr	r0, [pc, #48]	@ (800174c <ROTATE_MOTOR+0x84>)
 800171c:	f002 f834 	bl	8003788 <HAL_TIM_PWM_Start>
    	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, duty_cycle);
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <ROTATE_MOTOR+0x84>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8001728:	e008      	b.n	800173c <ROTATE_MOTOR+0x74>
    	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800172a:	2100      	movs	r1, #0
 800172c:	4808      	ldr	r0, [pc, #32]	@ (8001750 <ROTATE_MOTOR+0x88>)
 800172e:	f002 f82b 	bl	8003788 <HAL_TIM_PWM_Start>
    	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, duty_cycle);
 8001732:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <ROTATE_MOTOR+0x88>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	7bfa      	ldrb	r2, [r7, #15]
 8001738:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 800173a:	bf00      	nop
  }


  return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	402c0000 	.word	0x402c0000
 800174c:	20000280 	.word	0x20000280
 8001750:	20000310 	.word	0x20000310
 8001754:	a2877ee5 	.word	0xa2877ee5
 8001758:	3fe49f40 	.word	0x3fe49f40

0800175c <UPDATE_FULLNESS>:


void UPDATE_FULLNESS(uint8_t class)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
	// initialise internal variables
	uint8_t fullness = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
	float distance = 0;
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]

	//  measure distance
	distance = GET_DISTANCE();
 8001770:	f000 f85e 	bl	8001830 <GET_DISTANCE>
 8001774:	ed87 0a02 	vstr	s0, [r7, #8]

	// convert distance to percentage
	switch (class) {
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d030      	beq.n	80017e0 <UPDATE_FULLNESS+0x84>
 800177e:	2b02      	cmp	r3, #2
 8001780:	dc43      	bgt.n	800180a <UPDATE_FULLNESS+0xae>
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <UPDATE_FULLNESS+0x30>
 8001786:	2b01      	cmp	r3, #1
 8001788:	d015      	beq.n	80017b6 <UPDATE_FULLNESS+0x5a>
 800178a:	e03e      	b.n	800180a <UPDATE_FULLNESS+0xae>
		case 0:
			fullness = (FULL_LENGTH_0 - distance) / FULL_LENGTH_0 * 100;
 800178c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001790:	edd7 7a02 	vldr	s15, [r7, #8]
 8001794:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001798:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800179c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001828 <UPDATE_FULLNESS+0xcc>
 80017a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ac:	edc7 7a00 	vstr	s15, [r7]
 80017b0:	783b      	ldrb	r3, [r7, #0]
 80017b2:	73fb      	strb	r3, [r7, #15]
			break;
 80017b4:	e02f      	b.n	8001816 <UPDATE_FULLNESS+0xba>
		case 1:
			fullness = (FULL_LENGTH_1 - distance) / FULL_LENGTH_1 * 100;
 80017b6:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80017ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80017be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c2:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 80017c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ca:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001828 <UPDATE_FULLNESS+0xcc>
 80017ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d6:	edc7 7a00 	vstr	s15, [r7]
 80017da:	783b      	ldrb	r3, [r7, #0]
 80017dc:	73fb      	strb	r3, [r7, #15]
			break;
 80017de:	e01a      	b.n	8001816 <UPDATE_FULLNESS+0xba>
		case 2:
			fullness = (FULL_LENGTH_0 - distance) / FULL_LENGTH_2 * 100;
 80017e0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80017e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80017e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ec:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 80017f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001828 <UPDATE_FULLNESS+0xcc>
 80017f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001800:	edc7 7a00 	vstr	s15, [r7]
 8001804:	783b      	ldrb	r3, [r7, #0]
 8001806:	73fb      	strb	r3, [r7, #15]
			break;
 8001808:	e005      	b.n	8001816 <UPDATE_FULLNESS+0xba>
		default:
			if (fullness > 100)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b64      	cmp	r3, #100	@ 0x64
 800180e:	d901      	bls.n	8001814 <UPDATE_FULLNESS+0xb8>
			{
				fullness = 100;
 8001810:	2364      	movs	r3, #100	@ 0x64
 8001812:	73fb      	strb	r3, [r7, #15]
			}else
				if(fullness < 0)
				{
					fullness  = 0;
				}
			break;
 8001814:	bf00      	nop
	}


	//update fullness array
	percent_class[class] = fullness;
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	4904      	ldr	r1, [pc, #16]	@ (800182c <UPDATE_FULLNESS+0xd0>)
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	54ca      	strb	r2, [r1, r3]

}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	42c80000 	.word	0x42c80000
 800182c:	20000410 	.word	0x20000410

08001830 <GET_DISTANCE>:
float GET_DISTANCE()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
	float distance = 0;
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
	// set trig pin to HIGH for 10 us
	HAL_GPIO_WritePin(trig_GPIO_Port, trig_Pin, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001842:	4829      	ldr	r0, [pc, #164]	@ (80018e8 <GET_DISTANCE+0xb8>)
 8001844:	f001 fa50 	bl	8002ce8 <HAL_GPIO_WritePin>
	usDelay(10);
 8001848:	200a      	movs	r0, #10
 800184a:	f7ff fed5 	bl	80015f8 <usDelay>

	// reset it to 0
	HAL_GPIO_WritePin(trig_GPIO_Port, trig_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001854:	4824      	ldr	r0, [pc, #144]	@ (80018e8 <GET_DISTANCE+0xb8>)
 8001856:	f001 fa47 	bl	8002ce8 <HAL_GPIO_WritePin>

	//Start IC timer
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800185a:	2100      	movs	r1, #0
 800185c:	4823      	ldr	r0, [pc, #140]	@ (80018ec <GET_DISTANCE+0xbc>)
 800185e:	f002 f8b5 	bl	80039cc <HAL_TIM_IC_Start_IT>

	//Wait for IC flag
	uint32_t startTick = HAL_GetTick();
 8001862:	f000 fbf3 	bl	800204c <HAL_GetTick>
 8001866:	6038      	str	r0, [r7, #0]
	do
	{
		if(icFlag) break;
 8001868:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <GET_DISTANCE+0xc0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d108      	bne.n	8001882 <GET_DISTANCE+0x52>
	}while((HAL_GetTick() - startTick) < 500);  //500ms
 8001870:	f000 fbec 	bl	800204c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800187e:	d3f3      	bcc.n	8001868 <GET_DISTANCE+0x38>
 8001880:	e000      	b.n	8001884 <GET_DISTANCE+0x54>
		if(icFlag) break;
 8001882:	bf00      	nop

	icFlag = 0;
 8001884:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <GET_DISTANCE+0xc0>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 800188a:	2100      	movs	r1, #0
 800188c:	4817      	ldr	r0, [pc, #92]	@ (80018ec <GET_DISTANCE+0xbc>)
 800188e:	f002 f9c5 	bl	8003c1c <HAL_TIM_IC_Stop_IT>

	//Calculate distance in cm
	if(edge2Time > edge1Time)
 8001892:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <GET_DISTANCE+0xc4>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <GET_DISTANCE+0xc8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d90f      	bls.n	80018be <GET_DISTANCE+0x8e>
	{
		distance = ((edge2Time - edge1Time) + 0.0f)*speedofsound;
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <GET_DISTANCE+0xc4>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <GET_DISTANCE+0xc8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80018fc <GET_DISTANCE+0xcc>
 80018b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80018bc:	e002      	b.n	80018c4 <GET_DISTANCE+0x94>
	}
	else
	{
		distance = 0.0f;
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
	}

	sprintf(uartBuf, "Distance (cm) = %.1f\r\n", distance);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7fe fe3f 	bl	8000548 <__aeabi_f2d>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	490c      	ldr	r1, [pc, #48]	@ (8001900 <GET_DISTANCE+0xd0>)
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <GET_DISTANCE+0xd4>)
 80018d2:	f004 fdd5 	bl	8006480 <siprintf>

	//HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
	//HAL_Delay(1000);

	return distance;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	ee07 3a90 	vmov	s15, r3

}
 80018dc:	eeb0 0a67 	vmov.f32	s0, s15
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020c00 	.word	0x40020c00
 80018ec:	200001f0 	.word	0x200001f0
 80018f0:	20000400 	.word	0x20000400
 80018f4:	20000408 	.word	0x20000408
 80018f8:	20000404 	.word	0x20000404
 80018fc:	3c8c7e28 	.word	0x3c8c7e28
 8001900:	0800871c 	.word	0x0800871c
 8001904:	20000414 	.word	0x20000414

08001908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <Error_Handler+0x8>

08001914 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <HAL_MspInit+0x4c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <HAL_MspInit+0x4c>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001928:	6453      	str	r3, [r2, #68]	@ 0x44
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_MspInit+0x4c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	4a08      	ldr	r2, [pc, #32]	@ (8001960 <HAL_MspInit+0x4c>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	@ 0x40
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001952:	2007      	movs	r0, #7
 8001954:	f000 fc7a 	bl	800224c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	@ 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a3f      	ldr	r2, [pc, #252]	@ (8001a80 <HAL_TIM_Base_MspInit+0x11c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d134      	bne.n	80019f0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6413      	str	r3, [r2, #64]	@ 0x40
 8001996:	4b3b      	ldr	r3, [pc, #236]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	4b37      	ldr	r3, [pc, #220]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	4a36      	ldr	r2, [pc, #216]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b2:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = echo_Pin;
 80019be:	2340      	movs	r3, #64	@ 0x40
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ce:	2302      	movs	r3, #2
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(echo_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	482b      	ldr	r0, [pc, #172]	@ (8001a88 <HAL_TIM_Base_MspInit+0x124>)
 80019da:	f000 ffe9 	bl	80029b0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	201d      	movs	r0, #29
 80019e4:	f000 fc3d 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019e8:	201d      	movs	r0, #29
 80019ea:	f000 fc56 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80019ee:	e042      	b.n	8001a76 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a25      	ldr	r2, [pc, #148]	@ (8001a8c <HAL_TIM_Base_MspInit+0x128>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d10e      	bne.n	8001a18 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	4a20      	ldr	r2, [pc, #128]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
}
 8001a16:	e02e      	b.n	8001a76 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM5)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8001a90 <HAL_TIM_Base_MspInit+0x12c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d116      	bne.n	8001a50 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b17      	ldr	r3, [pc, #92]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	4a16      	ldr	r2, [pc, #88]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a32:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	2032      	movs	r0, #50	@ 0x32
 8001a44:	f000 fc0d 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a48:	2032      	movs	r0, #50	@ 0x32
 8001a4a:	f000 fc26 	bl	800229a <HAL_NVIC_EnableIRQ>
}
 8001a4e:	e012      	b.n	8001a76 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM13)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0f      	ldr	r2, [pc, #60]	@ (8001a94 <HAL_TIM_Base_MspInit+0x130>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10d      	bne.n	8001a76 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	4a08      	ldr	r2, [pc, #32]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 8001a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_TIM_Base_MspInit+0x120>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
}
 8001a76:	bf00      	nop
 8001a78:	3730      	adds	r7, #48	@ 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40000400 	.word	0x40000400
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40000800 	.word	0x40000800
 8001a90:	40000c00 	.word	0x40000c00
 8001a94:	40001c00 	.word	0x40001c00

08001a98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d10d      	bne.n	8001ac6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <HAL_TIM_PWM_MspInit+0x40>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	4a09      	ldr	r2, [pc, #36]	@ (8001ad8 <HAL_TIM_PWM_MspInit+0x40>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <HAL_TIM_PWM_MspInit+0x40>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40014000 	.word	0x40014000
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	@ 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a36      	ldr	r2, [pc, #216]	@ (8001bd4 <HAL_TIM_MspPostInit+0xf8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d11e      	bne.n	8001b3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b35      	ldr	r3, [pc, #212]	@ (8001bd8 <HAL_TIM_MspPostInit+0xfc>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a34      	ldr	r2, [pc, #208]	@ (8001bd8 <HAL_TIM_MspPostInit+0xfc>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b32      	ldr	r3, [pc, #200]	@ (8001bd8 <HAL_TIM_MspPostInit+0xfc>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = SERVO_BIN_Pin;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_BIN_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	4829      	ldr	r0, [pc, #164]	@ (8001bdc <HAL_TIM_MspPostInit+0x100>)
 8001b36:	f000 ff3b 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001b3a:	e046      	b.n	8001bca <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM9)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a27      	ldr	r2, [pc, #156]	@ (8001be0 <HAL_TIM_MspPostInit+0x104>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d11e      	bne.n	8001b84 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b23      	ldr	r3, [pc, #140]	@ (8001bd8 <HAL_TIM_MspPostInit+0xfc>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a22      	ldr	r2, [pc, #136]	@ (8001bd8 <HAL_TIM_MspPostInit+0xfc>)
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <HAL_TIM_MspPostInit+0xfc>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b62:	2320      	movs	r3, #32
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001b72:	2303      	movs	r3, #3
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4819      	ldr	r0, [pc, #100]	@ (8001be4 <HAL_TIM_MspPostInit+0x108>)
 8001b7e:	f000 ff17 	bl	80029b0 <HAL_GPIO_Init>
}
 8001b82:	e022      	b.n	8001bca <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM13)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a17      	ldr	r2, [pc, #92]	@ (8001be8 <HAL_TIM_MspPostInit+0x10c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d11d      	bne.n	8001bca <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <HAL_TIM_MspPostInit+0xfc>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	4a10      	ldr	r2, [pc, #64]	@ (8001bd8 <HAL_TIM_MspPostInit+0xfc>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <HAL_TIM_MspPostInit+0xfc>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_LID_Pin;
 8001baa:	2340      	movs	r3, #64	@ 0x40
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001bba:	2309      	movs	r3, #9
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_LID_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4805      	ldr	r0, [pc, #20]	@ (8001bdc <HAL_TIM_MspPostInit+0x100>)
 8001bc6:	f000 fef3 	bl	80029b0 <HAL_GPIO_Init>
}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	@ 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40000c00 	.word	0x40000c00
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40014000 	.word	0x40014000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40001c00 	.word	0x40001c00

08001bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a30      	ldr	r2, [pc, #192]	@ (8001ccc <HAL_UART_MspInit+0xe0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d15a      	bne.n	8001cc4 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <HAL_UART_MspInit+0xe4>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	4a2e      	ldr	r2, [pc, #184]	@ (8001cd0 <HAL_UART_MspInit+0xe4>)
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd0 <HAL_UART_MspInit+0xe4>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b28      	ldr	r3, [pc, #160]	@ (8001cd0 <HAL_UART_MspInit+0xe4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	4a27      	ldr	r2, [pc, #156]	@ (8001cd0 <HAL_UART_MspInit+0xe4>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3a:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <HAL_UART_MspInit+0xe4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c46:	230c      	movs	r3, #12
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c56:	2307      	movs	r3, #7
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	481c      	ldr	r0, [pc, #112]	@ (8001cd4 <HAL_UART_MspInit+0xe8>)
 8001c62:	f000 fea5 	bl	80029b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001c68:	4a1c      	ldr	r2, [pc, #112]	@ (8001cdc <HAL_UART_MspInit+0xf0>)
 8001c6a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001c6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c72:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c74:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7a:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c80:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001c82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c86:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c8e:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001c94:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001c96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ca8:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001caa:	f000 fb11 	bl	80022d0 <HAL_DMA_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001cb4:	f7ff fe28 	bl	8001908 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a07      	ldr	r2, [pc, #28]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001cbc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cbe:	4a06      	ldr	r2, [pc, #24]	@ (8001cd8 <HAL_UART_MspInit+0xec>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cc4:	bf00      	nop
 8001cc6:	3728      	adds	r7, #40	@ 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40004400 	.word	0x40004400
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	200003a0 	.word	0x200003a0
 8001cdc:	40026088 	.word	0x40026088

08001ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <NMI_Handler+0x4>

08001ce8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <HardFault_Handler+0x4>

08001cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <MemManage_Handler+0x4>

08001cf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d36:	f000 f975 	bl	8002024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d44:	4802      	ldr	r0, [pc, #8]	@ (8001d50 <DMA1_Stream5_IRQHandler+0x10>)
 8001d46:	f000 fbc9 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200003a0 	.word	0x200003a0

08001d54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <TIM3_IRQHandler+0x10>)
 8001d5a:	f002 f80d 	bl	8003d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200001f0 	.word	0x200001f0

08001d68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <TIM5_IRQHandler+0x10>)
 8001d6e:	f002 f803 	bl	8003d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000280 	.word	0x20000280

08001d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return 1;
 8001d80:	2301      	movs	r3, #1
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_kill>:

int _kill(int pid, int sig)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d96:	f004 fc29 	bl	80065ec <__errno>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2216      	movs	r2, #22
 8001d9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_exit>:

void _exit (int status)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ffe7 	bl	8001d8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dbe:	bf00      	nop
 8001dc0:	e7fd      	b.n	8001dbe <_exit+0x12>

08001dc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e00a      	b.n	8001dea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	4601      	mov	r1, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	60ba      	str	r2, [r7, #8]
 8001de0:	b2ca      	uxtb	r2, r1
 8001de2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3301      	adds	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dbf0      	blt.n	8001dd4 <_read+0x12>
  }

  return len;
 8001df2:	687b      	ldr	r3, [r7, #4]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e009      	b.n	8001e22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	60ba      	str	r2, [r7, #8]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	dbf1      	blt.n	8001e0e <_write+0x12>
  }
  return len;
 8001e2a:	687b      	ldr	r3, [r7, #4]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_close>:

int _close(int file)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e5c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_isatty>:

int _isatty(int file)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b085      	sub	sp, #20
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea4:	4a14      	ldr	r2, [pc, #80]	@ (8001ef8 <_sbrk+0x5c>)
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <_sbrk+0x60>)
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <_sbrk+0x64>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <_sbrk+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d207      	bcs.n	8001edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ecc:	f004 fb8e 	bl	80065ec <__errno>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	e009      	b.n	8001ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001edc:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	@ (8001f00 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a05      	ldr	r2, [pc, #20]	@ (8001f00 <_sbrk+0x64>)
 8001eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20020000 	.word	0x20020000
 8001efc:	00000400 	.word	0x00000400
 8001f00:	2000047c 	.word	0x2000047c
 8001f04:	200005d0 	.word	0x200005d0

08001f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <SystemInit+0x20>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <SystemInit+0x20>)
 8001f14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f30:	f7ff ffea 	bl	8001f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f34:	480c      	ldr	r0, [pc, #48]	@ (8001f68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f36:	490d      	ldr	r1, [pc, #52]	@ (8001f6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f38:	4a0d      	ldr	r2, [pc, #52]	@ (8001f70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f3c:	e002      	b.n	8001f44 <LoopCopyDataInit>

08001f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f42:	3304      	adds	r3, #4

08001f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f48:	d3f9      	bcc.n	8001f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f50:	e001      	b.n	8001f56 <LoopFillZerobss>

08001f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f54:	3204      	adds	r2, #4

08001f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f5a:	f004 fb4d 	bl	80065f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f5e:	f7fe ffbb 	bl	8000ed8 <main>
  bx  lr    
 8001f62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f6c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f70:	08008ad8 	.word	0x08008ad8
  ldr r2, =_sbss
 8001f74:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001f78:	200005d0 	.word	0x200005d0

08001f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f7c:	e7fe      	b.n	8001f7c <ADC_IRQHandler>
	...

08001f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f84:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <HAL_Init+0x40>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc0 <HAL_Init+0x40>)
 8001f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <HAL_Init+0x40>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <HAL_Init+0x40>)
 8001f96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f9c:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <HAL_Init+0x40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a07      	ldr	r2, [pc, #28]	@ (8001fc0 <HAL_Init+0x40>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f000 f94f 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f000 f808 	bl	8001fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb4:	f7ff fcae 	bl	8001914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023c00 	.word	0x40023c00

08001fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fcc:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <HAL_InitTick+0x54>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <HAL_InitTick+0x58>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f967 	bl	80022b6 <HAL_SYSTICK_Config>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00e      	b.n	8002010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	d80a      	bhi.n	800200e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f000 f92f 	bl	8002262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002004:	4a06      	ldr	r2, [pc, #24]	@ (8002020 <HAL_InitTick+0x5c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000000 	.word	0x20000000
 800201c:	20000008 	.word	0x20000008
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <HAL_IncTick+0x20>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <HAL_IncTick+0x24>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <HAL_IncTick+0x24>)
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000008 	.word	0x20000008
 8002048:	20000480 	.word	0x20000480

0800204c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <HAL_GetTick+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000480 	.word	0x20000480

08002064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff ffee 	bl	800204c <HAL_GetTick>
 8002070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d005      	beq.n	800208a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_Delay+0x44>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800208a:	bf00      	nop
 800208c:	f7ff ffde 	bl	800204c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	429a      	cmp	r2, r3
 800209a:	d8f7      	bhi.n	800208c <HAL_Delay+0x28>
  {
  }
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000008 	.word	0x20000008

080020ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	@ (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db0b      	blt.n	800213a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4907      	ldr	r1, [pc, #28]	@ (8002148 <__NVIC_EnableIRQ+0x38>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2001      	movs	r0, #1
 8002132:	fa00 f202 	lsl.w	r2, r0, r2
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	@ (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	@ (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	@ 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1c3 0307 	rsb	r3, r3, #7
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	bf28      	it	cs
 80021be:	2304      	movcs	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d902      	bls.n	80021d0 <NVIC_EncodePriority+0x30>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b03      	subs	r3, #3
 80021ce:	e000      	b.n	80021d2 <NVIC_EncodePriority+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	4313      	orrs	r3, r2
         );
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	@ 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	@ (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	210f      	movs	r1, #15
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f7ff ff8e 	bl	800214c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff29 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff3e 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff8e 	bl	80021a0 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5d 	bl	800214c <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff31 	bl	8002110 <__NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffa2 	bl	8002208 <SysTick_Config>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff feb6 	bl	800204c <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e099      	b.n	8002420 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0201 	bic.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800230c:	e00f      	b.n	800232e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800230e:	f7ff fe9d 	bl	800204c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b05      	cmp	r3, #5
 800231a:	d908      	bls.n	800232e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e078      	b.n	8002420 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e8      	bne.n	800230e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	4b38      	ldr	r3, [pc, #224]	@ (8002428 <HAL_DMA_Init+0x158>)
 8002348:	4013      	ands	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800235a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002384:	2b04      	cmp	r3, #4
 8002386:	d107      	bne.n	8002398 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002390:	4313      	orrs	r3, r2
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f023 0307 	bic.w	r3, r3, #7
 80023ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d117      	bne.n	80023f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00e      	beq.n	80023f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fa6f 	bl	80028b8 <DMA_CheckFifoParam>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2240      	movs	r2, #64	@ 0x40
 80023e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023ee:	2301      	movs	r3, #1
 80023f0:	e016      	b.n	8002420 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fa26 	bl	800284c <DMA_CalcBaseAndBitshift>
 8002400:	4603      	mov	r3, r0
 8002402:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002408:	223f      	movs	r2, #63	@ 0x3f
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	f010803f 	.word	0xf010803f

0800242c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_DMA_Start_IT+0x26>
 800244e:	2302      	movs	r3, #2
 8002450:	e040      	b.n	80024d4 <HAL_DMA_Start_IT+0xa8>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d12f      	bne.n	80024c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2202      	movs	r2, #2
 800246a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f9b8 	bl	80027f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002484:	223f      	movs	r2, #63	@ 0x3f
 8002486:	409a      	lsls	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0216 	orr.w	r2, r2, #22
 800249a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0208 	orr.w	r2, r2, #8
 80024b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e005      	b.n	80024d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024ce:	2302      	movs	r3, #2
 80024d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024e8:	4b8e      	ldr	r3, [pc, #568]	@ (8002724 <HAL_DMA_IRQHandler+0x248>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a8e      	ldr	r2, [pc, #568]	@ (8002728 <HAL_DMA_IRQHandler+0x24c>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0a9b      	lsrs	r3, r3, #10
 80024f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002506:	2208      	movs	r2, #8
 8002508:	409a      	lsls	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01a      	beq.n	8002548 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0204 	bic.w	r2, r2, #4
 800252e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002534:	2208      	movs	r2, #8
 8002536:	409a      	lsls	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254c:	2201      	movs	r2, #1
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d012      	beq.n	800257e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256a:	2201      	movs	r2, #1
 800256c:	409a      	lsls	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002576:	f043 0202 	orr.w	r2, r3, #2
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002582:	2204      	movs	r2, #4
 8002584:	409a      	lsls	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d012      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00b      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a0:	2204      	movs	r2, #4
 80025a2:	409a      	lsls	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ac:	f043 0204 	orr.w	r2, r3, #4
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b8:	2210      	movs	r2, #16
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d043      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d03c      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d6:	2210      	movs	r2, #16
 80025d8:	409a      	lsls	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d018      	beq.n	800261e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d108      	bne.n	800260c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d024      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
 800260a:	e01f      	b.n	800264c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01b      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
 800261c:	e016      	b.n	800264c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0208 	bic.w	r2, r2, #8
 800263a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002650:	2220      	movs	r2, #32
 8002652:	409a      	lsls	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 808f 	beq.w	800277c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8087 	beq.w	800277c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002672:	2220      	movs	r2, #32
 8002674:	409a      	lsls	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b05      	cmp	r3, #5
 8002684:	d136      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0216 	bic.w	r2, r2, #22
 8002694:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <HAL_DMA_IRQHandler+0x1da>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0208 	bic.w	r2, r2, #8
 80026c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	223f      	movs	r2, #63	@ 0x3f
 80026cc:	409a      	lsls	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d07e      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
        }
        return;
 80026f2:	e079      	b.n	80027e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01d      	beq.n	800273e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10d      	bne.n	800272c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002714:	2b00      	cmp	r3, #0
 8002716:	d031      	beq.n	800277c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
 8002720:	e02c      	b.n	800277c <HAL_DMA_IRQHandler+0x2a0>
 8002722:	bf00      	nop
 8002724:	20000000 	.word	0x20000000
 8002728:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002730:	2b00      	cmp	r3, #0
 8002732:	d023      	beq.n	800277c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
 800273c:	e01e      	b.n	800277c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10f      	bne.n	800276c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0210 	bic.w	r2, r2, #16
 800275a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002780:	2b00      	cmp	r3, #0
 8002782:	d032      	beq.n	80027ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d022      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2205      	movs	r2, #5
 8002794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d307      	bcc.n	80027c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f2      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x2cc>
 80027c2:	e000      	b.n	80027c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
 80027e6:	e000      	b.n	80027ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80027e8:	bf00      	nop
    }
  }
}
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800280c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b40      	cmp	r3, #64	@ 0x40
 800281c:	d108      	bne.n	8002830 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800282e:	e007      	b.n	8002840 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	60da      	str	r2, [r3, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3b10      	subs	r3, #16
 800285c:	4a14      	ldr	r2, [pc, #80]	@ (80028b0 <DMA_CalcBaseAndBitshift+0x64>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002866:	4a13      	ldr	r2, [pc, #76]	@ (80028b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d909      	bls.n	800288e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002882:	f023 0303 	bic.w	r3, r3, #3
 8002886:	1d1a      	adds	r2, r3, #4
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	659a      	str	r2, [r3, #88]	@ 0x58
 800288c:	e007      	b.n	800289e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	aaaaaaab 	.word	0xaaaaaaab
 80028b4:	0800874c 	.word	0x0800874c

080028b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11f      	bne.n	8002912 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d856      	bhi.n	8002986 <DMA_CheckFifoParam+0xce>
 80028d8:	a201      	add	r2, pc, #4	@ (adr r2, 80028e0 <DMA_CheckFifoParam+0x28>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	080028f1 	.word	0x080028f1
 80028e4:	08002903 	.word	0x08002903
 80028e8:	080028f1 	.word	0x080028f1
 80028ec:	08002987 	.word	0x08002987
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d046      	beq.n	800298a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e043      	b.n	800298a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002906:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800290a:	d140      	bne.n	800298e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002910:	e03d      	b.n	800298e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800291a:	d121      	bne.n	8002960 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d837      	bhi.n	8002992 <DMA_CheckFifoParam+0xda>
 8002922:	a201      	add	r2, pc, #4	@ (adr r2, 8002928 <DMA_CheckFifoParam+0x70>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	08002939 	.word	0x08002939
 800292c:	0800293f 	.word	0x0800293f
 8002930:	08002939 	.word	0x08002939
 8002934:	08002951 	.word	0x08002951
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e030      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d025      	beq.n	8002996 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294e:	e022      	b.n	8002996 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002958:	d11f      	bne.n	800299a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800295e:	e01c      	b.n	800299a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d903      	bls.n	800296e <DMA_CheckFifoParam+0xb6>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d003      	beq.n	8002974 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800296c:	e018      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
      break;
 8002972:	e015      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e00b      	b.n	800299e <DMA_CheckFifoParam+0xe6>
      break;
 8002986:	bf00      	nop
 8002988:	e00a      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800298a:	bf00      	nop
 800298c:	e008      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800298e:	bf00      	nop
 8002990:	e006      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
 8002994:	e004      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
 8002998:	e002      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800299e:	bf00      	nop
    }
  } 
  
  return status; 
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	@ 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e16b      	b.n	8002ca4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 815a 	bne.w	8002c9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d005      	beq.n	8002a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d130      	bne.n	8002a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d017      	beq.n	8002aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80b4 	beq.w	8002c9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b60      	ldr	r3, [pc, #384]	@ (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	4a5f      	ldr	r2, [pc, #380]	@ (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b46:	4b5d      	ldr	r3, [pc, #372]	@ (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a5b      	ldr	r2, [pc, #364]	@ (8002cc0 <HAL_GPIO_Init+0x310>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a52      	ldr	r2, [pc, #328]	@ (8002cc4 <HAL_GPIO_Init+0x314>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02b      	beq.n	8002bd6 <HAL_GPIO_Init+0x226>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a51      	ldr	r2, [pc, #324]	@ (8002cc8 <HAL_GPIO_Init+0x318>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d025      	beq.n	8002bd2 <HAL_GPIO_Init+0x222>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a50      	ldr	r2, [pc, #320]	@ (8002ccc <HAL_GPIO_Init+0x31c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01f      	beq.n	8002bce <HAL_GPIO_Init+0x21e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4f      	ldr	r2, [pc, #316]	@ (8002cd0 <HAL_GPIO_Init+0x320>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d019      	beq.n	8002bca <HAL_GPIO_Init+0x21a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4e      	ldr	r2, [pc, #312]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_GPIO_Init+0x216>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4d      	ldr	r2, [pc, #308]	@ (8002cd8 <HAL_GPIO_Init+0x328>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_GPIO_Init+0x212>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8002cdc <HAL_GPIO_Init+0x32c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <HAL_GPIO_Init+0x20e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ce0 <HAL_GPIO_Init+0x330>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_GPIO_Init+0x20a>
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	e00e      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bba:	2308      	movs	r3, #8
 8002bbc:	e00c      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	e00a      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	e008      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e006      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e004      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e002      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	f002 0203 	and.w	r2, r2, #3
 8002bde:	0092      	lsls	r2, r2, #2
 8002be0:	4093      	lsls	r3, r2
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002be8:	4935      	ldr	r1, [pc, #212]	@ (8002cc0 <HAL_GPIO_Init+0x310>)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce4 <HAL_GPIO_Init+0x334>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c1a:	4a32      	ldr	r2, [pc, #200]	@ (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c20:	4b30      	ldr	r3, [pc, #192]	@ (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c44:	4a27      	ldr	r2, [pc, #156]	@ (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c4a:	4b26      	ldr	r3, [pc, #152]	@ (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c98:	4a12      	ldr	r2, [pc, #72]	@ (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b0f      	cmp	r3, #15
 8002ca8:	f67f ae90 	bls.w	80029cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3724      	adds	r7, #36	@ 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40020000 	.word	0x40020000
 8002cc8:	40020400 	.word	0x40020400
 8002ccc:	40020800 	.word	0x40020800
 8002cd0:	40020c00 	.word	0x40020c00
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40021400 	.word	0x40021400
 8002cdc:	40021800 	.word	0x40021800
 8002ce0:	40021c00 	.word	0x40021c00
 8002ce4:	40013c00 	.word	0x40013c00

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e267      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d075      	beq.n	8002e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d3a:	4b88      	ldr	r3, [pc, #544]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d00c      	beq.n	8002d60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d46:	4b85      	ldr	r3, [pc, #532]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d112      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d52:	4b82      	ldr	r3, [pc, #520]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d5e:	d10b      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	4b7e      	ldr	r3, [pc, #504]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d05b      	beq.n	8002e24 <HAL_RCC_OscConfig+0x108>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d157      	bne.n	8002e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e242      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d80:	d106      	bne.n	8002d90 <HAL_RCC_OscConfig+0x74>
 8002d82:	4b76      	ldr	r3, [pc, #472]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a75      	ldr	r2, [pc, #468]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e01d      	b.n	8002dcc <HAL_RCC_OscConfig+0xb0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x98>
 8002d9a:	4b70      	ldr	r3, [pc, #448]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6f      	ldr	r2, [pc, #444]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a6c      	ldr	r2, [pc, #432]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e00b      	b.n	8002dcc <HAL_RCC_OscConfig+0xb0>
 8002db4:	4b69      	ldr	r3, [pc, #420]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a68      	ldr	r2, [pc, #416]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4b66      	ldr	r3, [pc, #408]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a65      	ldr	r2, [pc, #404]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d013      	beq.n	8002dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7ff f93a 	bl	800204c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7ff f936 	bl	800204c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	@ 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e207      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b5b      	ldr	r3, [pc, #364]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0xc0>
 8002dfa:	e014      	b.n	8002e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f926 	bl	800204c <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e04:	f7ff f922 	bl	800204c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	@ 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1f3      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	4b51      	ldr	r3, [pc, #324]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0xe8>
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d063      	beq.n	8002efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e32:	4b4a      	ldr	r3, [pc, #296]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3e:	4b47      	ldr	r3, [pc, #284]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d11c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4a:	4b44      	ldr	r3, [pc, #272]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d116      	bne.n	8002e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	4b41      	ldr	r3, [pc, #260]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_RCC_OscConfig+0x152>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d001      	beq.n	8002e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e1c7      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4937      	ldr	r1, [pc, #220]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e82:	e03a      	b.n	8002efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d020      	beq.n	8002ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e8c:	4b34      	ldr	r3, [pc, #208]	@ (8002f60 <HAL_RCC_OscConfig+0x244>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7ff f8db 	bl	800204c <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9a:	f7ff f8d7 	bl	800204c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e1a8      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eac:	4b2b      	ldr	r3, [pc, #172]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb8:	4b28      	ldr	r3, [pc, #160]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4925      	ldr	r1, [pc, #148]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
 8002ecc:	e015      	b.n	8002efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ece:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <HAL_RCC_OscConfig+0x244>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7ff f8ba 	bl	800204c <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002edc:	f7ff f8b6 	bl	800204c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e187      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	4b1b      	ldr	r3, [pc, #108]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d036      	beq.n	8002f74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0e:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <HAL_RCC_OscConfig+0x248>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7ff f89a 	bl	800204c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1c:	f7ff f896 	bl	800204c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e167      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x200>
 8002f3a:	e01b      	b.n	8002f74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3c:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <HAL_RCC_OscConfig+0x248>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f42:	f7ff f883 	bl	800204c <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	e00e      	b.n	8002f68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f4a:	f7ff f87f 	bl	800204c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d907      	bls.n	8002f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e150      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	42470000 	.word	0x42470000
 8002f64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	4b88      	ldr	r3, [pc, #544]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ea      	bne.n	8002f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8097 	beq.w	80030b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f86:	4b81      	ldr	r3, [pc, #516]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	4b7d      	ldr	r3, [pc, #500]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	4a7c      	ldr	r2, [pc, #496]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa2:	4b7a      	ldr	r3, [pc, #488]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b77      	ldr	r3, [pc, #476]	@ (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d118      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fbe:	4b74      	ldr	r3, [pc, #464]	@ (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a73      	ldr	r2, [pc, #460]	@ (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fca:	f7ff f83f 	bl	800204c <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd2:	f7ff f83b 	bl	800204c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e10c      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x2ea>
 8002ff8:	4b64      	ldr	r3, [pc, #400]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffc:	4a63      	ldr	r2, [pc, #396]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6713      	str	r3, [r2, #112]	@ 0x70
 8003004:	e01c      	b.n	8003040 <HAL_RCC_OscConfig+0x324>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b05      	cmp	r3, #5
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x30c>
 800300e:	4b5f      	ldr	r3, [pc, #380]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003012:	4a5e      	ldr	r2, [pc, #376]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003014:	f043 0304 	orr.w	r3, r3, #4
 8003018:	6713      	str	r3, [r2, #112]	@ 0x70
 800301a:	4b5c      	ldr	r3, [pc, #368]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	4a5b      	ldr	r2, [pc, #364]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6713      	str	r3, [r2, #112]	@ 0x70
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0x324>
 8003028:	4b58      	ldr	r3, [pc, #352]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302c:	4a57      	ldr	r2, [pc, #348]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	6713      	str	r3, [r2, #112]	@ 0x70
 8003034:	4b55      	ldr	r3, [pc, #340]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003038:	4a54      	ldr	r2, [pc, #336]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 800303a:	f023 0304 	bic.w	r3, r3, #4
 800303e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d015      	beq.n	8003074 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7ff f800 	bl	800204c <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fe fffc 	bl	800204c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0cb      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003066:	4b49      	ldr	r3, [pc, #292]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0ee      	beq.n	8003050 <HAL_RCC_OscConfig+0x334>
 8003072:	e014      	b.n	800309e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003074:	f7fe ffea 	bl	800204c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307a:	e00a      	b.n	8003092 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fe ffe6 	bl	800204c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e0b5      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003092:	4b3e      	ldr	r3, [pc, #248]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1ee      	bne.n	800307c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d105      	bne.n	80030b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a4:	4b39      	ldr	r3, [pc, #228]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	4a38      	ldr	r2, [pc, #224]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 80030aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a1 	beq.w	80031fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ba:	4b34      	ldr	r3, [pc, #208]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d05c      	beq.n	8003180 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d141      	bne.n	8003152 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b31      	ldr	r3, [pc, #196]	@ (8003194 <HAL_RCC_OscConfig+0x478>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe ffba 	bl	800204c <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fe ffb6 	bl	800204c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e087      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	4b27      	ldr	r3, [pc, #156]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	019b      	lsls	r3, r3, #6
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	3b01      	subs	r3, #1
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	491b      	ldr	r1, [pc, #108]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	4b1b      	ldr	r3, [pc, #108]	@ (8003194 <HAL_RCC_OscConfig+0x478>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7fe ff8f 	bl	800204c <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003132:	f7fe ff8b 	bl	800204c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e05c      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003144:	4b11      	ldr	r3, [pc, #68]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x416>
 8003150:	e054      	b.n	80031fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b10      	ldr	r3, [pc, #64]	@ (8003194 <HAL_RCC_OscConfig+0x478>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fe ff78 	bl	800204c <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe ff74 	bl	800204c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e045      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_RCC_OscConfig+0x470>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x444>
 800317e:	e03d      	b.n	80031fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e038      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
 800318c:	40023800 	.word	0x40023800
 8003190:	40007000 	.word	0x40007000
 8003194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003198:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <HAL_RCC_OscConfig+0x4ec>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d028      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d121      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d11a      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031c8:	4013      	ands	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d111      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	3b01      	subs	r3, #1
 80031e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d107      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800

0800320c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0cc      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b68      	ldr	r3, [pc, #416]	@ (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d90c      	bls.n	8003248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b65      	ldr	r3, [pc, #404]	@ (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b63      	ldr	r3, [pc, #396]	@ (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0b8      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003260:	4b59      	ldr	r3, [pc, #356]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a58      	ldr	r2, [pc, #352]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800326a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003278:	4b53      	ldr	r3, [pc, #332]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a52      	ldr	r2, [pc, #328]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003284:	4b50      	ldr	r3, [pc, #320]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	494d      	ldr	r1, [pc, #308]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d044      	beq.n	800332c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b47      	ldr	r3, [pc, #284]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d119      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4b3f      	ldr	r3, [pc, #252]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e06f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	4b3b      	ldr	r3, [pc, #236]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e067      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ea:	4b37      	ldr	r3, [pc, #220]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 0203 	bic.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4934      	ldr	r1, [pc, #208]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032fc:	f7fe fea6 	bl	800204c <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	e00a      	b.n	800331a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003304:	f7fe fea2 	bl	800204c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e04f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	4b2b      	ldr	r3, [pc, #172]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 020c 	and.w	r2, r3, #12
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	429a      	cmp	r2, r3
 800332a:	d1eb      	bne.n	8003304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800332c:	4b25      	ldr	r3, [pc, #148]	@ (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d20c      	bcs.n	8003354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b22      	ldr	r3, [pc, #136]	@ (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b20      	ldr	r3, [pc, #128]	@ (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e032      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003360:	4b19      	ldr	r3, [pc, #100]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4916      	ldr	r1, [pc, #88]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800337e:	4b12      	ldr	r3, [pc, #72]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	490e      	ldr	r1, [pc, #56]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003392:	f000 f821 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003396:	4602      	mov	r2, r0
 8003398:	4b0b      	ldr	r3, [pc, #44]	@ (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	490a      	ldr	r1, [pc, #40]	@ (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	5ccb      	ldrb	r3, [r1, r3]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a09      	ldr	r2, [pc, #36]	@ (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ae:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fe06 	bl	8001fc4 <HAL_InitTick>

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023c00 	.word	0x40023c00
 80033c8:	40023800 	.word	0x40023800
 80033cc:	08008734 	.word	0x08008734
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000004 	.word	0x20000004

080033d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033dc:	b094      	sub	sp, #80	@ 0x50
 80033de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e4:	2300      	movs	r3, #0
 80033e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033e8:	2300      	movs	r3, #0
 80033ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f0:	4b79      	ldr	r3, [pc, #484]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d00d      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x40>
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	f200 80e1 	bhi.w	80035c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x34>
 8003406:	2b04      	cmp	r3, #4
 8003408:	d003      	beq.n	8003412 <HAL_RCC_GetSysClockFreq+0x3a>
 800340a:	e0db      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b73      	ldr	r3, [pc, #460]	@ (80035dc <HAL_RCC_GetSysClockFreq+0x204>)
 800340e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003410:	e0db      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003412:	4b73      	ldr	r3, [pc, #460]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003414:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003416:	e0d8      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003418:	4b6f      	ldr	r3, [pc, #444]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003420:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003422:	4b6d      	ldr	r3, [pc, #436]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d063      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342e:	4b6a      	ldr	r3, [pc, #424]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	2200      	movs	r2, #0
 8003436:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003438:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800343a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003440:	633b      	str	r3, [r7, #48]	@ 0x30
 8003442:	2300      	movs	r3, #0
 8003444:	637b      	str	r3, [r7, #52]	@ 0x34
 8003446:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800344a:	4622      	mov	r2, r4
 800344c:	462b      	mov	r3, r5
 800344e:	f04f 0000 	mov.w	r0, #0
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	0159      	lsls	r1, r3, #5
 8003458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345c:	0150      	lsls	r0, r2, #5
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4621      	mov	r1, r4
 8003464:	1a51      	subs	r1, r2, r1
 8003466:	6139      	str	r1, [r7, #16]
 8003468:	4629      	mov	r1, r5
 800346a:	eb63 0301 	sbc.w	r3, r3, r1
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800347c:	4659      	mov	r1, fp
 800347e:	018b      	lsls	r3, r1, #6
 8003480:	4651      	mov	r1, sl
 8003482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003486:	4651      	mov	r1, sl
 8003488:	018a      	lsls	r2, r1, #6
 800348a:	4651      	mov	r1, sl
 800348c:	ebb2 0801 	subs.w	r8, r2, r1
 8003490:	4659      	mov	r1, fp
 8003492:	eb63 0901 	sbc.w	r9, r3, r1
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034aa:	4690      	mov	r8, r2
 80034ac:	4699      	mov	r9, r3
 80034ae:	4623      	mov	r3, r4
 80034b0:	eb18 0303 	adds.w	r3, r8, r3
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	462b      	mov	r3, r5
 80034b8:	eb49 0303 	adc.w	r3, r9, r3
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034ca:	4629      	mov	r1, r5
 80034cc:	024b      	lsls	r3, r1, #9
 80034ce:	4621      	mov	r1, r4
 80034d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034d4:	4621      	mov	r1, r4
 80034d6:	024a      	lsls	r2, r1, #9
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034de:	2200      	movs	r2, #0
 80034e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034e8:	f7fd fb7e 	bl	8000be8 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4613      	mov	r3, r2
 80034f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034f4:	e058      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f6:	4b38      	ldr	r3, [pc, #224]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	099b      	lsrs	r3, r3, #6
 80034fc:	2200      	movs	r2, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	4611      	mov	r1, r2
 8003502:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003506:	623b      	str	r3, [r7, #32]
 8003508:	2300      	movs	r3, #0
 800350a:	627b      	str	r3, [r7, #36]	@ 0x24
 800350c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003510:	4642      	mov	r2, r8
 8003512:	464b      	mov	r3, r9
 8003514:	f04f 0000 	mov.w	r0, #0
 8003518:	f04f 0100 	mov.w	r1, #0
 800351c:	0159      	lsls	r1, r3, #5
 800351e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003522:	0150      	lsls	r0, r2, #5
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4641      	mov	r1, r8
 800352a:	ebb2 0a01 	subs.w	sl, r2, r1
 800352e:	4649      	mov	r1, r9
 8003530:	eb63 0b01 	sbc.w	fp, r3, r1
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003540:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003544:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003548:	ebb2 040a 	subs.w	r4, r2, sl
 800354c:	eb63 050b 	sbc.w	r5, r3, fp
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	00eb      	lsls	r3, r5, #3
 800355a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800355e:	00e2      	lsls	r2, r4, #3
 8003560:	4614      	mov	r4, r2
 8003562:	461d      	mov	r5, r3
 8003564:	4643      	mov	r3, r8
 8003566:	18e3      	adds	r3, r4, r3
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	464b      	mov	r3, r9
 800356c:	eb45 0303 	adc.w	r3, r5, r3
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800357e:	4629      	mov	r1, r5
 8003580:	028b      	lsls	r3, r1, #10
 8003582:	4621      	mov	r1, r4
 8003584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003588:	4621      	mov	r1, r4
 800358a:	028a      	lsls	r2, r1, #10
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003592:	2200      	movs	r2, #0
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	61fa      	str	r2, [r7, #28]
 8003598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800359c:	f7fd fb24 	bl	8000be8 <__aeabi_uldivmod>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4613      	mov	r3, r2
 80035a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035a8:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	3301      	adds	r3, #1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80035b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035c2:	e002      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035c4:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <HAL_RCC_GetSysClockFreq+0x204>)
 80035c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3750      	adds	r7, #80	@ 0x50
 80035d0:	46bd      	mov	sp, r7
 80035d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800
 80035dc:	00f42400 	.word	0x00f42400
 80035e0:	007a1200 	.word	0x007a1200

080035e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e8:	4b03      	ldr	r3, [pc, #12]	@ (80035f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000000 	.word	0x20000000

080035fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003600:	f7ff fff0 	bl	80035e4 <HAL_RCC_GetHCLKFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b05      	ldr	r3, [pc, #20]	@ (800361c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	0a9b      	lsrs	r3, r3, #10
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	4903      	ldr	r1, [pc, #12]	@ (8003620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40023800 	.word	0x40023800
 8003620:	08008744 	.word	0x08008744

08003624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003628:	f7ff ffdc 	bl	80035e4 <HAL_RCC_GetHCLKFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	0b5b      	lsrs	r3, r3, #13
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	4903      	ldr	r1, [pc, #12]	@ (8003648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003640:	4618      	mov	r0, r3
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40023800 	.word	0x40023800
 8003648:	08008744 	.word	0x08008744

0800364c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e041      	b.n	80036e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fe f976 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4610      	mov	r0, r2
 800368c:	f000 fef6 	bl	800447c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e041      	b.n	8003780 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7fe f9c1 	bl	8001a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3304      	adds	r3, #4
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f000 fea7 	bl	800447c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_TIM_PWM_Start+0x24>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e022      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d109      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x3e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e015      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d109      	bne.n	80037e0 <HAL_TIM_PWM_Start+0x58>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e008      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07c      	b.n	80038f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0x82>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003808:	e013      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b04      	cmp	r3, #4
 800380e:	d104      	bne.n	800381a <HAL_TIM_PWM_Start+0x92>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003818:	e00b      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d104      	bne.n	800382a <HAL_TIM_PWM_Start+0xa2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003828:	e003      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f001 fa3e 	bl	8004cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2d      	ldr	r2, [pc, #180]	@ (80038fc <HAL_TIM_PWM_Start+0x174>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_TIM_PWM_Start+0xcc>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2c      	ldr	r2, [pc, #176]	@ (8003900 <HAL_TIM_PWM_Start+0x178>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <HAL_TIM_PWM_Start+0xd0>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_TIM_PWM_Start+0xd2>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a22      	ldr	r2, [pc, #136]	@ (80038fc <HAL_TIM_PWM_Start+0x174>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003880:	d01d      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1f      	ldr	r2, [pc, #124]	@ (8003904 <HAL_TIM_PWM_Start+0x17c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1d      	ldr	r2, [pc, #116]	@ (8003908 <HAL_TIM_PWM_Start+0x180>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1c      	ldr	r2, [pc, #112]	@ (800390c <HAL_TIM_PWM_Start+0x184>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a16      	ldr	r2, [pc, #88]	@ (8003900 <HAL_TIM_PWM_Start+0x178>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a18      	ldr	r2, [pc, #96]	@ (8003910 <HAL_TIM_PWM_Start+0x188>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a16      	ldr	r2, [pc, #88]	@ (8003914 <HAL_TIM_PWM_Start+0x18c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d111      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b06      	cmp	r3, #6
 80038ce:	d010      	beq.n	80038f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e0:	e007      	b.n	80038f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40010000 	.word	0x40010000
 8003900:	40010400 	.word	0x40010400
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40000c00 	.word	0x40000c00
 8003910:	40014000 	.word	0x40014000
 8003914:	40001800 	.word	0x40001800

08003918 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e041      	b.n	80039ae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f839 	bl	80039b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4610      	mov	r0, r2
 8003958:	f000 fd90 	bl	800447c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <HAL_TIM_IC_Start_IT+0x1e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	e013      	b.n	8003a12 <HAL_TIM_IC_Start_IT+0x46>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_IC_Start_IT+0x2e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	e00b      	b.n	8003a12 <HAL_TIM_IC_Start_IT+0x46>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_IC_Start_IT+0x3e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	e003      	b.n	8003a12 <HAL_TIM_IC_Start_IT+0x46>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d104      	bne.n	8003a24 <HAL_TIM_IC_Start_IT+0x58>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e013      	b.n	8003a4c <HAL_TIM_IC_Start_IT+0x80>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d104      	bne.n	8003a34 <HAL_TIM_IC_Start_IT+0x68>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e00b      	b.n	8003a4c <HAL_TIM_IC_Start_IT+0x80>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d104      	bne.n	8003a44 <HAL_TIM_IC_Start_IT+0x78>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e003      	b.n	8003a4c <HAL_TIM_IC_Start_IT+0x80>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a4e:	7bbb      	ldrb	r3, [r7, #14]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d102      	bne.n	8003a5a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a54:	7b7b      	ldrb	r3, [r7, #13]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d001      	beq.n	8003a5e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e0cc      	b.n	8003bf8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_IC_Start_IT+0xa2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a6c:	e013      	b.n	8003a96 <HAL_TIM_IC_Start_IT+0xca>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_IC_Start_IT+0xb2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a7c:	e00b      	b.n	8003a96 <HAL_TIM_IC_Start_IT+0xca>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_IC_Start_IT+0xc2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a8c:	e003      	b.n	8003a96 <HAL_TIM_IC_Start_IT+0xca>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_IC_Start_IT+0xda>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aa4:	e013      	b.n	8003ace <HAL_TIM_IC_Start_IT+0x102>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_IC_Start_IT+0xea>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ab4:	e00b      	b.n	8003ace <HAL_TIM_IC_Start_IT+0x102>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_IC_Start_IT+0xfa>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ac4:	e003      	b.n	8003ace <HAL_TIM_IC_Start_IT+0x102>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	d841      	bhi.n	8003b58 <HAL_TIM_IC_Start_IT+0x18c>
 8003ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8003adc <HAL_TIM_IC_Start_IT+0x110>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003b11 	.word	0x08003b11
 8003ae0:	08003b59 	.word	0x08003b59
 8003ae4:	08003b59 	.word	0x08003b59
 8003ae8:	08003b59 	.word	0x08003b59
 8003aec:	08003b23 	.word	0x08003b23
 8003af0:	08003b59 	.word	0x08003b59
 8003af4:	08003b59 	.word	0x08003b59
 8003af8:	08003b59 	.word	0x08003b59
 8003afc:	08003b35 	.word	0x08003b35
 8003b00:	08003b59 	.word	0x08003b59
 8003b04:	08003b59 	.word	0x08003b59
 8003b08:	08003b59 	.word	0x08003b59
 8003b0c:	08003b47 	.word	0x08003b47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0202 	orr.w	r2, r2, #2
 8003b1e:	60da      	str	r2, [r3, #12]
      break;
 8003b20:	e01d      	b.n	8003b5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0204 	orr.w	r2, r2, #4
 8003b30:	60da      	str	r2, [r3, #12]
      break;
 8003b32:	e014      	b.n	8003b5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0208 	orr.w	r2, r2, #8
 8003b42:	60da      	str	r2, [r3, #12]
      break;
 8003b44:	e00b      	b.n	8003b5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0210 	orr.w	r2, r2, #16
 8003b54:	60da      	str	r2, [r3, #12]
      break;
 8003b56:	e002      	b.n	8003b5e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d148      	bne.n	8003bf6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	6839      	ldr	r1, [r7, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f8a5 	bl	8004cbc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a22      	ldr	r2, [pc, #136]	@ (8003c00 <HAL_TIM_IC_Start_IT+0x234>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d022      	beq.n	8003bc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b84:	d01d      	beq.n	8003bc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c04 <HAL_TIM_IC_Start_IT+0x238>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d018      	beq.n	8003bc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1c      	ldr	r2, [pc, #112]	@ (8003c08 <HAL_TIM_IC_Start_IT+0x23c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c0c <HAL_TIM_IC_Start_IT+0x240>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a19      	ldr	r2, [pc, #100]	@ (8003c10 <HAL_TIM_IC_Start_IT+0x244>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d009      	beq.n	8003bc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a18      	ldr	r2, [pc, #96]	@ (8003c14 <HAL_TIM_IC_Start_IT+0x248>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a16      	ldr	r2, [pc, #88]	@ (8003c18 <HAL_TIM_IC_Start_IT+0x24c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d111      	bne.n	8003be6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b06      	cmp	r3, #6
 8003bd2:	d010      	beq.n	8003bf6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be4:	e007      	b.n	8003bf6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40010000 	.word	0x40010000
 8003c04:	40000400 	.word	0x40000400
 8003c08:	40000800 	.word	0x40000800
 8003c0c:	40000c00 	.word	0x40000c00
 8003c10:	40010400 	.word	0x40010400
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40001800 	.word	0x40001800

08003c1c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	d841      	bhi.n	8003cb4 <HAL_TIM_IC_Stop_IT+0x98>
 8003c30:	a201      	add	r2, pc, #4	@ (adr r2, 8003c38 <HAL_TIM_IC_Stop_IT+0x1c>)
 8003c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c36:	bf00      	nop
 8003c38:	08003c6d 	.word	0x08003c6d
 8003c3c:	08003cb5 	.word	0x08003cb5
 8003c40:	08003cb5 	.word	0x08003cb5
 8003c44:	08003cb5 	.word	0x08003cb5
 8003c48:	08003c7f 	.word	0x08003c7f
 8003c4c:	08003cb5 	.word	0x08003cb5
 8003c50:	08003cb5 	.word	0x08003cb5
 8003c54:	08003cb5 	.word	0x08003cb5
 8003c58:	08003c91 	.word	0x08003c91
 8003c5c:	08003cb5 	.word	0x08003cb5
 8003c60:	08003cb5 	.word	0x08003cb5
 8003c64:	08003cb5 	.word	0x08003cb5
 8003c68:	08003ca3 	.word	0x08003ca3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0202 	bic.w	r2, r2, #2
 8003c7a:	60da      	str	r2, [r3, #12]
      break;
 8003c7c:	e01d      	b.n	8003cba <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0204 	bic.w	r2, r2, #4
 8003c8c:	60da      	str	r2, [r3, #12]
      break;
 8003c8e:	e014      	b.n	8003cba <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0208 	bic.w	r2, r2, #8
 8003c9e:	60da      	str	r2, [r3, #12]
      break;
 8003ca0:	e00b      	b.n	8003cba <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0210 	bic.w	r2, r2, #16
 8003cb0:	60da      	str	r2, [r3, #12]
      break;
 8003cb2:	e002      	b.n	8003cba <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d156      	bne.n	8003d6e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	6839      	ldr	r1, [r7, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fff7 	bl	8004cbc <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6a1a      	ldr	r2, [r3, #32]
 8003cd4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <HAL_TIM_IC_Stop_IT+0xe2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d107      	bne.n	8003cfe <HAL_TIM_IC_Stop_IT+0xe2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_IC_Stop_IT+0xf2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d0c:	e013      	b.n	8003d36 <HAL_TIM_IC_Stop_IT+0x11a>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_IC_Stop_IT+0x102>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d1c:	e00b      	b.n	8003d36 <HAL_TIM_IC_Stop_IT+0x11a>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_IC_Stop_IT+0x112>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d2c:	e003      	b.n	8003d36 <HAL_TIM_IC_Stop_IT+0x11a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_IC_Stop_IT+0x12a>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d44:	e013      	b.n	8003d6e <HAL_TIM_IC_Stop_IT+0x152>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_IC_Stop_IT+0x13a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d54:	e00b      	b.n	8003d6e <HAL_TIM_IC_Stop_IT+0x152>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_IC_Stop_IT+0x14a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d64:	e003      	b.n	8003d6e <HAL_TIM_IC_Stop_IT+0x152>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d020      	beq.n	8003ddc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01b      	beq.n	8003ddc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0202 	mvn.w	r2, #2
 8003dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd fbe8 	bl	8001598 <HAL_TIM_IC_CaptureCallback>
 8003dc8:	e005      	b.n	8003dd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fb38 	bl	8004440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fb3f 	bl	8004454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d020      	beq.n	8003e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01b      	beq.n	8003e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0204 	mvn.w	r2, #4
 8003df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd fbc2 	bl	8001598 <HAL_TIM_IC_CaptureCallback>
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fb12 	bl	8004440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fb19 	bl	8004454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d020      	beq.n	8003e74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01b      	beq.n	8003e74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0208 	mvn.w	r2, #8
 8003e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fd fb9c 	bl	8001598 <HAL_TIM_IC_CaptureCallback>
 8003e60:	e005      	b.n	8003e6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 faec 	bl	8004440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 faf3 	bl	8004454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d020      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01b      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0210 	mvn.w	r2, #16
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2208      	movs	r2, #8
 8003e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fd fb76 	bl	8001598 <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fac6 	bl	8004440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 facd 	bl	8004454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0201 	mvn.w	r2, #1
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 faa4 	bl	800442c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 ff86 	bl	8004e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00c      	beq.n	8003f2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fa9e 	bl	8004468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00c      	beq.n	8003f50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d007      	beq.n	8003f50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0220 	mvn.w	r2, #32
 8003f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 ff58 	bl	8004e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e088      	b.n	8004088 <HAL_TIM_IC_ConfigChannel+0x130>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d11b      	bne.n	8003fbc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003f94:	f000 fcce 	bl	8004934 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 020c 	bic.w	r2, r2, #12
 8003fa6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6999      	ldr	r1, [r3, #24]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	619a      	str	r2, [r3, #24]
 8003fba:	e060      	b.n	800407e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d11c      	bne.n	8003ffc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003fd2:	f000 fd52 	bl	8004a7a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003fe4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6999      	ldr	r1, [r3, #24]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	021a      	lsls	r2, r3, #8
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	619a      	str	r2, [r3, #24]
 8003ffa:	e040      	b.n	800407e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d11b      	bne.n	800403a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004012:	f000 fd9f 	bl	8004b54 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 020c 	bic.w	r2, r2, #12
 8004024:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69d9      	ldr	r1, [r3, #28]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	61da      	str	r2, [r3, #28]
 8004038:	e021      	b.n	800407e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d11c      	bne.n	800407a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004050:	f000 fdbc 	bl	8004bcc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004062:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69d9      	ldr	r1, [r3, #28]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	021a      	lsls	r2, r3, #8
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	61da      	str	r2, [r3, #28]
 8004078:	e001      	b.n	800407e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004086:	7dfb      	ldrb	r3, [r7, #23]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e0ae      	b.n	800420c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	f200 809f 	bhi.w	80041fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040be:	a201      	add	r2, pc, #4	@ (adr r2, 80040c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	080041fd 	.word	0x080041fd
 80040cc:	080041fd 	.word	0x080041fd
 80040d0:	080041fd 	.word	0x080041fd
 80040d4:	08004139 	.word	0x08004139
 80040d8:	080041fd 	.word	0x080041fd
 80040dc:	080041fd 	.word	0x080041fd
 80040e0:	080041fd 	.word	0x080041fd
 80040e4:	0800417b 	.word	0x0800417b
 80040e8:	080041fd 	.word	0x080041fd
 80040ec:	080041fd 	.word	0x080041fd
 80040f0:	080041fd 	.word	0x080041fd
 80040f4:	080041bb 	.word	0x080041bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fa68 	bl	80045d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0208 	orr.w	r2, r2, #8
 8004112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0204 	bic.w	r2, r2, #4
 8004122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6999      	ldr	r1, [r3, #24]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	619a      	str	r2, [r3, #24]
      break;
 8004136:	e064      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fab8 	bl	80046b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6999      	ldr	r1, [r3, #24]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	021a      	lsls	r2, r3, #8
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	619a      	str	r2, [r3, #24]
      break;
 8004178:	e043      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fb0d 	bl	80047a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0208 	orr.w	r2, r2, #8
 8004194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0204 	bic.w	r2, r2, #4
 80041a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69d9      	ldr	r1, [r3, #28]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	61da      	str	r2, [r3, #28]
      break;
 80041b8:	e023      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fb61 	bl	8004888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69d9      	ldr	r1, [r3, #28]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	021a      	lsls	r2, r3, #8
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	61da      	str	r2, [r3, #28]
      break;
 80041fa:	e002      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004200:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800420a:	7dfb      	ldrb	r3, [r7, #23]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_TIM_ConfigClockSource+0x1c>
 800422c:	2302      	movs	r3, #2
 800422e:	e0b4      	b.n	800439a <HAL_TIM_ConfigClockSource+0x186>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800424e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004268:	d03e      	beq.n	80042e8 <HAL_TIM_ConfigClockSource+0xd4>
 800426a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800426e:	f200 8087 	bhi.w	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004276:	f000 8086 	beq.w	8004386 <HAL_TIM_ConfigClockSource+0x172>
 800427a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427e:	d87f      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004280:	2b70      	cmp	r3, #112	@ 0x70
 8004282:	d01a      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0xa6>
 8004284:	2b70      	cmp	r3, #112	@ 0x70
 8004286:	d87b      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004288:	2b60      	cmp	r3, #96	@ 0x60
 800428a:	d050      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x11a>
 800428c:	2b60      	cmp	r3, #96	@ 0x60
 800428e:	d877      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004290:	2b50      	cmp	r3, #80	@ 0x50
 8004292:	d03c      	beq.n	800430e <HAL_TIM_ConfigClockSource+0xfa>
 8004294:	2b50      	cmp	r3, #80	@ 0x50
 8004296:	d873      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004298:	2b40      	cmp	r3, #64	@ 0x40
 800429a:	d058      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x13a>
 800429c:	2b40      	cmp	r3, #64	@ 0x40
 800429e:	d86f      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 80042a0:	2b30      	cmp	r3, #48	@ 0x30
 80042a2:	d064      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042a4:	2b30      	cmp	r3, #48	@ 0x30
 80042a6:	d86b      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d060      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d867      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d05c      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d05a      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	e062      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042ca:	f000 fcd7 	bl	8004c7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	609a      	str	r2, [r3, #8]
      break;
 80042e6:	e04f      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042f8:	f000 fcc0 	bl	8004c7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800430a:	609a      	str	r2, [r3, #8]
      break;
 800430c:	e03c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	461a      	mov	r2, r3
 800431c:	f000 fb7e 	bl	8004a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2150      	movs	r1, #80	@ 0x50
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fc8d 	bl	8004c46 <TIM_ITRx_SetConfig>
      break;
 800432c:	e02c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800433a:	461a      	mov	r2, r3
 800433c:	f000 fbda 	bl	8004af4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2160      	movs	r1, #96	@ 0x60
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fc7d 	bl	8004c46 <TIM_ITRx_SetConfig>
      break;
 800434c:	e01c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	461a      	mov	r2, r3
 800435c:	f000 fb5e 	bl	8004a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2140      	movs	r1, #64	@ 0x40
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fc6d 	bl	8004c46 <TIM_ITRx_SetConfig>
      break;
 800436c:	e00c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f000 fc64 	bl	8004c46 <TIM_ITRx_SetConfig>
      break;
 800437e:	e003      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
      break;
 8004384:	e000      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004398:	7bfb      	ldrb	r3, [r7, #15]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d831      	bhi.n	800441c <HAL_TIM_ReadCapturedValue+0x78>
 80043b8:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	0800441d 	.word	0x0800441d
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	0800441d 	.word	0x0800441d
 80043d0:	080043ff 	.word	0x080043ff
 80043d4:	0800441d 	.word	0x0800441d
 80043d8:	0800441d 	.word	0x0800441d
 80043dc:	0800441d 	.word	0x0800441d
 80043e0:	08004409 	.word	0x08004409
 80043e4:	0800441d 	.word	0x0800441d
 80043e8:	0800441d 	.word	0x0800441d
 80043ec:	0800441d 	.word	0x0800441d
 80043f0:	08004413 	.word	0x08004413
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fa:	60fb      	str	r3, [r7, #12]

      break;
 80043fc:	e00f      	b.n	800441e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	60fb      	str	r3, [r7, #12]

      break;
 8004406:	e00a      	b.n	800441e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440e:	60fb      	str	r3, [r7, #12]

      break;
 8004410:	e005      	b.n	800441e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	60fb      	str	r3, [r7, #12]

      break;
 800441a:	e000      	b.n	800441e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800441c:	bf00      	nop
  }

  return tmpreg;
 800441e:	68fb      	ldr	r3, [r7, #12]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a46      	ldr	r2, [pc, #280]	@ (80045a8 <TIM_Base_SetConfig+0x12c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449a:	d00f      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a43      	ldr	r2, [pc, #268]	@ (80045ac <TIM_Base_SetConfig+0x130>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a42      	ldr	r2, [pc, #264]	@ (80045b0 <TIM_Base_SetConfig+0x134>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a41      	ldr	r2, [pc, #260]	@ (80045b4 <TIM_Base_SetConfig+0x138>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a40      	ldr	r2, [pc, #256]	@ (80045b8 <TIM_Base_SetConfig+0x13c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a35      	ldr	r2, [pc, #212]	@ (80045a8 <TIM_Base_SetConfig+0x12c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02b      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044dc:	d027      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a32      	ldr	r2, [pc, #200]	@ (80045ac <TIM_Base_SetConfig+0x130>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d023      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a31      	ldr	r2, [pc, #196]	@ (80045b0 <TIM_Base_SetConfig+0x134>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01f      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a30      	ldr	r2, [pc, #192]	@ (80045b4 <TIM_Base_SetConfig+0x138>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01b      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a2f      	ldr	r2, [pc, #188]	@ (80045b8 <TIM_Base_SetConfig+0x13c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d017      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a2e      	ldr	r2, [pc, #184]	@ (80045bc <TIM_Base_SetConfig+0x140>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a2d      	ldr	r2, [pc, #180]	@ (80045c0 <TIM_Base_SetConfig+0x144>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00f      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a2c      	ldr	r2, [pc, #176]	@ (80045c4 <TIM_Base_SetConfig+0x148>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00b      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a2b      	ldr	r2, [pc, #172]	@ (80045c8 <TIM_Base_SetConfig+0x14c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d007      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2a      	ldr	r2, [pc, #168]	@ (80045cc <TIM_Base_SetConfig+0x150>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a29      	ldr	r2, [pc, #164]	@ (80045d0 <TIM_Base_SetConfig+0x154>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d108      	bne.n	8004540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a10      	ldr	r2, [pc, #64]	@ (80045a8 <TIM_Base_SetConfig+0x12c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_Base_SetConfig+0xf8>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a12      	ldr	r2, [pc, #72]	@ (80045b8 <TIM_Base_SetConfig+0x13c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d103      	bne.n	800457c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b01      	cmp	r3, #1
 800458c:	d105      	bne.n	800459a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f023 0201 	bic.w	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	611a      	str	r2, [r3, #16]
  }
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40000400 	.word	0x40000400
 80045b0:	40000800 	.word	0x40000800
 80045b4:	40000c00 	.word	0x40000c00
 80045b8:	40010400 	.word	0x40010400
 80045bc:	40014000 	.word	0x40014000
 80045c0:	40014400 	.word	0x40014400
 80045c4:	40014800 	.word	0x40014800
 80045c8:	40001800 	.word	0x40001800
 80045cc:	40001c00 	.word	0x40001c00
 80045d0:	40002000 	.word	0x40002000

080045d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f023 0201 	bic.w	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0303 	bic.w	r3, r3, #3
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 0302 	bic.w	r3, r3, #2
 800461c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a20      	ldr	r2, [pc, #128]	@ (80046ac <TIM_OC1_SetConfig+0xd8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_OC1_SetConfig+0x64>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a1f      	ldr	r2, [pc, #124]	@ (80046b0 <TIM_OC1_SetConfig+0xdc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d10c      	bne.n	8004652 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0308 	bic.w	r3, r3, #8
 800463e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a15      	ldr	r2, [pc, #84]	@ (80046ac <TIM_OC1_SetConfig+0xd8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d003      	beq.n	8004662 <TIM_OC1_SetConfig+0x8e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a14      	ldr	r2, [pc, #80]	@ (80046b0 <TIM_OC1_SetConfig+0xdc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d111      	bne.n	8004686 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	621a      	str	r2, [r3, #32]
}
 80046a0:	bf00      	nop
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	40010000 	.word	0x40010000
 80046b0:	40010400 	.word	0x40010400

080046b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f023 0210 	bic.w	r2, r3, #16
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	021b      	lsls	r3, r3, #8
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f023 0320 	bic.w	r3, r3, #32
 80046fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a22      	ldr	r2, [pc, #136]	@ (8004798 <TIM_OC2_SetConfig+0xe4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d003      	beq.n	800471c <TIM_OC2_SetConfig+0x68>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a21      	ldr	r2, [pc, #132]	@ (800479c <TIM_OC2_SetConfig+0xe8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d10d      	bne.n	8004738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004736:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a17      	ldr	r2, [pc, #92]	@ (8004798 <TIM_OC2_SetConfig+0xe4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_OC2_SetConfig+0x94>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a16      	ldr	r2, [pc, #88]	@ (800479c <TIM_OC2_SetConfig+0xe8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d113      	bne.n	8004770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800474e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40010400 	.word	0x40010400

080047a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0303 	bic.w	r3, r3, #3
 80047d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a21      	ldr	r2, [pc, #132]	@ (8004880 <TIM_OC3_SetConfig+0xe0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_OC3_SetConfig+0x66>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a20      	ldr	r2, [pc, #128]	@ (8004884 <TIM_OC3_SetConfig+0xe4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10d      	bne.n	8004822 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800480c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a16      	ldr	r2, [pc, #88]	@ (8004880 <TIM_OC3_SetConfig+0xe0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <TIM_OC3_SetConfig+0x92>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a15      	ldr	r2, [pc, #84]	@ (8004884 <TIM_OC3_SetConfig+0xe4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d113      	bne.n	800485a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	40010000 	.word	0x40010000
 8004884:	40010400 	.word	0x40010400

08004888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	031b      	lsls	r3, r3, #12
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a12      	ldr	r2, [pc, #72]	@ (800492c <TIM_OC4_SetConfig+0xa4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC4_SetConfig+0x68>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a11      	ldr	r2, [pc, #68]	@ (8004930 <TIM_OC4_SetConfig+0xa8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d109      	bne.n	8004904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	019b      	lsls	r3, r3, #6
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	40010400 	.word	0x40010400

08004934 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f023 0201 	bic.w	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a28      	ldr	r2, [pc, #160]	@ (8004a00 <TIM_TI1_SetConfig+0xcc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01b      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004968:	d017      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4a25      	ldr	r2, [pc, #148]	@ (8004a04 <TIM_TI1_SetConfig+0xd0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4a24      	ldr	r2, [pc, #144]	@ (8004a08 <TIM_TI1_SetConfig+0xd4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00f      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a23      	ldr	r2, [pc, #140]	@ (8004a0c <TIM_TI1_SetConfig+0xd8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a22      	ldr	r2, [pc, #136]	@ (8004a10 <TIM_TI1_SetConfig+0xdc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a21      	ldr	r2, [pc, #132]	@ (8004a14 <TIM_TI1_SetConfig+0xe0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_TI1_SetConfig+0x66>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a20      	ldr	r2, [pc, #128]	@ (8004a18 <TIM_TI1_SetConfig+0xe4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <TIM_TI1_SetConfig+0x6a>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <TIM_TI1_SetConfig+0x6c>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	e003      	b.n	80049be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f023 030a 	bic.w	r3, r3, #10
 80049d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f003 030a 	and.w	r3, r3, #10
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	621a      	str	r2, [r3, #32]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800
 8004a0c:	40000c00 	.word	0x40000c00
 8004a10:	40010400 	.word	0x40010400
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40001800 	.word	0x40001800

08004a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f023 0201 	bic.w	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f023 030a 	bic.w	r3, r3, #10
 8004a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b087      	sub	sp, #28
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f023 0210 	bic.w	r2, r3, #16
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	021b      	lsls	r3, r3, #8
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ab8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	031b      	lsls	r3, r3, #12
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004acc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	621a      	str	r2, [r3, #32]
}
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f023 0210 	bic.w	r2, r3, #16
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	031b      	lsls	r3, r3, #12
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	621a      	str	r2, [r3, #32]
}
 8004b48:	bf00      	nop
 8004b4a:	371c      	adds	r7, #28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f023 0303 	bic.w	r3, r3, #3
 8004b80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b90:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	621a      	str	r2, [r3, #32]
}
 8004bc0:	bf00      	nop
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c0a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	031b      	lsls	r3, r3, #12
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004c1e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	031b      	lsls	r3, r3, #12
 8004c24:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f043 0307 	orr.w	r3, r3, #7
 8004c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	609a      	str	r2, [r3, #8]
}
 8004c70:	bf00      	nop
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	021a      	lsls	r2, r3, #8
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	609a      	str	r2, [r3, #8]
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	2201      	movs	r2, #1
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1a      	ldr	r2, [r3, #32]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	401a      	ands	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a1a      	ldr	r2, [r3, #32]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	621a      	str	r2, [r3, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e05a      	b.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a21      	ldr	r2, [pc, #132]	@ (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d022      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d6c:	d01d      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1d      	ldr	r2, [pc, #116]	@ (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d018      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1a      	ldr	r2, [pc, #104]	@ (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00e      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a18      	ldr	r2, [pc, #96]	@ (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d009      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a17      	ldr	r2, [pc, #92]	@ (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a15      	ldr	r2, [pc, #84]	@ (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d10c      	bne.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40010000 	.word	0x40010000
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40000800 	.word	0x40000800
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	40010400 	.word	0x40010400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40001800 	.word	0x40001800

08004e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e042      	b.n	8004ec0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fc fecc 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2224      	movs	r2, #36	@ 0x24
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fb79 	bl	8005564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	@ 0x28
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d175      	bne.n	8004fd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_UART_Transmit+0x2c>
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e06e      	b.n	8004fd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2221      	movs	r2, #33	@ 0x21
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f06:	f7fd f8a1 	bl	800204c <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f20:	d108      	bne.n	8004f34 <HAL_UART_Transmit+0x6c>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	e003      	b.n	8004f3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f3c:	e02e      	b.n	8004f9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2200      	movs	r2, #0
 8004f46:	2180      	movs	r1, #128	@ 0x80
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f98b 	bl	8005264 <UART_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e03a      	b.n	8004fd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10b      	bne.n	8004f7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	3302      	adds	r3, #2
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	e007      	b.n	8004f8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	781a      	ldrb	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1cb      	bne.n	8004f3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2200      	movs	r2, #0
 8004fae:	2140      	movs	r1, #64	@ 0x40
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f957 	bl	8005264 <UART_WaitOnFlagUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e006      	b.n	8004fd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d112      	bne.n	800501e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_UART_Receive_DMA+0x26>
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e00b      	b.n	8005020 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	461a      	mov	r2, r3
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f97f 	bl	8005318 <UART_Start_Receive_DMA>
 800501a:	4603      	mov	r3, r0
 800501c:	e000      	b.n	8005020 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b09c      	sub	sp, #112	@ 0x70
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005074:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d172      	bne.n	800516a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005086:	2200      	movs	r2, #0
 8005088:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800508a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800509a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800509c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80050aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e5      	bne.n	800508a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3314      	adds	r3, #20
 80050c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80050d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3314      	adds	r3, #20
 80050dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80050de:	647a      	str	r2, [r7, #68]	@ 0x44
 80050e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e5      	bne.n	80050be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3314      	adds	r3, #20
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	623b      	str	r3, [r7, #32]
   return(result);
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005108:	663b      	str	r3, [r7, #96]	@ 0x60
 800510a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3314      	adds	r3, #20
 8005110:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005112:	633a      	str	r2, [r7, #48]	@ 0x30
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e5      	bne.n	80050f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005128:	2220      	movs	r2, #32
 800512a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800512e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005132:	2b01      	cmp	r3, #1
 8005134:	d119      	bne.n	800516a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	330c      	adds	r3, #12
 800513c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	60fb      	str	r3, [r7, #12]
   return(result);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f023 0310 	bic.w	r3, r3, #16
 800514c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800514e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	330c      	adds	r3, #12
 8005154:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005156:	61fa      	str	r2, [r7, #28]
 8005158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	69b9      	ldr	r1, [r7, #24]
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	617b      	str	r3, [r7, #20]
   return(result);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e5      	bne.n	8005136 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800516a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800516c:	2200      	movs	r2, #0
 800516e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005174:	2b01      	cmp	r3, #1
 8005176:	d106      	bne.n	8005186 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800517a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800517c:	4619      	mov	r1, r3
 800517e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005180:	f7ff ff66 	bl	8005050 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005184:	e002      	b.n	800518c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005186:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005188:	f7fc fa68 	bl	800165c <HAL_UART_RxCpltCallback>
}
 800518c:	bf00      	nop
 800518e:	3770      	adds	r7, #112	@ 0x70
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d108      	bne.n	80051c2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	4619      	mov	r1, r3
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7ff ff48 	bl	8005050 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051c0:	e002      	b.n	80051c8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f7ff ff30 	bl	8005028 <HAL_UART_RxHalfCpltCallback>
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ec:	2b80      	cmp	r3, #128	@ 0x80
 80051ee:	bf0c      	ite	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2300      	movne	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b21      	cmp	r3, #33	@ 0x21
 8005202:	d108      	bne.n	8005216 <UART_DMAError+0x46>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2200      	movs	r2, #0
 800520e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005210:	68b8      	ldr	r0, [r7, #8]
 8005212:	f000 f91b 	bl	800544c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005220:	2b40      	cmp	r3, #64	@ 0x40
 8005222:	bf0c      	ite	eq
 8005224:	2301      	moveq	r3, #1
 8005226:	2300      	movne	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b22      	cmp	r3, #34	@ 0x22
 8005236:	d108      	bne.n	800524a <UART_DMAError+0x7a>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2200      	movs	r2, #0
 8005242:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005244:	68b8      	ldr	r0, [r7, #8]
 8005246:	f000 f929 	bl	800549c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524e:	f043 0210 	orr.w	r2, r3, #16
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005256:	68b8      	ldr	r0, [r7, #8]
 8005258:	f7ff fef0 	bl	800503c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005274:	e03b      	b.n	80052ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527c:	d037      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527e:	f7fc fee5 	bl	800204c <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	6a3a      	ldr	r2, [r7, #32]
 800528a:	429a      	cmp	r2, r3
 800528c:	d302      	bcc.n	8005294 <UART_WaitOnFlagUntilTimeout+0x30>
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e03a      	b.n	800530e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d023      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b80      	cmp	r3, #128	@ 0x80
 80052aa:	d020      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b40      	cmp	r3, #64	@ 0x40
 80052b0:	d01d      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d116      	bne.n	80052ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052c0:	2300      	movs	r3, #0
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f8e0 	bl	800549c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2208      	movs	r2, #8
 80052e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e00f      	b.n	800530e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4013      	ands	r3, r2
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	bf0c      	ite	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	2300      	movne	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	461a      	mov	r2, r3
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	429a      	cmp	r2, r3
 800530a:	d0b4      	beq.n	8005276 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b098      	sub	sp, #96	@ 0x60
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	4613      	mov	r3, r2
 8005324:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	88fa      	ldrh	r2, [r7, #6]
 8005330:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2222      	movs	r2, #34	@ 0x22
 800533c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005344:	4a3e      	ldr	r2, [pc, #248]	@ (8005440 <UART_Start_Receive_DMA+0x128>)
 8005346:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534c:	4a3d      	ldr	r2, [pc, #244]	@ (8005444 <UART_Start_Receive_DMA+0x12c>)
 800534e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005354:	4a3c      	ldr	r2, [pc, #240]	@ (8005448 <UART_Start_Receive_DMA+0x130>)
 8005356:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535c:	2200      	movs	r2, #0
 800535e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005360:	f107 0308 	add.w	r3, r7, #8
 8005364:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	f7fd f858 	bl	800242c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800537c:	2300      	movs	r3, #0
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d019      	beq.n	80053ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	330c      	adds	r3, #12
 80053b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80053bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80053c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80053c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e5      	bne.n	800539a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3314      	adds	r3, #20
 80053d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3314      	adds	r3, #20
 80053ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 80053f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e5      	bne.n	80053ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3314      	adds	r3, #20
 8005408:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	617b      	str	r3, [r7, #20]
   return(result);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005418:	653b      	str	r3, [r7, #80]	@ 0x50
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3314      	adds	r3, #20
 8005420:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005422:	627a      	str	r2, [r7, #36]	@ 0x24
 8005424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6a39      	ldr	r1, [r7, #32]
 8005428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e5      	bne.n	8005402 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3760      	adds	r7, #96	@ 0x60
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	08005069 	.word	0x08005069
 8005444:	08005195 	.word	0x08005195
 8005448:	080051d1 	.word	0x080051d1

0800544c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	@ 0x24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	60bb      	str	r3, [r7, #8]
   return(result);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	61ba      	str	r2, [r7, #24]
 8005476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6979      	ldr	r1, [r7, #20]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	613b      	str	r3, [r7, #16]
   return(result);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e5      	bne.n	8005454 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005490:	bf00      	nop
 8005492:	3724      	adds	r7, #36	@ 0x24
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800549c:	b480      	push	{r7}
 800549e:	b095      	sub	sp, #84	@ 0x54
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ae:	e853 3f00 	ldrex	r3, [r3]
 80054b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80054c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054cc:	e841 2300 	strex	r3, r2, [r1]
 80054d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e5      	bne.n	80054a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3314      	adds	r3, #20
 80054de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3314      	adds	r3, #20
 80054f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e5      	bne.n	80054d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005510:	2b01      	cmp	r3, #1
 8005512:	d119      	bne.n	8005548 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	60bb      	str	r3, [r7, #8]
   return(result);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f023 0310 	bic.w	r3, r3, #16
 800552a:	647b      	str	r3, [r7, #68]	@ 0x44
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005534:	61ba      	str	r2, [r7, #24]
 8005536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6979      	ldr	r1, [r7, #20]
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	613b      	str	r3, [r7, #16]
   return(result);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e5      	bne.n	8005514 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005556:	bf00      	nop
 8005558:	3754      	adds	r7, #84	@ 0x54
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005568:	b0c0      	sub	sp, #256	@ 0x100
 800556a:	af00      	add	r7, sp, #0
 800556c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005580:	68d9      	ldr	r1, [r3, #12]
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	ea40 0301 	orr.w	r3, r0, r1
 800558c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	431a      	orrs	r2, r3
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055bc:	f021 010c 	bic.w	r1, r1, #12
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055ca:	430b      	orrs	r3, r1
 80055cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055de:	6999      	ldr	r1, [r3, #24]
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	ea40 0301 	orr.w	r3, r0, r1
 80055ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005830 <UART_SetConfig+0x2cc>)
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d005      	beq.n	8005604 <UART_SetConfig+0xa0>
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005834 <UART_SetConfig+0x2d0>)
 8005600:	429a      	cmp	r2, r3
 8005602:	d104      	bne.n	800560e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005604:	f7fe f80e 	bl	8003624 <HAL_RCC_GetPCLK2Freq>
 8005608:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800560c:	e003      	b.n	8005616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800560e:	f7fd fff5 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 8005612:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005620:	f040 810c 	bne.w	800583c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005628:	2200      	movs	r2, #0
 800562a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800562e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005636:	4622      	mov	r2, r4
 8005638:	462b      	mov	r3, r5
 800563a:	1891      	adds	r1, r2, r2
 800563c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800563e:	415b      	adcs	r3, r3
 8005640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005646:	4621      	mov	r1, r4
 8005648:	eb12 0801 	adds.w	r8, r2, r1
 800564c:	4629      	mov	r1, r5
 800564e:	eb43 0901 	adc.w	r9, r3, r1
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800565e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005666:	4690      	mov	r8, r2
 8005668:	4699      	mov	r9, r3
 800566a:	4623      	mov	r3, r4
 800566c:	eb18 0303 	adds.w	r3, r8, r3
 8005670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005674:	462b      	mov	r3, r5
 8005676:	eb49 0303 	adc.w	r3, r9, r3
 800567a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800568a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800568e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005692:	460b      	mov	r3, r1
 8005694:	18db      	adds	r3, r3, r3
 8005696:	653b      	str	r3, [r7, #80]	@ 0x50
 8005698:	4613      	mov	r3, r2
 800569a:	eb42 0303 	adc.w	r3, r2, r3
 800569e:	657b      	str	r3, [r7, #84]	@ 0x54
 80056a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056a8:	f7fb fa9e 	bl	8000be8 <__aeabi_uldivmod>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4b61      	ldr	r3, [pc, #388]	@ (8005838 <UART_SetConfig+0x2d4>)
 80056b2:	fba3 2302 	umull	r2, r3, r3, r2
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	011c      	lsls	r4, r3, #4
 80056ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056cc:	4642      	mov	r2, r8
 80056ce:	464b      	mov	r3, r9
 80056d0:	1891      	adds	r1, r2, r2
 80056d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056d4:	415b      	adcs	r3, r3
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056dc:	4641      	mov	r1, r8
 80056de:	eb12 0a01 	adds.w	sl, r2, r1
 80056e2:	4649      	mov	r1, r9
 80056e4:	eb43 0b01 	adc.w	fp, r3, r1
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056fc:	4692      	mov	sl, r2
 80056fe:	469b      	mov	fp, r3
 8005700:	4643      	mov	r3, r8
 8005702:	eb1a 0303 	adds.w	r3, sl, r3
 8005706:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800570a:	464b      	mov	r3, r9
 800570c:	eb4b 0303 	adc.w	r3, fp, r3
 8005710:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005720:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005728:	460b      	mov	r3, r1
 800572a:	18db      	adds	r3, r3, r3
 800572c:	643b      	str	r3, [r7, #64]	@ 0x40
 800572e:	4613      	mov	r3, r2
 8005730:	eb42 0303 	adc.w	r3, r2, r3
 8005734:	647b      	str	r3, [r7, #68]	@ 0x44
 8005736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800573a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800573e:	f7fb fa53 	bl	8000be8 <__aeabi_uldivmod>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4611      	mov	r1, r2
 8005748:	4b3b      	ldr	r3, [pc, #236]	@ (8005838 <UART_SetConfig+0x2d4>)
 800574a:	fba3 2301 	umull	r2, r3, r3, r1
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2264      	movs	r2, #100	@ 0x64
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	1acb      	subs	r3, r1, r3
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800575e:	4b36      	ldr	r3, [pc, #216]	@ (8005838 <UART_SetConfig+0x2d4>)
 8005760:	fba3 2302 	umull	r2, r3, r3, r2
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800576c:	441c      	add	r4, r3
 800576e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005778:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800577c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005780:	4642      	mov	r2, r8
 8005782:	464b      	mov	r3, r9
 8005784:	1891      	adds	r1, r2, r2
 8005786:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005788:	415b      	adcs	r3, r3
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800578c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005790:	4641      	mov	r1, r8
 8005792:	1851      	adds	r1, r2, r1
 8005794:	6339      	str	r1, [r7, #48]	@ 0x30
 8005796:	4649      	mov	r1, r9
 8005798:	414b      	adcs	r3, r1
 800579a:	637b      	str	r3, [r7, #52]	@ 0x34
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057a8:	4659      	mov	r1, fp
 80057aa:	00cb      	lsls	r3, r1, #3
 80057ac:	4651      	mov	r1, sl
 80057ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b2:	4651      	mov	r1, sl
 80057b4:	00ca      	lsls	r2, r1, #3
 80057b6:	4610      	mov	r0, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	4603      	mov	r3, r0
 80057bc:	4642      	mov	r2, r8
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057c4:	464b      	mov	r3, r9
 80057c6:	460a      	mov	r2, r1
 80057c8:	eb42 0303 	adc.w	r3, r2, r3
 80057cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057e4:	460b      	mov	r3, r1
 80057e6:	18db      	adds	r3, r3, r3
 80057e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057ea:	4613      	mov	r3, r2
 80057ec:	eb42 0303 	adc.w	r3, r2, r3
 80057f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057fa:	f7fb f9f5 	bl	8000be8 <__aeabi_uldivmod>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <UART_SetConfig+0x2d4>)
 8005804:	fba3 1302 	umull	r1, r3, r3, r2
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	2164      	movs	r1, #100	@ 0x64
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	3332      	adds	r3, #50	@ 0x32
 8005816:	4a08      	ldr	r2, [pc, #32]	@ (8005838 <UART_SetConfig+0x2d4>)
 8005818:	fba2 2303 	umull	r2, r3, r2, r3
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	f003 0207 	and.w	r2, r3, #7
 8005822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4422      	add	r2, r4
 800582a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800582c:	e106      	b.n	8005a3c <UART_SetConfig+0x4d8>
 800582e:	bf00      	nop
 8005830:	40011000 	.word	0x40011000
 8005834:	40011400 	.word	0x40011400
 8005838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800583c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005840:	2200      	movs	r2, #0
 8005842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005846:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800584a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800584e:	4642      	mov	r2, r8
 8005850:	464b      	mov	r3, r9
 8005852:	1891      	adds	r1, r2, r2
 8005854:	6239      	str	r1, [r7, #32]
 8005856:	415b      	adcs	r3, r3
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
 800585a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800585e:	4641      	mov	r1, r8
 8005860:	1854      	adds	r4, r2, r1
 8005862:	4649      	mov	r1, r9
 8005864:	eb43 0501 	adc.w	r5, r3, r1
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	00eb      	lsls	r3, r5, #3
 8005872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005876:	00e2      	lsls	r2, r4, #3
 8005878:	4614      	mov	r4, r2
 800587a:	461d      	mov	r5, r3
 800587c:	4643      	mov	r3, r8
 800587e:	18e3      	adds	r3, r4, r3
 8005880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005884:	464b      	mov	r3, r9
 8005886:	eb45 0303 	adc.w	r3, r5, r3
 800588a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800588e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800589a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058aa:	4629      	mov	r1, r5
 80058ac:	008b      	lsls	r3, r1, #2
 80058ae:	4621      	mov	r1, r4
 80058b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b4:	4621      	mov	r1, r4
 80058b6:	008a      	lsls	r2, r1, #2
 80058b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058bc:	f7fb f994 	bl	8000be8 <__aeabi_uldivmod>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4b60      	ldr	r3, [pc, #384]	@ (8005a48 <UART_SetConfig+0x4e4>)
 80058c6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	011c      	lsls	r4, r3, #4
 80058ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058e0:	4642      	mov	r2, r8
 80058e2:	464b      	mov	r3, r9
 80058e4:	1891      	adds	r1, r2, r2
 80058e6:	61b9      	str	r1, [r7, #24]
 80058e8:	415b      	adcs	r3, r3
 80058ea:	61fb      	str	r3, [r7, #28]
 80058ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058f0:	4641      	mov	r1, r8
 80058f2:	1851      	adds	r1, r2, r1
 80058f4:	6139      	str	r1, [r7, #16]
 80058f6:	4649      	mov	r1, r9
 80058f8:	414b      	adcs	r3, r1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005908:	4659      	mov	r1, fp
 800590a:	00cb      	lsls	r3, r1, #3
 800590c:	4651      	mov	r1, sl
 800590e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005912:	4651      	mov	r1, sl
 8005914:	00ca      	lsls	r2, r1, #3
 8005916:	4610      	mov	r0, r2
 8005918:	4619      	mov	r1, r3
 800591a:	4603      	mov	r3, r0
 800591c:	4642      	mov	r2, r8
 800591e:	189b      	adds	r3, r3, r2
 8005920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005924:	464b      	mov	r3, r9
 8005926:	460a      	mov	r2, r1
 8005928:	eb42 0303 	adc.w	r3, r2, r3
 800592c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	67bb      	str	r3, [r7, #120]	@ 0x78
 800593a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005948:	4649      	mov	r1, r9
 800594a:	008b      	lsls	r3, r1, #2
 800594c:	4641      	mov	r1, r8
 800594e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005952:	4641      	mov	r1, r8
 8005954:	008a      	lsls	r2, r1, #2
 8005956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800595a:	f7fb f945 	bl	8000be8 <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4611      	mov	r1, r2
 8005964:	4b38      	ldr	r3, [pc, #224]	@ (8005a48 <UART_SetConfig+0x4e4>)
 8005966:	fba3 2301 	umull	r2, r3, r3, r1
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2264      	movs	r2, #100	@ 0x64
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	1acb      	subs	r3, r1, r3
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	3332      	adds	r3, #50	@ 0x32
 8005978:	4a33      	ldr	r2, [pc, #204]	@ (8005a48 <UART_SetConfig+0x4e4>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005984:	441c      	add	r4, r3
 8005986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800598a:	2200      	movs	r2, #0
 800598c:	673b      	str	r3, [r7, #112]	@ 0x70
 800598e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005990:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005994:	4642      	mov	r2, r8
 8005996:	464b      	mov	r3, r9
 8005998:	1891      	adds	r1, r2, r2
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	415b      	adcs	r3, r3
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a4:	4641      	mov	r1, r8
 80059a6:	1851      	adds	r1, r2, r1
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	4649      	mov	r1, r9
 80059ac:	414b      	adcs	r3, r1
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059bc:	4659      	mov	r1, fp
 80059be:	00cb      	lsls	r3, r1, #3
 80059c0:	4651      	mov	r1, sl
 80059c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059c6:	4651      	mov	r1, sl
 80059c8:	00ca      	lsls	r2, r1, #3
 80059ca:	4610      	mov	r0, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	4642      	mov	r2, r8
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059d6:	464b      	mov	r3, r9
 80059d8:	460a      	mov	r2, r1
 80059da:	eb42 0303 	adc.w	r3, r2, r3
 80059de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80059ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059f8:	4649      	mov	r1, r9
 80059fa:	008b      	lsls	r3, r1, #2
 80059fc:	4641      	mov	r1, r8
 80059fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a02:	4641      	mov	r1, r8
 8005a04:	008a      	lsls	r2, r1, #2
 8005a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a0a:	f7fb f8ed 	bl	8000be8 <__aeabi_uldivmod>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4b0d      	ldr	r3, [pc, #52]	@ (8005a48 <UART_SetConfig+0x4e4>)
 8005a14:	fba3 1302 	umull	r1, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	2164      	movs	r1, #100	@ 0x64
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	3332      	adds	r3, #50	@ 0x32
 8005a26:	4a08      	ldr	r2, [pc, #32]	@ (8005a48 <UART_SetConfig+0x4e4>)
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f003 020f 	and.w	r2, r3, #15
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4422      	add	r2, r4
 8005a3a:	609a      	str	r2, [r3, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a42:	46bd      	mov	sp, r7
 8005a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a48:	51eb851f 	.word	0x51eb851f

08005a4c <__cvt>:
 8005a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a50:	ec57 6b10 	vmov	r6, r7, d0
 8005a54:	2f00      	cmp	r7, #0
 8005a56:	460c      	mov	r4, r1
 8005a58:	4619      	mov	r1, r3
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	bfbb      	ittet	lt
 8005a5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a62:	461f      	movlt	r7, r3
 8005a64:	2300      	movge	r3, #0
 8005a66:	232d      	movlt	r3, #45	@ 0x2d
 8005a68:	700b      	strb	r3, [r1, #0]
 8005a6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a70:	4691      	mov	r9, r2
 8005a72:	f023 0820 	bic.w	r8, r3, #32
 8005a76:	bfbc      	itt	lt
 8005a78:	4632      	movlt	r2, r6
 8005a7a:	4616      	movlt	r6, r2
 8005a7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a80:	d005      	beq.n	8005a8e <__cvt+0x42>
 8005a82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a86:	d100      	bne.n	8005a8a <__cvt+0x3e>
 8005a88:	3401      	adds	r4, #1
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	e000      	b.n	8005a90 <__cvt+0x44>
 8005a8e:	2103      	movs	r1, #3
 8005a90:	ab03      	add	r3, sp, #12
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	ab02      	add	r3, sp, #8
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	ec47 6b10 	vmov	d0, r6, r7
 8005a9c:	4653      	mov	r3, sl
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	f000 fe5a 	bl	8006758 <_dtoa_r>
 8005aa4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	d119      	bne.n	8005ae0 <__cvt+0x94>
 8005aac:	f019 0f01 	tst.w	r9, #1
 8005ab0:	d00e      	beq.n	8005ad0 <__cvt+0x84>
 8005ab2:	eb00 0904 	add.w	r9, r0, r4
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4630      	mov	r0, r6
 8005abc:	4639      	mov	r1, r7
 8005abe:	f7fb f803 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ac2:	b108      	cbz	r0, 8005ac8 <__cvt+0x7c>
 8005ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ac8:	2230      	movs	r2, #48	@ 0x30
 8005aca:	9b03      	ldr	r3, [sp, #12]
 8005acc:	454b      	cmp	r3, r9
 8005ace:	d31e      	bcc.n	8005b0e <__cvt+0xc2>
 8005ad0:	9b03      	ldr	r3, [sp, #12]
 8005ad2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ad4:	1b5b      	subs	r3, r3, r5
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	b004      	add	sp, #16
 8005adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ae4:	eb00 0904 	add.w	r9, r0, r4
 8005ae8:	d1e5      	bne.n	8005ab6 <__cvt+0x6a>
 8005aea:	7803      	ldrb	r3, [r0, #0]
 8005aec:	2b30      	cmp	r3, #48	@ 0x30
 8005aee:	d10a      	bne.n	8005b06 <__cvt+0xba>
 8005af0:	2200      	movs	r2, #0
 8005af2:	2300      	movs	r3, #0
 8005af4:	4630      	mov	r0, r6
 8005af6:	4639      	mov	r1, r7
 8005af8:	f7fa ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005afc:	b918      	cbnz	r0, 8005b06 <__cvt+0xba>
 8005afe:	f1c4 0401 	rsb	r4, r4, #1
 8005b02:	f8ca 4000 	str.w	r4, [sl]
 8005b06:	f8da 3000 	ldr.w	r3, [sl]
 8005b0a:	4499      	add	r9, r3
 8005b0c:	e7d3      	b.n	8005ab6 <__cvt+0x6a>
 8005b0e:	1c59      	adds	r1, r3, #1
 8005b10:	9103      	str	r1, [sp, #12]
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e7d9      	b.n	8005aca <__cvt+0x7e>

08005b16 <__exponent>:
 8005b16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b18:	2900      	cmp	r1, #0
 8005b1a:	bfba      	itte	lt
 8005b1c:	4249      	neglt	r1, r1
 8005b1e:	232d      	movlt	r3, #45	@ 0x2d
 8005b20:	232b      	movge	r3, #43	@ 0x2b
 8005b22:	2909      	cmp	r1, #9
 8005b24:	7002      	strb	r2, [r0, #0]
 8005b26:	7043      	strb	r3, [r0, #1]
 8005b28:	dd29      	ble.n	8005b7e <__exponent+0x68>
 8005b2a:	f10d 0307 	add.w	r3, sp, #7
 8005b2e:	461d      	mov	r5, r3
 8005b30:	270a      	movs	r7, #10
 8005b32:	461a      	mov	r2, r3
 8005b34:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b38:	fb07 1416 	mls	r4, r7, r6, r1
 8005b3c:	3430      	adds	r4, #48	@ 0x30
 8005b3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b42:	460c      	mov	r4, r1
 8005b44:	2c63      	cmp	r4, #99	@ 0x63
 8005b46:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	dcf1      	bgt.n	8005b32 <__exponent+0x1c>
 8005b4e:	3130      	adds	r1, #48	@ 0x30
 8005b50:	1e94      	subs	r4, r2, #2
 8005b52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b56:	1c41      	adds	r1, r0, #1
 8005b58:	4623      	mov	r3, r4
 8005b5a:	42ab      	cmp	r3, r5
 8005b5c:	d30a      	bcc.n	8005b74 <__exponent+0x5e>
 8005b5e:	f10d 0309 	add.w	r3, sp, #9
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	42ac      	cmp	r4, r5
 8005b66:	bf88      	it	hi
 8005b68:	2300      	movhi	r3, #0
 8005b6a:	3302      	adds	r3, #2
 8005b6c:	4403      	add	r3, r0
 8005b6e:	1a18      	subs	r0, r3, r0
 8005b70:	b003      	add	sp, #12
 8005b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b7c:	e7ed      	b.n	8005b5a <__exponent+0x44>
 8005b7e:	2330      	movs	r3, #48	@ 0x30
 8005b80:	3130      	adds	r1, #48	@ 0x30
 8005b82:	7083      	strb	r3, [r0, #2]
 8005b84:	70c1      	strb	r1, [r0, #3]
 8005b86:	1d03      	adds	r3, r0, #4
 8005b88:	e7f1      	b.n	8005b6e <__exponent+0x58>
	...

08005b8c <_printf_float>:
 8005b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b90:	b08d      	sub	sp, #52	@ 0x34
 8005b92:	460c      	mov	r4, r1
 8005b94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b98:	4616      	mov	r6, r2
 8005b9a:	461f      	mov	r7, r3
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	f000 fcdb 	bl	8006558 <_localeconv_r>
 8005ba2:	6803      	ldr	r3, [r0, #0]
 8005ba4:	9304      	str	r3, [sp, #16]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fa fb62 	bl	8000270 <strlen>
 8005bac:	2300      	movs	r3, #0
 8005bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8005bb4:	9005      	str	r0, [sp, #20]
 8005bb6:	3307      	adds	r3, #7
 8005bb8:	f023 0307 	bic.w	r3, r3, #7
 8005bbc:	f103 0208 	add.w	r2, r3, #8
 8005bc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005bc4:	f8d4 b000 	ldr.w	fp, [r4]
 8005bc8:	f8c8 2000 	str.w	r2, [r8]
 8005bcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005bd4:	9307      	str	r3, [sp, #28]
 8005bd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005be2:	4b9c      	ldr	r3, [pc, #624]	@ (8005e54 <_printf_float+0x2c8>)
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295
 8005be8:	f7fa ffa0 	bl	8000b2c <__aeabi_dcmpun>
 8005bec:	bb70      	cbnz	r0, 8005c4c <_printf_float+0xc0>
 8005bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bf2:	4b98      	ldr	r3, [pc, #608]	@ (8005e54 <_printf_float+0x2c8>)
 8005bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf8:	f7fa ff7a 	bl	8000af0 <__aeabi_dcmple>
 8005bfc:	bb30      	cbnz	r0, 8005c4c <_printf_float+0xc0>
 8005bfe:	2200      	movs	r2, #0
 8005c00:	2300      	movs	r3, #0
 8005c02:	4640      	mov	r0, r8
 8005c04:	4649      	mov	r1, r9
 8005c06:	f7fa ff69 	bl	8000adc <__aeabi_dcmplt>
 8005c0a:	b110      	cbz	r0, 8005c12 <_printf_float+0x86>
 8005c0c:	232d      	movs	r3, #45	@ 0x2d
 8005c0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c12:	4a91      	ldr	r2, [pc, #580]	@ (8005e58 <_printf_float+0x2cc>)
 8005c14:	4b91      	ldr	r3, [pc, #580]	@ (8005e5c <_printf_float+0x2d0>)
 8005c16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c1a:	bf94      	ite	ls
 8005c1c:	4690      	movls	r8, r2
 8005c1e:	4698      	movhi	r8, r3
 8005c20:	2303      	movs	r3, #3
 8005c22:	6123      	str	r3, [r4, #16]
 8005c24:	f02b 0304 	bic.w	r3, fp, #4
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	f04f 0900 	mov.w	r9, #0
 8005c2e:	9700      	str	r7, [sp, #0]
 8005c30:	4633      	mov	r3, r6
 8005c32:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005c34:	4621      	mov	r1, r4
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 f9d2 	bl	8005fe0 <_printf_common>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	f040 808d 	bne.w	8005d5c <_printf_float+0x1d0>
 8005c42:	f04f 30ff 	mov.w	r0, #4294967295
 8005c46:	b00d      	add	sp, #52	@ 0x34
 8005c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	464b      	mov	r3, r9
 8005c50:	4640      	mov	r0, r8
 8005c52:	4649      	mov	r1, r9
 8005c54:	f7fa ff6a 	bl	8000b2c <__aeabi_dcmpun>
 8005c58:	b140      	cbz	r0, 8005c6c <_printf_float+0xe0>
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bfbc      	itt	lt
 8005c60:	232d      	movlt	r3, #45	@ 0x2d
 8005c62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c66:	4a7e      	ldr	r2, [pc, #504]	@ (8005e60 <_printf_float+0x2d4>)
 8005c68:	4b7e      	ldr	r3, [pc, #504]	@ (8005e64 <_printf_float+0x2d8>)
 8005c6a:	e7d4      	b.n	8005c16 <_printf_float+0x8a>
 8005c6c:	6863      	ldr	r3, [r4, #4]
 8005c6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c72:	9206      	str	r2, [sp, #24]
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	d13b      	bne.n	8005cf0 <_printf_float+0x164>
 8005c78:	2306      	movs	r3, #6
 8005c7a:	6063      	str	r3, [r4, #4]
 8005c7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c80:	2300      	movs	r3, #0
 8005c82:	6022      	str	r2, [r4, #0]
 8005c84:	9303      	str	r3, [sp, #12]
 8005c86:	ab0a      	add	r3, sp, #40	@ 0x28
 8005c88:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c8c:	ab09      	add	r3, sp, #36	@ 0x24
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	6861      	ldr	r1, [r4, #4]
 8005c92:	ec49 8b10 	vmov	d0, r8, r9
 8005c96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f7ff fed6 	bl	8005a4c <__cvt>
 8005ca0:	9b06      	ldr	r3, [sp, #24]
 8005ca2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ca4:	2b47      	cmp	r3, #71	@ 0x47
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	d129      	bne.n	8005cfe <_printf_float+0x172>
 8005caa:	1cc8      	adds	r0, r1, #3
 8005cac:	db02      	blt.n	8005cb4 <_printf_float+0x128>
 8005cae:	6863      	ldr	r3, [r4, #4]
 8005cb0:	4299      	cmp	r1, r3
 8005cb2:	dd41      	ble.n	8005d38 <_printf_float+0x1ac>
 8005cb4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005cb8:	fa5f fa8a 	uxtb.w	sl, sl
 8005cbc:	3901      	subs	r1, #1
 8005cbe:	4652      	mov	r2, sl
 8005cc0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005cc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005cc6:	f7ff ff26 	bl	8005b16 <__exponent>
 8005cca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ccc:	1813      	adds	r3, r2, r0
 8005cce:	2a01      	cmp	r2, #1
 8005cd0:	4681      	mov	r9, r0
 8005cd2:	6123      	str	r3, [r4, #16]
 8005cd4:	dc02      	bgt.n	8005cdc <_printf_float+0x150>
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	07d2      	lsls	r2, r2, #31
 8005cda:	d501      	bpl.n	8005ce0 <_printf_float+0x154>
 8005cdc:	3301      	adds	r3, #1
 8005cde:	6123      	str	r3, [r4, #16]
 8005ce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0a2      	beq.n	8005c2e <_printf_float+0xa2>
 8005ce8:	232d      	movs	r3, #45	@ 0x2d
 8005cea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cee:	e79e      	b.n	8005c2e <_printf_float+0xa2>
 8005cf0:	9a06      	ldr	r2, [sp, #24]
 8005cf2:	2a47      	cmp	r2, #71	@ 0x47
 8005cf4:	d1c2      	bne.n	8005c7c <_printf_float+0xf0>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1c0      	bne.n	8005c7c <_printf_float+0xf0>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e7bd      	b.n	8005c7a <_printf_float+0xee>
 8005cfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d02:	d9db      	bls.n	8005cbc <_printf_float+0x130>
 8005d04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d08:	d118      	bne.n	8005d3c <_printf_float+0x1b0>
 8005d0a:	2900      	cmp	r1, #0
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	dd0b      	ble.n	8005d28 <_printf_float+0x19c>
 8005d10:	6121      	str	r1, [r4, #16]
 8005d12:	b913      	cbnz	r3, 8005d1a <_printf_float+0x18e>
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	07d0      	lsls	r0, r2, #31
 8005d18:	d502      	bpl.n	8005d20 <_printf_float+0x194>
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	440b      	add	r3, r1
 8005d1e:	6123      	str	r3, [r4, #16]
 8005d20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d22:	f04f 0900 	mov.w	r9, #0
 8005d26:	e7db      	b.n	8005ce0 <_printf_float+0x154>
 8005d28:	b913      	cbnz	r3, 8005d30 <_printf_float+0x1a4>
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	07d2      	lsls	r2, r2, #31
 8005d2e:	d501      	bpl.n	8005d34 <_printf_float+0x1a8>
 8005d30:	3302      	adds	r3, #2
 8005d32:	e7f4      	b.n	8005d1e <_printf_float+0x192>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e7f2      	b.n	8005d1e <_printf_float+0x192>
 8005d38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	db05      	blt.n	8005d4e <_printf_float+0x1c2>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	6121      	str	r1, [r4, #16]
 8005d46:	07d8      	lsls	r0, r3, #31
 8005d48:	d5ea      	bpl.n	8005d20 <_printf_float+0x194>
 8005d4a:	1c4b      	adds	r3, r1, #1
 8005d4c:	e7e7      	b.n	8005d1e <_printf_float+0x192>
 8005d4e:	2900      	cmp	r1, #0
 8005d50:	bfd4      	ite	le
 8005d52:	f1c1 0202 	rsble	r2, r1, #2
 8005d56:	2201      	movgt	r2, #1
 8005d58:	4413      	add	r3, r2
 8005d5a:	e7e0      	b.n	8005d1e <_printf_float+0x192>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	055a      	lsls	r2, r3, #21
 8005d60:	d407      	bmi.n	8005d72 <_printf_float+0x1e6>
 8005d62:	6923      	ldr	r3, [r4, #16]
 8005d64:	4642      	mov	r2, r8
 8005d66:	4631      	mov	r1, r6
 8005d68:	4628      	mov	r0, r5
 8005d6a:	47b8      	blx	r7
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d12b      	bne.n	8005dc8 <_printf_float+0x23c>
 8005d70:	e767      	b.n	8005c42 <_printf_float+0xb6>
 8005d72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d76:	f240 80dd 	bls.w	8005f34 <_printf_float+0x3a8>
 8005d7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2300      	movs	r3, #0
 8005d82:	f7fa fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d033      	beq.n	8005df2 <_printf_float+0x266>
 8005d8a:	4a37      	ldr	r2, [pc, #220]	@ (8005e68 <_printf_float+0x2dc>)
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	4631      	mov	r1, r6
 8005d90:	4628      	mov	r0, r5
 8005d92:	47b8      	blx	r7
 8005d94:	3001      	adds	r0, #1
 8005d96:	f43f af54 	beq.w	8005c42 <_printf_float+0xb6>
 8005d9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d9e:	4543      	cmp	r3, r8
 8005da0:	db02      	blt.n	8005da8 <_printf_float+0x21c>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	07d8      	lsls	r0, r3, #31
 8005da6:	d50f      	bpl.n	8005dc8 <_printf_float+0x23c>
 8005da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dac:	4631      	mov	r1, r6
 8005dae:	4628      	mov	r0, r5
 8005db0:	47b8      	blx	r7
 8005db2:	3001      	adds	r0, #1
 8005db4:	f43f af45 	beq.w	8005c42 <_printf_float+0xb6>
 8005db8:	f04f 0900 	mov.w	r9, #0
 8005dbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005dc0:	f104 0a1a 	add.w	sl, r4, #26
 8005dc4:	45c8      	cmp	r8, r9
 8005dc6:	dc09      	bgt.n	8005ddc <_printf_float+0x250>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	079b      	lsls	r3, r3, #30
 8005dcc:	f100 8103 	bmi.w	8005fd6 <_printf_float+0x44a>
 8005dd0:	68e0      	ldr	r0, [r4, #12]
 8005dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dd4:	4298      	cmp	r0, r3
 8005dd6:	bfb8      	it	lt
 8005dd8:	4618      	movlt	r0, r3
 8005dda:	e734      	b.n	8005c46 <_printf_float+0xba>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	4652      	mov	r2, sl
 8005de0:	4631      	mov	r1, r6
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b8      	blx	r7
 8005de6:	3001      	adds	r0, #1
 8005de8:	f43f af2b 	beq.w	8005c42 <_printf_float+0xb6>
 8005dec:	f109 0901 	add.w	r9, r9, #1
 8005df0:	e7e8      	b.n	8005dc4 <_printf_float+0x238>
 8005df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	dc39      	bgt.n	8005e6c <_printf_float+0x2e0>
 8005df8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e68 <_printf_float+0x2dc>)
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	4628      	mov	r0, r5
 8005e00:	47b8      	blx	r7
 8005e02:	3001      	adds	r0, #1
 8005e04:	f43f af1d 	beq.w	8005c42 <_printf_float+0xb6>
 8005e08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005e0c:	ea59 0303 	orrs.w	r3, r9, r3
 8005e10:	d102      	bne.n	8005e18 <_printf_float+0x28c>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	07d9      	lsls	r1, r3, #31
 8005e16:	d5d7      	bpl.n	8005dc8 <_printf_float+0x23c>
 8005e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	f43f af0d 	beq.w	8005c42 <_printf_float+0xb6>
 8005e28:	f04f 0a00 	mov.w	sl, #0
 8005e2c:	f104 0b1a 	add.w	fp, r4, #26
 8005e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e32:	425b      	negs	r3, r3
 8005e34:	4553      	cmp	r3, sl
 8005e36:	dc01      	bgt.n	8005e3c <_printf_float+0x2b0>
 8005e38:	464b      	mov	r3, r9
 8005e3a:	e793      	b.n	8005d64 <_printf_float+0x1d8>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	465a      	mov	r2, fp
 8005e40:	4631      	mov	r1, r6
 8005e42:	4628      	mov	r0, r5
 8005e44:	47b8      	blx	r7
 8005e46:	3001      	adds	r0, #1
 8005e48:	f43f aefb 	beq.w	8005c42 <_printf_float+0xb6>
 8005e4c:	f10a 0a01 	add.w	sl, sl, #1
 8005e50:	e7ee      	b.n	8005e30 <_printf_float+0x2a4>
 8005e52:	bf00      	nop
 8005e54:	7fefffff 	.word	0x7fefffff
 8005e58:	08008754 	.word	0x08008754
 8005e5c:	08008758 	.word	0x08008758
 8005e60:	0800875c 	.word	0x0800875c
 8005e64:	08008760 	.word	0x08008760
 8005e68:	08008764 	.word	0x08008764
 8005e6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e72:	4553      	cmp	r3, sl
 8005e74:	bfa8      	it	ge
 8005e76:	4653      	movge	r3, sl
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	4699      	mov	r9, r3
 8005e7c:	dc36      	bgt.n	8005eec <_printf_float+0x360>
 8005e7e:	f04f 0b00 	mov.w	fp, #0
 8005e82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e86:	f104 021a 	add.w	r2, r4, #26
 8005e8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e8c:	9306      	str	r3, [sp, #24]
 8005e8e:	eba3 0309 	sub.w	r3, r3, r9
 8005e92:	455b      	cmp	r3, fp
 8005e94:	dc31      	bgt.n	8005efa <_printf_float+0x36e>
 8005e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e98:	459a      	cmp	sl, r3
 8005e9a:	dc3a      	bgt.n	8005f12 <_printf_float+0x386>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	07da      	lsls	r2, r3, #31
 8005ea0:	d437      	bmi.n	8005f12 <_printf_float+0x386>
 8005ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea4:	ebaa 0903 	sub.w	r9, sl, r3
 8005ea8:	9b06      	ldr	r3, [sp, #24]
 8005eaa:	ebaa 0303 	sub.w	r3, sl, r3
 8005eae:	4599      	cmp	r9, r3
 8005eb0:	bfa8      	it	ge
 8005eb2:	4699      	movge	r9, r3
 8005eb4:	f1b9 0f00 	cmp.w	r9, #0
 8005eb8:	dc33      	bgt.n	8005f22 <_printf_float+0x396>
 8005eba:	f04f 0800 	mov.w	r8, #0
 8005ebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ec2:	f104 0b1a 	add.w	fp, r4, #26
 8005ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec8:	ebaa 0303 	sub.w	r3, sl, r3
 8005ecc:	eba3 0309 	sub.w	r3, r3, r9
 8005ed0:	4543      	cmp	r3, r8
 8005ed2:	f77f af79 	ble.w	8005dc8 <_printf_float+0x23c>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	465a      	mov	r2, fp
 8005eda:	4631      	mov	r1, r6
 8005edc:	4628      	mov	r0, r5
 8005ede:	47b8      	blx	r7
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	f43f aeae 	beq.w	8005c42 <_printf_float+0xb6>
 8005ee6:	f108 0801 	add.w	r8, r8, #1
 8005eea:	e7ec      	b.n	8005ec6 <_printf_float+0x33a>
 8005eec:	4642      	mov	r2, r8
 8005eee:	4631      	mov	r1, r6
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	47b8      	blx	r7
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d1c2      	bne.n	8005e7e <_printf_float+0x2f2>
 8005ef8:	e6a3      	b.n	8005c42 <_printf_float+0xb6>
 8005efa:	2301      	movs	r3, #1
 8005efc:	4631      	mov	r1, r6
 8005efe:	4628      	mov	r0, r5
 8005f00:	9206      	str	r2, [sp, #24]
 8005f02:	47b8      	blx	r7
 8005f04:	3001      	adds	r0, #1
 8005f06:	f43f ae9c 	beq.w	8005c42 <_printf_float+0xb6>
 8005f0a:	9a06      	ldr	r2, [sp, #24]
 8005f0c:	f10b 0b01 	add.w	fp, fp, #1
 8005f10:	e7bb      	b.n	8005e8a <_printf_float+0x2fe>
 8005f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d1c0      	bne.n	8005ea2 <_printf_float+0x316>
 8005f20:	e68f      	b.n	8005c42 <_printf_float+0xb6>
 8005f22:	9a06      	ldr	r2, [sp, #24]
 8005f24:	464b      	mov	r3, r9
 8005f26:	4442      	add	r2, r8
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b8      	blx	r7
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d1c3      	bne.n	8005eba <_printf_float+0x32e>
 8005f32:	e686      	b.n	8005c42 <_printf_float+0xb6>
 8005f34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f38:	f1ba 0f01 	cmp.w	sl, #1
 8005f3c:	dc01      	bgt.n	8005f42 <_printf_float+0x3b6>
 8005f3e:	07db      	lsls	r3, r3, #31
 8005f40:	d536      	bpl.n	8005fb0 <_printf_float+0x424>
 8005f42:	2301      	movs	r3, #1
 8005f44:	4642      	mov	r2, r8
 8005f46:	4631      	mov	r1, r6
 8005f48:	4628      	mov	r0, r5
 8005f4a:	47b8      	blx	r7
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	f43f ae78 	beq.w	8005c42 <_printf_float+0xb6>
 8005f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f56:	4631      	mov	r1, r6
 8005f58:	4628      	mov	r0, r5
 8005f5a:	47b8      	blx	r7
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	f43f ae70 	beq.w	8005c42 <_printf_float+0xb6>
 8005f62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f66:	2200      	movs	r2, #0
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f6e:	f7fa fdab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f72:	b9c0      	cbnz	r0, 8005fa6 <_printf_float+0x41a>
 8005f74:	4653      	mov	r3, sl
 8005f76:	f108 0201 	add.w	r2, r8, #1
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	d10c      	bne.n	8005f9e <_printf_float+0x412>
 8005f84:	e65d      	b.n	8005c42 <_printf_float+0xb6>
 8005f86:	2301      	movs	r3, #1
 8005f88:	465a      	mov	r2, fp
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	47b8      	blx	r7
 8005f90:	3001      	adds	r0, #1
 8005f92:	f43f ae56 	beq.w	8005c42 <_printf_float+0xb6>
 8005f96:	f108 0801 	add.w	r8, r8, #1
 8005f9a:	45d0      	cmp	r8, sl
 8005f9c:	dbf3      	blt.n	8005f86 <_printf_float+0x3fa>
 8005f9e:	464b      	mov	r3, r9
 8005fa0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005fa4:	e6df      	b.n	8005d66 <_printf_float+0x1da>
 8005fa6:	f04f 0800 	mov.w	r8, #0
 8005faa:	f104 0b1a 	add.w	fp, r4, #26
 8005fae:	e7f4      	b.n	8005f9a <_printf_float+0x40e>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4642      	mov	r2, r8
 8005fb4:	e7e1      	b.n	8005f7a <_printf_float+0x3ee>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	464a      	mov	r2, r9
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	47b8      	blx	r7
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	f43f ae3e 	beq.w	8005c42 <_printf_float+0xb6>
 8005fc6:	f108 0801 	add.w	r8, r8, #1
 8005fca:	68e3      	ldr	r3, [r4, #12]
 8005fcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005fce:	1a5b      	subs	r3, r3, r1
 8005fd0:	4543      	cmp	r3, r8
 8005fd2:	dcf0      	bgt.n	8005fb6 <_printf_float+0x42a>
 8005fd4:	e6fc      	b.n	8005dd0 <_printf_float+0x244>
 8005fd6:	f04f 0800 	mov.w	r8, #0
 8005fda:	f104 0919 	add.w	r9, r4, #25
 8005fde:	e7f4      	b.n	8005fca <_printf_float+0x43e>

08005fe0 <_printf_common>:
 8005fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	4698      	mov	r8, r3
 8005fe8:	688a      	ldr	r2, [r1, #8]
 8005fea:	690b      	ldr	r3, [r1, #16]
 8005fec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	bfb8      	it	lt
 8005ff4:	4613      	movlt	r3, r2
 8005ff6:	6033      	str	r3, [r6, #0]
 8005ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ffc:	4607      	mov	r7, r0
 8005ffe:	460c      	mov	r4, r1
 8006000:	b10a      	cbz	r2, 8006006 <_printf_common+0x26>
 8006002:	3301      	adds	r3, #1
 8006004:	6033      	str	r3, [r6, #0]
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	0699      	lsls	r1, r3, #26
 800600a:	bf42      	ittt	mi
 800600c:	6833      	ldrmi	r3, [r6, #0]
 800600e:	3302      	addmi	r3, #2
 8006010:	6033      	strmi	r3, [r6, #0]
 8006012:	6825      	ldr	r5, [r4, #0]
 8006014:	f015 0506 	ands.w	r5, r5, #6
 8006018:	d106      	bne.n	8006028 <_printf_common+0x48>
 800601a:	f104 0a19 	add.w	sl, r4, #25
 800601e:	68e3      	ldr	r3, [r4, #12]
 8006020:	6832      	ldr	r2, [r6, #0]
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	42ab      	cmp	r3, r5
 8006026:	dc26      	bgt.n	8006076 <_printf_common+0x96>
 8006028:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800602c:	6822      	ldr	r2, [r4, #0]
 800602e:	3b00      	subs	r3, #0
 8006030:	bf18      	it	ne
 8006032:	2301      	movne	r3, #1
 8006034:	0692      	lsls	r2, r2, #26
 8006036:	d42b      	bmi.n	8006090 <_printf_common+0xb0>
 8006038:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800603c:	4641      	mov	r1, r8
 800603e:	4638      	mov	r0, r7
 8006040:	47c8      	blx	r9
 8006042:	3001      	adds	r0, #1
 8006044:	d01e      	beq.n	8006084 <_printf_common+0xa4>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	6922      	ldr	r2, [r4, #16]
 800604a:	f003 0306 	and.w	r3, r3, #6
 800604e:	2b04      	cmp	r3, #4
 8006050:	bf02      	ittt	eq
 8006052:	68e5      	ldreq	r5, [r4, #12]
 8006054:	6833      	ldreq	r3, [r6, #0]
 8006056:	1aed      	subeq	r5, r5, r3
 8006058:	68a3      	ldr	r3, [r4, #8]
 800605a:	bf0c      	ite	eq
 800605c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006060:	2500      	movne	r5, #0
 8006062:	4293      	cmp	r3, r2
 8006064:	bfc4      	itt	gt
 8006066:	1a9b      	subgt	r3, r3, r2
 8006068:	18ed      	addgt	r5, r5, r3
 800606a:	2600      	movs	r6, #0
 800606c:	341a      	adds	r4, #26
 800606e:	42b5      	cmp	r5, r6
 8006070:	d11a      	bne.n	80060a8 <_printf_common+0xc8>
 8006072:	2000      	movs	r0, #0
 8006074:	e008      	b.n	8006088 <_printf_common+0xa8>
 8006076:	2301      	movs	r3, #1
 8006078:	4652      	mov	r2, sl
 800607a:	4641      	mov	r1, r8
 800607c:	4638      	mov	r0, r7
 800607e:	47c8      	blx	r9
 8006080:	3001      	adds	r0, #1
 8006082:	d103      	bne.n	800608c <_printf_common+0xac>
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608c:	3501      	adds	r5, #1
 800608e:	e7c6      	b.n	800601e <_printf_common+0x3e>
 8006090:	18e1      	adds	r1, r4, r3
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	2030      	movs	r0, #48	@ 0x30
 8006096:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800609a:	4422      	add	r2, r4
 800609c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060a4:	3302      	adds	r3, #2
 80060a6:	e7c7      	b.n	8006038 <_printf_common+0x58>
 80060a8:	2301      	movs	r3, #1
 80060aa:	4622      	mov	r2, r4
 80060ac:	4641      	mov	r1, r8
 80060ae:	4638      	mov	r0, r7
 80060b0:	47c8      	blx	r9
 80060b2:	3001      	adds	r0, #1
 80060b4:	d0e6      	beq.n	8006084 <_printf_common+0xa4>
 80060b6:	3601      	adds	r6, #1
 80060b8:	e7d9      	b.n	800606e <_printf_common+0x8e>
	...

080060bc <_printf_i>:
 80060bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	7e0f      	ldrb	r7, [r1, #24]
 80060c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060c4:	2f78      	cmp	r7, #120	@ 0x78
 80060c6:	4691      	mov	r9, r2
 80060c8:	4680      	mov	r8, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	469a      	mov	sl, r3
 80060ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060d2:	d807      	bhi.n	80060e4 <_printf_i+0x28>
 80060d4:	2f62      	cmp	r7, #98	@ 0x62
 80060d6:	d80a      	bhi.n	80060ee <_printf_i+0x32>
 80060d8:	2f00      	cmp	r7, #0
 80060da:	f000 80d2 	beq.w	8006282 <_printf_i+0x1c6>
 80060de:	2f58      	cmp	r7, #88	@ 0x58
 80060e0:	f000 80b9 	beq.w	8006256 <_printf_i+0x19a>
 80060e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060ec:	e03a      	b.n	8006164 <_printf_i+0xa8>
 80060ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060f2:	2b15      	cmp	r3, #21
 80060f4:	d8f6      	bhi.n	80060e4 <_printf_i+0x28>
 80060f6:	a101      	add	r1, pc, #4	@ (adr r1, 80060fc <_printf_i+0x40>)
 80060f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060fc:	08006155 	.word	0x08006155
 8006100:	08006169 	.word	0x08006169
 8006104:	080060e5 	.word	0x080060e5
 8006108:	080060e5 	.word	0x080060e5
 800610c:	080060e5 	.word	0x080060e5
 8006110:	080060e5 	.word	0x080060e5
 8006114:	08006169 	.word	0x08006169
 8006118:	080060e5 	.word	0x080060e5
 800611c:	080060e5 	.word	0x080060e5
 8006120:	080060e5 	.word	0x080060e5
 8006124:	080060e5 	.word	0x080060e5
 8006128:	08006269 	.word	0x08006269
 800612c:	08006193 	.word	0x08006193
 8006130:	08006223 	.word	0x08006223
 8006134:	080060e5 	.word	0x080060e5
 8006138:	080060e5 	.word	0x080060e5
 800613c:	0800628b 	.word	0x0800628b
 8006140:	080060e5 	.word	0x080060e5
 8006144:	08006193 	.word	0x08006193
 8006148:	080060e5 	.word	0x080060e5
 800614c:	080060e5 	.word	0x080060e5
 8006150:	0800622b 	.word	0x0800622b
 8006154:	6833      	ldr	r3, [r6, #0]
 8006156:	1d1a      	adds	r2, r3, #4
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6032      	str	r2, [r6, #0]
 800615c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006160:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006164:	2301      	movs	r3, #1
 8006166:	e09d      	b.n	80062a4 <_printf_i+0x1e8>
 8006168:	6833      	ldr	r3, [r6, #0]
 800616a:	6820      	ldr	r0, [r4, #0]
 800616c:	1d19      	adds	r1, r3, #4
 800616e:	6031      	str	r1, [r6, #0]
 8006170:	0606      	lsls	r6, r0, #24
 8006172:	d501      	bpl.n	8006178 <_printf_i+0xbc>
 8006174:	681d      	ldr	r5, [r3, #0]
 8006176:	e003      	b.n	8006180 <_printf_i+0xc4>
 8006178:	0645      	lsls	r5, r0, #25
 800617a:	d5fb      	bpl.n	8006174 <_printf_i+0xb8>
 800617c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006180:	2d00      	cmp	r5, #0
 8006182:	da03      	bge.n	800618c <_printf_i+0xd0>
 8006184:	232d      	movs	r3, #45	@ 0x2d
 8006186:	426d      	negs	r5, r5
 8006188:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800618c:	4859      	ldr	r0, [pc, #356]	@ (80062f4 <_printf_i+0x238>)
 800618e:	230a      	movs	r3, #10
 8006190:	e011      	b.n	80061b6 <_printf_i+0xfa>
 8006192:	6821      	ldr	r1, [r4, #0]
 8006194:	6833      	ldr	r3, [r6, #0]
 8006196:	0608      	lsls	r0, r1, #24
 8006198:	f853 5b04 	ldr.w	r5, [r3], #4
 800619c:	d402      	bmi.n	80061a4 <_printf_i+0xe8>
 800619e:	0649      	lsls	r1, r1, #25
 80061a0:	bf48      	it	mi
 80061a2:	b2ad      	uxthmi	r5, r5
 80061a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80061a6:	4853      	ldr	r0, [pc, #332]	@ (80062f4 <_printf_i+0x238>)
 80061a8:	6033      	str	r3, [r6, #0]
 80061aa:	bf14      	ite	ne
 80061ac:	230a      	movne	r3, #10
 80061ae:	2308      	moveq	r3, #8
 80061b0:	2100      	movs	r1, #0
 80061b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061b6:	6866      	ldr	r6, [r4, #4]
 80061b8:	60a6      	str	r6, [r4, #8]
 80061ba:	2e00      	cmp	r6, #0
 80061bc:	bfa2      	ittt	ge
 80061be:	6821      	ldrge	r1, [r4, #0]
 80061c0:	f021 0104 	bicge.w	r1, r1, #4
 80061c4:	6021      	strge	r1, [r4, #0]
 80061c6:	b90d      	cbnz	r5, 80061cc <_printf_i+0x110>
 80061c8:	2e00      	cmp	r6, #0
 80061ca:	d04b      	beq.n	8006264 <_printf_i+0x1a8>
 80061cc:	4616      	mov	r6, r2
 80061ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80061d2:	fb03 5711 	mls	r7, r3, r1, r5
 80061d6:	5dc7      	ldrb	r7, [r0, r7]
 80061d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061dc:	462f      	mov	r7, r5
 80061de:	42bb      	cmp	r3, r7
 80061e0:	460d      	mov	r5, r1
 80061e2:	d9f4      	bls.n	80061ce <_printf_i+0x112>
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d10b      	bne.n	8006200 <_printf_i+0x144>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	07df      	lsls	r7, r3, #31
 80061ec:	d508      	bpl.n	8006200 <_printf_i+0x144>
 80061ee:	6923      	ldr	r3, [r4, #16]
 80061f0:	6861      	ldr	r1, [r4, #4]
 80061f2:	4299      	cmp	r1, r3
 80061f4:	bfde      	ittt	le
 80061f6:	2330      	movle	r3, #48	@ 0x30
 80061f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006200:	1b92      	subs	r2, r2, r6
 8006202:	6122      	str	r2, [r4, #16]
 8006204:	f8cd a000 	str.w	sl, [sp]
 8006208:	464b      	mov	r3, r9
 800620a:	aa03      	add	r2, sp, #12
 800620c:	4621      	mov	r1, r4
 800620e:	4640      	mov	r0, r8
 8006210:	f7ff fee6 	bl	8005fe0 <_printf_common>
 8006214:	3001      	adds	r0, #1
 8006216:	d14a      	bne.n	80062ae <_printf_i+0x1f2>
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	b004      	add	sp, #16
 800621e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	f043 0320 	orr.w	r3, r3, #32
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	4833      	ldr	r0, [pc, #204]	@ (80062f8 <_printf_i+0x23c>)
 800622c:	2778      	movs	r7, #120	@ 0x78
 800622e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	6831      	ldr	r1, [r6, #0]
 8006236:	061f      	lsls	r7, r3, #24
 8006238:	f851 5b04 	ldr.w	r5, [r1], #4
 800623c:	d402      	bmi.n	8006244 <_printf_i+0x188>
 800623e:	065f      	lsls	r7, r3, #25
 8006240:	bf48      	it	mi
 8006242:	b2ad      	uxthmi	r5, r5
 8006244:	6031      	str	r1, [r6, #0]
 8006246:	07d9      	lsls	r1, r3, #31
 8006248:	bf44      	itt	mi
 800624a:	f043 0320 	orrmi.w	r3, r3, #32
 800624e:	6023      	strmi	r3, [r4, #0]
 8006250:	b11d      	cbz	r5, 800625a <_printf_i+0x19e>
 8006252:	2310      	movs	r3, #16
 8006254:	e7ac      	b.n	80061b0 <_printf_i+0xf4>
 8006256:	4827      	ldr	r0, [pc, #156]	@ (80062f4 <_printf_i+0x238>)
 8006258:	e7e9      	b.n	800622e <_printf_i+0x172>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	f023 0320 	bic.w	r3, r3, #32
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	e7f6      	b.n	8006252 <_printf_i+0x196>
 8006264:	4616      	mov	r6, r2
 8006266:	e7bd      	b.n	80061e4 <_printf_i+0x128>
 8006268:	6833      	ldr	r3, [r6, #0]
 800626a:	6825      	ldr	r5, [r4, #0]
 800626c:	6961      	ldr	r1, [r4, #20]
 800626e:	1d18      	adds	r0, r3, #4
 8006270:	6030      	str	r0, [r6, #0]
 8006272:	062e      	lsls	r6, r5, #24
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	d501      	bpl.n	800627c <_printf_i+0x1c0>
 8006278:	6019      	str	r1, [r3, #0]
 800627a:	e002      	b.n	8006282 <_printf_i+0x1c6>
 800627c:	0668      	lsls	r0, r5, #25
 800627e:	d5fb      	bpl.n	8006278 <_printf_i+0x1bc>
 8006280:	8019      	strh	r1, [r3, #0]
 8006282:	2300      	movs	r3, #0
 8006284:	6123      	str	r3, [r4, #16]
 8006286:	4616      	mov	r6, r2
 8006288:	e7bc      	b.n	8006204 <_printf_i+0x148>
 800628a:	6833      	ldr	r3, [r6, #0]
 800628c:	1d1a      	adds	r2, r3, #4
 800628e:	6032      	str	r2, [r6, #0]
 8006290:	681e      	ldr	r6, [r3, #0]
 8006292:	6862      	ldr	r2, [r4, #4]
 8006294:	2100      	movs	r1, #0
 8006296:	4630      	mov	r0, r6
 8006298:	f7f9 ff9a 	bl	80001d0 <memchr>
 800629c:	b108      	cbz	r0, 80062a2 <_printf_i+0x1e6>
 800629e:	1b80      	subs	r0, r0, r6
 80062a0:	6060      	str	r0, [r4, #4]
 80062a2:	6863      	ldr	r3, [r4, #4]
 80062a4:	6123      	str	r3, [r4, #16]
 80062a6:	2300      	movs	r3, #0
 80062a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062ac:	e7aa      	b.n	8006204 <_printf_i+0x148>
 80062ae:	6923      	ldr	r3, [r4, #16]
 80062b0:	4632      	mov	r2, r6
 80062b2:	4649      	mov	r1, r9
 80062b4:	4640      	mov	r0, r8
 80062b6:	47d0      	blx	sl
 80062b8:	3001      	adds	r0, #1
 80062ba:	d0ad      	beq.n	8006218 <_printf_i+0x15c>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	079b      	lsls	r3, r3, #30
 80062c0:	d413      	bmi.n	80062ea <_printf_i+0x22e>
 80062c2:	68e0      	ldr	r0, [r4, #12]
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	4298      	cmp	r0, r3
 80062c8:	bfb8      	it	lt
 80062ca:	4618      	movlt	r0, r3
 80062cc:	e7a6      	b.n	800621c <_printf_i+0x160>
 80062ce:	2301      	movs	r3, #1
 80062d0:	4632      	mov	r2, r6
 80062d2:	4649      	mov	r1, r9
 80062d4:	4640      	mov	r0, r8
 80062d6:	47d0      	blx	sl
 80062d8:	3001      	adds	r0, #1
 80062da:	d09d      	beq.n	8006218 <_printf_i+0x15c>
 80062dc:	3501      	adds	r5, #1
 80062de:	68e3      	ldr	r3, [r4, #12]
 80062e0:	9903      	ldr	r1, [sp, #12]
 80062e2:	1a5b      	subs	r3, r3, r1
 80062e4:	42ab      	cmp	r3, r5
 80062e6:	dcf2      	bgt.n	80062ce <_printf_i+0x212>
 80062e8:	e7eb      	b.n	80062c2 <_printf_i+0x206>
 80062ea:	2500      	movs	r5, #0
 80062ec:	f104 0619 	add.w	r6, r4, #25
 80062f0:	e7f5      	b.n	80062de <_printf_i+0x222>
 80062f2:	bf00      	nop
 80062f4:	08008766 	.word	0x08008766
 80062f8:	08008777 	.word	0x08008777

080062fc <std>:
 80062fc:	2300      	movs	r3, #0
 80062fe:	b510      	push	{r4, lr}
 8006300:	4604      	mov	r4, r0
 8006302:	e9c0 3300 	strd	r3, r3, [r0]
 8006306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800630a:	6083      	str	r3, [r0, #8]
 800630c:	8181      	strh	r1, [r0, #12]
 800630e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006310:	81c2      	strh	r2, [r0, #14]
 8006312:	6183      	str	r3, [r0, #24]
 8006314:	4619      	mov	r1, r3
 8006316:	2208      	movs	r2, #8
 8006318:	305c      	adds	r0, #92	@ 0x5c
 800631a:	f000 f914 	bl	8006546 <memset>
 800631e:	4b0d      	ldr	r3, [pc, #52]	@ (8006354 <std+0x58>)
 8006320:	6263      	str	r3, [r4, #36]	@ 0x24
 8006322:	4b0d      	ldr	r3, [pc, #52]	@ (8006358 <std+0x5c>)
 8006324:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006326:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <std+0x60>)
 8006328:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800632a:	4b0d      	ldr	r3, [pc, #52]	@ (8006360 <std+0x64>)
 800632c:	6323      	str	r3, [r4, #48]	@ 0x30
 800632e:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <std+0x68>)
 8006330:	6224      	str	r4, [r4, #32]
 8006332:	429c      	cmp	r4, r3
 8006334:	d006      	beq.n	8006344 <std+0x48>
 8006336:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800633a:	4294      	cmp	r4, r2
 800633c:	d002      	beq.n	8006344 <std+0x48>
 800633e:	33d0      	adds	r3, #208	@ 0xd0
 8006340:	429c      	cmp	r4, r3
 8006342:	d105      	bne.n	8006350 <std+0x54>
 8006344:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800634c:	f000 b978 	b.w	8006640 <__retarget_lock_init_recursive>
 8006350:	bd10      	pop	{r4, pc}
 8006352:	bf00      	nop
 8006354:	080064c1 	.word	0x080064c1
 8006358:	080064e3 	.word	0x080064e3
 800635c:	0800651b 	.word	0x0800651b
 8006360:	0800653f 	.word	0x0800653f
 8006364:	20000484 	.word	0x20000484

08006368 <stdio_exit_handler>:
 8006368:	4a02      	ldr	r2, [pc, #8]	@ (8006374 <stdio_exit_handler+0xc>)
 800636a:	4903      	ldr	r1, [pc, #12]	@ (8006378 <stdio_exit_handler+0x10>)
 800636c:	4803      	ldr	r0, [pc, #12]	@ (800637c <stdio_exit_handler+0x14>)
 800636e:	f000 b869 	b.w	8006444 <_fwalk_sglue>
 8006372:	bf00      	nop
 8006374:	2000000c 	.word	0x2000000c
 8006378:	08007f9d 	.word	0x08007f9d
 800637c:	2000001c 	.word	0x2000001c

08006380 <cleanup_stdio>:
 8006380:	6841      	ldr	r1, [r0, #4]
 8006382:	4b0c      	ldr	r3, [pc, #48]	@ (80063b4 <cleanup_stdio+0x34>)
 8006384:	4299      	cmp	r1, r3
 8006386:	b510      	push	{r4, lr}
 8006388:	4604      	mov	r4, r0
 800638a:	d001      	beq.n	8006390 <cleanup_stdio+0x10>
 800638c:	f001 fe06 	bl	8007f9c <_fflush_r>
 8006390:	68a1      	ldr	r1, [r4, #8]
 8006392:	4b09      	ldr	r3, [pc, #36]	@ (80063b8 <cleanup_stdio+0x38>)
 8006394:	4299      	cmp	r1, r3
 8006396:	d002      	beq.n	800639e <cleanup_stdio+0x1e>
 8006398:	4620      	mov	r0, r4
 800639a:	f001 fdff 	bl	8007f9c <_fflush_r>
 800639e:	68e1      	ldr	r1, [r4, #12]
 80063a0:	4b06      	ldr	r3, [pc, #24]	@ (80063bc <cleanup_stdio+0x3c>)
 80063a2:	4299      	cmp	r1, r3
 80063a4:	d004      	beq.n	80063b0 <cleanup_stdio+0x30>
 80063a6:	4620      	mov	r0, r4
 80063a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ac:	f001 bdf6 	b.w	8007f9c <_fflush_r>
 80063b0:	bd10      	pop	{r4, pc}
 80063b2:	bf00      	nop
 80063b4:	20000484 	.word	0x20000484
 80063b8:	200004ec 	.word	0x200004ec
 80063bc:	20000554 	.word	0x20000554

080063c0 <global_stdio_init.part.0>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	4b0b      	ldr	r3, [pc, #44]	@ (80063f0 <global_stdio_init.part.0+0x30>)
 80063c4:	4c0b      	ldr	r4, [pc, #44]	@ (80063f4 <global_stdio_init.part.0+0x34>)
 80063c6:	4a0c      	ldr	r2, [pc, #48]	@ (80063f8 <global_stdio_init.part.0+0x38>)
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	4620      	mov	r0, r4
 80063cc:	2200      	movs	r2, #0
 80063ce:	2104      	movs	r1, #4
 80063d0:	f7ff ff94 	bl	80062fc <std>
 80063d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063d8:	2201      	movs	r2, #1
 80063da:	2109      	movs	r1, #9
 80063dc:	f7ff ff8e 	bl	80062fc <std>
 80063e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063e4:	2202      	movs	r2, #2
 80063e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063ea:	2112      	movs	r1, #18
 80063ec:	f7ff bf86 	b.w	80062fc <std>
 80063f0:	200005bc 	.word	0x200005bc
 80063f4:	20000484 	.word	0x20000484
 80063f8:	08006369 	.word	0x08006369

080063fc <__sfp_lock_acquire>:
 80063fc:	4801      	ldr	r0, [pc, #4]	@ (8006404 <__sfp_lock_acquire+0x8>)
 80063fe:	f000 b920 	b.w	8006642 <__retarget_lock_acquire_recursive>
 8006402:	bf00      	nop
 8006404:	200005c5 	.word	0x200005c5

08006408 <__sfp_lock_release>:
 8006408:	4801      	ldr	r0, [pc, #4]	@ (8006410 <__sfp_lock_release+0x8>)
 800640a:	f000 b91b 	b.w	8006644 <__retarget_lock_release_recursive>
 800640e:	bf00      	nop
 8006410:	200005c5 	.word	0x200005c5

08006414 <__sinit>:
 8006414:	b510      	push	{r4, lr}
 8006416:	4604      	mov	r4, r0
 8006418:	f7ff fff0 	bl	80063fc <__sfp_lock_acquire>
 800641c:	6a23      	ldr	r3, [r4, #32]
 800641e:	b11b      	cbz	r3, 8006428 <__sinit+0x14>
 8006420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006424:	f7ff bff0 	b.w	8006408 <__sfp_lock_release>
 8006428:	4b04      	ldr	r3, [pc, #16]	@ (800643c <__sinit+0x28>)
 800642a:	6223      	str	r3, [r4, #32]
 800642c:	4b04      	ldr	r3, [pc, #16]	@ (8006440 <__sinit+0x2c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1f5      	bne.n	8006420 <__sinit+0xc>
 8006434:	f7ff ffc4 	bl	80063c0 <global_stdio_init.part.0>
 8006438:	e7f2      	b.n	8006420 <__sinit+0xc>
 800643a:	bf00      	nop
 800643c:	08006381 	.word	0x08006381
 8006440:	200005bc 	.word	0x200005bc

08006444 <_fwalk_sglue>:
 8006444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006448:	4607      	mov	r7, r0
 800644a:	4688      	mov	r8, r1
 800644c:	4614      	mov	r4, r2
 800644e:	2600      	movs	r6, #0
 8006450:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006454:	f1b9 0901 	subs.w	r9, r9, #1
 8006458:	d505      	bpl.n	8006466 <_fwalk_sglue+0x22>
 800645a:	6824      	ldr	r4, [r4, #0]
 800645c:	2c00      	cmp	r4, #0
 800645e:	d1f7      	bne.n	8006450 <_fwalk_sglue+0xc>
 8006460:	4630      	mov	r0, r6
 8006462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006466:	89ab      	ldrh	r3, [r5, #12]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d907      	bls.n	800647c <_fwalk_sglue+0x38>
 800646c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006470:	3301      	adds	r3, #1
 8006472:	d003      	beq.n	800647c <_fwalk_sglue+0x38>
 8006474:	4629      	mov	r1, r5
 8006476:	4638      	mov	r0, r7
 8006478:	47c0      	blx	r8
 800647a:	4306      	orrs	r6, r0
 800647c:	3568      	adds	r5, #104	@ 0x68
 800647e:	e7e9      	b.n	8006454 <_fwalk_sglue+0x10>

08006480 <siprintf>:
 8006480:	b40e      	push	{r1, r2, r3}
 8006482:	b500      	push	{lr}
 8006484:	b09c      	sub	sp, #112	@ 0x70
 8006486:	ab1d      	add	r3, sp, #116	@ 0x74
 8006488:	9002      	str	r0, [sp, #8]
 800648a:	9006      	str	r0, [sp, #24]
 800648c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006490:	4809      	ldr	r0, [pc, #36]	@ (80064b8 <siprintf+0x38>)
 8006492:	9107      	str	r1, [sp, #28]
 8006494:	9104      	str	r1, [sp, #16]
 8006496:	4909      	ldr	r1, [pc, #36]	@ (80064bc <siprintf+0x3c>)
 8006498:	f853 2b04 	ldr.w	r2, [r3], #4
 800649c:	9105      	str	r1, [sp, #20]
 800649e:	6800      	ldr	r0, [r0, #0]
 80064a0:	9301      	str	r3, [sp, #4]
 80064a2:	a902      	add	r1, sp, #8
 80064a4:	f001 fbfa 	bl	8007c9c <_svfiprintf_r>
 80064a8:	9b02      	ldr	r3, [sp, #8]
 80064aa:	2200      	movs	r2, #0
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	b01c      	add	sp, #112	@ 0x70
 80064b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064b4:	b003      	add	sp, #12
 80064b6:	4770      	bx	lr
 80064b8:	20000018 	.word	0x20000018
 80064bc:	ffff0208 	.word	0xffff0208

080064c0 <__sread>:
 80064c0:	b510      	push	{r4, lr}
 80064c2:	460c      	mov	r4, r1
 80064c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c8:	f000 f86c 	bl	80065a4 <_read_r>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	bfab      	itete	ge
 80064d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064d2:	89a3      	ldrhlt	r3, [r4, #12]
 80064d4:	181b      	addge	r3, r3, r0
 80064d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064da:	bfac      	ite	ge
 80064dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064de:	81a3      	strhlt	r3, [r4, #12]
 80064e0:	bd10      	pop	{r4, pc}

080064e2 <__swrite>:
 80064e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e6:	461f      	mov	r7, r3
 80064e8:	898b      	ldrh	r3, [r1, #12]
 80064ea:	05db      	lsls	r3, r3, #23
 80064ec:	4605      	mov	r5, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	4616      	mov	r6, r2
 80064f2:	d505      	bpl.n	8006500 <__swrite+0x1e>
 80064f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f8:	2302      	movs	r3, #2
 80064fa:	2200      	movs	r2, #0
 80064fc:	f000 f840 	bl	8006580 <_lseek_r>
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006506:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	4632      	mov	r2, r6
 800650e:	463b      	mov	r3, r7
 8006510:	4628      	mov	r0, r5
 8006512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006516:	f000 b857 	b.w	80065c8 <_write_r>

0800651a <__sseek>:
 800651a:	b510      	push	{r4, lr}
 800651c:	460c      	mov	r4, r1
 800651e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006522:	f000 f82d 	bl	8006580 <_lseek_r>
 8006526:	1c43      	adds	r3, r0, #1
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	bf15      	itete	ne
 800652c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800652e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006532:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006536:	81a3      	strheq	r3, [r4, #12]
 8006538:	bf18      	it	ne
 800653a:	81a3      	strhne	r3, [r4, #12]
 800653c:	bd10      	pop	{r4, pc}

0800653e <__sclose>:
 800653e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006542:	f000 b80d 	b.w	8006560 <_close_r>

08006546 <memset>:
 8006546:	4402      	add	r2, r0
 8006548:	4603      	mov	r3, r0
 800654a:	4293      	cmp	r3, r2
 800654c:	d100      	bne.n	8006550 <memset+0xa>
 800654e:	4770      	bx	lr
 8006550:	f803 1b01 	strb.w	r1, [r3], #1
 8006554:	e7f9      	b.n	800654a <memset+0x4>
	...

08006558 <_localeconv_r>:
 8006558:	4800      	ldr	r0, [pc, #0]	@ (800655c <_localeconv_r+0x4>)
 800655a:	4770      	bx	lr
 800655c:	20000158 	.word	0x20000158

08006560 <_close_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4d06      	ldr	r5, [pc, #24]	@ (800657c <_close_r+0x1c>)
 8006564:	2300      	movs	r3, #0
 8006566:	4604      	mov	r4, r0
 8006568:	4608      	mov	r0, r1
 800656a:	602b      	str	r3, [r5, #0]
 800656c:	f7fb fc62 	bl	8001e34 <_close>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_close_r+0x1a>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	b103      	cbz	r3, 800657a <_close_r+0x1a>
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	200005c0 	.word	0x200005c0

08006580 <_lseek_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4d07      	ldr	r5, [pc, #28]	@ (80065a0 <_lseek_r+0x20>)
 8006584:	4604      	mov	r4, r0
 8006586:	4608      	mov	r0, r1
 8006588:	4611      	mov	r1, r2
 800658a:	2200      	movs	r2, #0
 800658c:	602a      	str	r2, [r5, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	f7fb fc77 	bl	8001e82 <_lseek>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d102      	bne.n	800659e <_lseek_r+0x1e>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	b103      	cbz	r3, 800659e <_lseek_r+0x1e>
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	200005c0 	.word	0x200005c0

080065a4 <_read_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4d07      	ldr	r5, [pc, #28]	@ (80065c4 <_read_r+0x20>)
 80065a8:	4604      	mov	r4, r0
 80065aa:	4608      	mov	r0, r1
 80065ac:	4611      	mov	r1, r2
 80065ae:	2200      	movs	r2, #0
 80065b0:	602a      	str	r2, [r5, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f7fb fc05 	bl	8001dc2 <_read>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_read_r+0x1e>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_read_r+0x1e>
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	200005c0 	.word	0x200005c0

080065c8 <_write_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4d07      	ldr	r5, [pc, #28]	@ (80065e8 <_write_r+0x20>)
 80065cc:	4604      	mov	r4, r0
 80065ce:	4608      	mov	r0, r1
 80065d0:	4611      	mov	r1, r2
 80065d2:	2200      	movs	r2, #0
 80065d4:	602a      	str	r2, [r5, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	f7fb fc10 	bl	8001dfc <_write>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_write_r+0x1e>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_write_r+0x1e>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	200005c0 	.word	0x200005c0

080065ec <__errno>:
 80065ec:	4b01      	ldr	r3, [pc, #4]	@ (80065f4 <__errno+0x8>)
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	20000018 	.word	0x20000018

080065f8 <__libc_init_array>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006630 <__libc_init_array+0x38>)
 80065fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006634 <__libc_init_array+0x3c>)
 80065fe:	1b64      	subs	r4, r4, r5
 8006600:	10a4      	asrs	r4, r4, #2
 8006602:	2600      	movs	r6, #0
 8006604:	42a6      	cmp	r6, r4
 8006606:	d109      	bne.n	800661c <__libc_init_array+0x24>
 8006608:	4d0b      	ldr	r5, [pc, #44]	@ (8006638 <__libc_init_array+0x40>)
 800660a:	4c0c      	ldr	r4, [pc, #48]	@ (800663c <__libc_init_array+0x44>)
 800660c:	f002 f864 	bl	80086d8 <_init>
 8006610:	1b64      	subs	r4, r4, r5
 8006612:	10a4      	asrs	r4, r4, #2
 8006614:	2600      	movs	r6, #0
 8006616:	42a6      	cmp	r6, r4
 8006618:	d105      	bne.n	8006626 <__libc_init_array+0x2e>
 800661a:	bd70      	pop	{r4, r5, r6, pc}
 800661c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006620:	4798      	blx	r3
 8006622:	3601      	adds	r6, #1
 8006624:	e7ee      	b.n	8006604 <__libc_init_array+0xc>
 8006626:	f855 3b04 	ldr.w	r3, [r5], #4
 800662a:	4798      	blx	r3
 800662c:	3601      	adds	r6, #1
 800662e:	e7f2      	b.n	8006616 <__libc_init_array+0x1e>
 8006630:	08008ad0 	.word	0x08008ad0
 8006634:	08008ad0 	.word	0x08008ad0
 8006638:	08008ad0 	.word	0x08008ad0
 800663c:	08008ad4 	.word	0x08008ad4

08006640 <__retarget_lock_init_recursive>:
 8006640:	4770      	bx	lr

08006642 <__retarget_lock_acquire_recursive>:
 8006642:	4770      	bx	lr

08006644 <__retarget_lock_release_recursive>:
 8006644:	4770      	bx	lr

08006646 <quorem>:
 8006646:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664a:	6903      	ldr	r3, [r0, #16]
 800664c:	690c      	ldr	r4, [r1, #16]
 800664e:	42a3      	cmp	r3, r4
 8006650:	4607      	mov	r7, r0
 8006652:	db7e      	blt.n	8006752 <quorem+0x10c>
 8006654:	3c01      	subs	r4, #1
 8006656:	f101 0814 	add.w	r8, r1, #20
 800665a:	00a3      	lsls	r3, r4, #2
 800665c:	f100 0514 	add.w	r5, r0, #20
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800666c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006670:	3301      	adds	r3, #1
 8006672:	429a      	cmp	r2, r3
 8006674:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006678:	fbb2 f6f3 	udiv	r6, r2, r3
 800667c:	d32e      	bcc.n	80066dc <quorem+0x96>
 800667e:	f04f 0a00 	mov.w	sl, #0
 8006682:	46c4      	mov	ip, r8
 8006684:	46ae      	mov	lr, r5
 8006686:	46d3      	mov	fp, sl
 8006688:	f85c 3b04 	ldr.w	r3, [ip], #4
 800668c:	b298      	uxth	r0, r3
 800668e:	fb06 a000 	mla	r0, r6, r0, sl
 8006692:	0c02      	lsrs	r2, r0, #16
 8006694:	0c1b      	lsrs	r3, r3, #16
 8006696:	fb06 2303 	mla	r3, r6, r3, r2
 800669a:	f8de 2000 	ldr.w	r2, [lr]
 800669e:	b280      	uxth	r0, r0
 80066a0:	b292      	uxth	r2, r2
 80066a2:	1a12      	subs	r2, r2, r0
 80066a4:	445a      	add	r2, fp
 80066a6:	f8de 0000 	ldr.w	r0, [lr]
 80066aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80066b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80066b8:	b292      	uxth	r2, r2
 80066ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80066be:	45e1      	cmp	r9, ip
 80066c0:	f84e 2b04 	str.w	r2, [lr], #4
 80066c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80066c8:	d2de      	bcs.n	8006688 <quorem+0x42>
 80066ca:	9b00      	ldr	r3, [sp, #0]
 80066cc:	58eb      	ldr	r3, [r5, r3]
 80066ce:	b92b      	cbnz	r3, 80066dc <quorem+0x96>
 80066d0:	9b01      	ldr	r3, [sp, #4]
 80066d2:	3b04      	subs	r3, #4
 80066d4:	429d      	cmp	r5, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	d32f      	bcc.n	800673a <quorem+0xf4>
 80066da:	613c      	str	r4, [r7, #16]
 80066dc:	4638      	mov	r0, r7
 80066de:	f001 f979 	bl	80079d4 <__mcmp>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	db25      	blt.n	8006732 <quorem+0xec>
 80066e6:	4629      	mov	r1, r5
 80066e8:	2000      	movs	r0, #0
 80066ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80066ee:	f8d1 c000 	ldr.w	ip, [r1]
 80066f2:	fa1f fe82 	uxth.w	lr, r2
 80066f6:	fa1f f38c 	uxth.w	r3, ip
 80066fa:	eba3 030e 	sub.w	r3, r3, lr
 80066fe:	4403      	add	r3, r0
 8006700:	0c12      	lsrs	r2, r2, #16
 8006702:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006706:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800670a:	b29b      	uxth	r3, r3
 800670c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006710:	45c1      	cmp	r9, r8
 8006712:	f841 3b04 	str.w	r3, [r1], #4
 8006716:	ea4f 4022 	mov.w	r0, r2, asr #16
 800671a:	d2e6      	bcs.n	80066ea <quorem+0xa4>
 800671c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006720:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006724:	b922      	cbnz	r2, 8006730 <quorem+0xea>
 8006726:	3b04      	subs	r3, #4
 8006728:	429d      	cmp	r5, r3
 800672a:	461a      	mov	r2, r3
 800672c:	d30b      	bcc.n	8006746 <quorem+0x100>
 800672e:	613c      	str	r4, [r7, #16]
 8006730:	3601      	adds	r6, #1
 8006732:	4630      	mov	r0, r6
 8006734:	b003      	add	sp, #12
 8006736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	3b04      	subs	r3, #4
 800673e:	2a00      	cmp	r2, #0
 8006740:	d1cb      	bne.n	80066da <quorem+0x94>
 8006742:	3c01      	subs	r4, #1
 8006744:	e7c6      	b.n	80066d4 <quorem+0x8e>
 8006746:	6812      	ldr	r2, [r2, #0]
 8006748:	3b04      	subs	r3, #4
 800674a:	2a00      	cmp	r2, #0
 800674c:	d1ef      	bne.n	800672e <quorem+0xe8>
 800674e:	3c01      	subs	r4, #1
 8006750:	e7ea      	b.n	8006728 <quorem+0xe2>
 8006752:	2000      	movs	r0, #0
 8006754:	e7ee      	b.n	8006734 <quorem+0xee>
	...

08006758 <_dtoa_r>:
 8006758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	69c7      	ldr	r7, [r0, #28]
 800675e:	b099      	sub	sp, #100	@ 0x64
 8006760:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006764:	ec55 4b10 	vmov	r4, r5, d0
 8006768:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800676a:	9109      	str	r1, [sp, #36]	@ 0x24
 800676c:	4683      	mov	fp, r0
 800676e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006770:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006772:	b97f      	cbnz	r7, 8006794 <_dtoa_r+0x3c>
 8006774:	2010      	movs	r0, #16
 8006776:	f000 fdfd 	bl	8007374 <malloc>
 800677a:	4602      	mov	r2, r0
 800677c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006780:	b920      	cbnz	r0, 800678c <_dtoa_r+0x34>
 8006782:	4ba7      	ldr	r3, [pc, #668]	@ (8006a20 <_dtoa_r+0x2c8>)
 8006784:	21ef      	movs	r1, #239	@ 0xef
 8006786:	48a7      	ldr	r0, [pc, #668]	@ (8006a24 <_dtoa_r+0x2cc>)
 8006788:	f001 fc68 	bl	800805c <__assert_func>
 800678c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006790:	6007      	str	r7, [r0, #0]
 8006792:	60c7      	str	r7, [r0, #12]
 8006794:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006798:	6819      	ldr	r1, [r3, #0]
 800679a:	b159      	cbz	r1, 80067b4 <_dtoa_r+0x5c>
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	604a      	str	r2, [r1, #4]
 80067a0:	2301      	movs	r3, #1
 80067a2:	4093      	lsls	r3, r2
 80067a4:	608b      	str	r3, [r1, #8]
 80067a6:	4658      	mov	r0, fp
 80067a8:	f000 feda 	bl	8007560 <_Bfree>
 80067ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	1e2b      	subs	r3, r5, #0
 80067b6:	bfb9      	ittee	lt
 80067b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80067bc:	9303      	strlt	r3, [sp, #12]
 80067be:	2300      	movge	r3, #0
 80067c0:	6033      	strge	r3, [r6, #0]
 80067c2:	9f03      	ldr	r7, [sp, #12]
 80067c4:	4b98      	ldr	r3, [pc, #608]	@ (8006a28 <_dtoa_r+0x2d0>)
 80067c6:	bfbc      	itt	lt
 80067c8:	2201      	movlt	r2, #1
 80067ca:	6032      	strlt	r2, [r6, #0]
 80067cc:	43bb      	bics	r3, r7
 80067ce:	d112      	bne.n	80067f6 <_dtoa_r+0x9e>
 80067d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80067d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067dc:	4323      	orrs	r3, r4
 80067de:	f000 854d 	beq.w	800727c <_dtoa_r+0xb24>
 80067e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006a3c <_dtoa_r+0x2e4>
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 854f 	beq.w	800728c <_dtoa_r+0xb34>
 80067ee:	f10a 0303 	add.w	r3, sl, #3
 80067f2:	f000 bd49 	b.w	8007288 <_dtoa_r+0xb30>
 80067f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067fa:	2200      	movs	r2, #0
 80067fc:	ec51 0b17 	vmov	r0, r1, d7
 8006800:	2300      	movs	r3, #0
 8006802:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006806:	f7fa f95f 	bl	8000ac8 <__aeabi_dcmpeq>
 800680a:	4680      	mov	r8, r0
 800680c:	b158      	cbz	r0, 8006826 <_dtoa_r+0xce>
 800680e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006810:	2301      	movs	r3, #1
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006816:	b113      	cbz	r3, 800681e <_dtoa_r+0xc6>
 8006818:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800681a:	4b84      	ldr	r3, [pc, #528]	@ (8006a2c <_dtoa_r+0x2d4>)
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006a40 <_dtoa_r+0x2e8>
 8006822:	f000 bd33 	b.w	800728c <_dtoa_r+0xb34>
 8006826:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800682a:	aa16      	add	r2, sp, #88	@ 0x58
 800682c:	a917      	add	r1, sp, #92	@ 0x5c
 800682e:	4658      	mov	r0, fp
 8006830:	f001 f980 	bl	8007b34 <__d2b>
 8006834:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006838:	4681      	mov	r9, r0
 800683a:	2e00      	cmp	r6, #0
 800683c:	d077      	beq.n	800692e <_dtoa_r+0x1d6>
 800683e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006840:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800684c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006850:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006854:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006858:	4619      	mov	r1, r3
 800685a:	2200      	movs	r2, #0
 800685c:	4b74      	ldr	r3, [pc, #464]	@ (8006a30 <_dtoa_r+0x2d8>)
 800685e:	f7f9 fd13 	bl	8000288 <__aeabi_dsub>
 8006862:	a369      	add	r3, pc, #420	@ (adr r3, 8006a08 <_dtoa_r+0x2b0>)
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f7f9 fec6 	bl	80005f8 <__aeabi_dmul>
 800686c:	a368      	add	r3, pc, #416	@ (adr r3, 8006a10 <_dtoa_r+0x2b8>)
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f7f9 fd0b 	bl	800028c <__adddf3>
 8006876:	4604      	mov	r4, r0
 8006878:	4630      	mov	r0, r6
 800687a:	460d      	mov	r5, r1
 800687c:	f7f9 fe52 	bl	8000524 <__aeabi_i2d>
 8006880:	a365      	add	r3, pc, #404	@ (adr r3, 8006a18 <_dtoa_r+0x2c0>)
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	f7f9 feb7 	bl	80005f8 <__aeabi_dmul>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4620      	mov	r0, r4
 8006890:	4629      	mov	r1, r5
 8006892:	f7f9 fcfb 	bl	800028c <__adddf3>
 8006896:	4604      	mov	r4, r0
 8006898:	460d      	mov	r5, r1
 800689a:	f7fa f95d 	bl	8000b58 <__aeabi_d2iz>
 800689e:	2200      	movs	r2, #0
 80068a0:	4607      	mov	r7, r0
 80068a2:	2300      	movs	r3, #0
 80068a4:	4620      	mov	r0, r4
 80068a6:	4629      	mov	r1, r5
 80068a8:	f7fa f918 	bl	8000adc <__aeabi_dcmplt>
 80068ac:	b140      	cbz	r0, 80068c0 <_dtoa_r+0x168>
 80068ae:	4638      	mov	r0, r7
 80068b0:	f7f9 fe38 	bl	8000524 <__aeabi_i2d>
 80068b4:	4622      	mov	r2, r4
 80068b6:	462b      	mov	r3, r5
 80068b8:	f7fa f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80068bc:	b900      	cbnz	r0, 80068c0 <_dtoa_r+0x168>
 80068be:	3f01      	subs	r7, #1
 80068c0:	2f16      	cmp	r7, #22
 80068c2:	d851      	bhi.n	8006968 <_dtoa_r+0x210>
 80068c4:	4b5b      	ldr	r3, [pc, #364]	@ (8006a34 <_dtoa_r+0x2dc>)
 80068c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068d2:	f7fa f903 	bl	8000adc <__aeabi_dcmplt>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d048      	beq.n	800696c <_dtoa_r+0x214>
 80068da:	3f01      	subs	r7, #1
 80068dc:	2300      	movs	r3, #0
 80068de:	9312      	str	r3, [sp, #72]	@ 0x48
 80068e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80068e2:	1b9b      	subs	r3, r3, r6
 80068e4:	1e5a      	subs	r2, r3, #1
 80068e6:	bf44      	itt	mi
 80068e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80068ec:	2300      	movmi	r3, #0
 80068ee:	9208      	str	r2, [sp, #32]
 80068f0:	bf54      	ite	pl
 80068f2:	f04f 0800 	movpl.w	r8, #0
 80068f6:	9308      	strmi	r3, [sp, #32]
 80068f8:	2f00      	cmp	r7, #0
 80068fa:	db39      	blt.n	8006970 <_dtoa_r+0x218>
 80068fc:	9b08      	ldr	r3, [sp, #32]
 80068fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006900:	443b      	add	r3, r7
 8006902:	9308      	str	r3, [sp, #32]
 8006904:	2300      	movs	r3, #0
 8006906:	930a      	str	r3, [sp, #40]	@ 0x28
 8006908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800690a:	2b09      	cmp	r3, #9
 800690c:	d864      	bhi.n	80069d8 <_dtoa_r+0x280>
 800690e:	2b05      	cmp	r3, #5
 8006910:	bfc4      	itt	gt
 8006912:	3b04      	subgt	r3, #4
 8006914:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006918:	f1a3 0302 	sub.w	r3, r3, #2
 800691c:	bfcc      	ite	gt
 800691e:	2400      	movgt	r4, #0
 8006920:	2401      	movle	r4, #1
 8006922:	2b03      	cmp	r3, #3
 8006924:	d863      	bhi.n	80069ee <_dtoa_r+0x296>
 8006926:	e8df f003 	tbb	[pc, r3]
 800692a:	372a      	.short	0x372a
 800692c:	5535      	.short	0x5535
 800692e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006932:	441e      	add	r6, r3
 8006934:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006938:	2b20      	cmp	r3, #32
 800693a:	bfc1      	itttt	gt
 800693c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006940:	409f      	lslgt	r7, r3
 8006942:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006946:	fa24 f303 	lsrgt.w	r3, r4, r3
 800694a:	bfd6      	itet	le
 800694c:	f1c3 0320 	rsble	r3, r3, #32
 8006950:	ea47 0003 	orrgt.w	r0, r7, r3
 8006954:	fa04 f003 	lslle.w	r0, r4, r3
 8006958:	f7f9 fdd4 	bl	8000504 <__aeabi_ui2d>
 800695c:	2201      	movs	r2, #1
 800695e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006962:	3e01      	subs	r6, #1
 8006964:	9214      	str	r2, [sp, #80]	@ 0x50
 8006966:	e777      	b.n	8006858 <_dtoa_r+0x100>
 8006968:	2301      	movs	r3, #1
 800696a:	e7b8      	b.n	80068de <_dtoa_r+0x186>
 800696c:	9012      	str	r0, [sp, #72]	@ 0x48
 800696e:	e7b7      	b.n	80068e0 <_dtoa_r+0x188>
 8006970:	427b      	negs	r3, r7
 8006972:	930a      	str	r3, [sp, #40]	@ 0x28
 8006974:	2300      	movs	r3, #0
 8006976:	eba8 0807 	sub.w	r8, r8, r7
 800697a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800697c:	e7c4      	b.n	8006908 <_dtoa_r+0x1b0>
 800697e:	2300      	movs	r3, #0
 8006980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	dc35      	bgt.n	80069f4 <_dtoa_r+0x29c>
 8006988:	2301      	movs	r3, #1
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	9307      	str	r3, [sp, #28]
 800698e:	461a      	mov	r2, r3
 8006990:	920e      	str	r2, [sp, #56]	@ 0x38
 8006992:	e00b      	b.n	80069ac <_dtoa_r+0x254>
 8006994:	2301      	movs	r3, #1
 8006996:	e7f3      	b.n	8006980 <_dtoa_r+0x228>
 8006998:	2300      	movs	r3, #0
 800699a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800699c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	3301      	adds	r3, #1
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	9307      	str	r3, [sp, #28]
 80069a8:	bfb8      	it	lt
 80069aa:	2301      	movlt	r3, #1
 80069ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80069b0:	2100      	movs	r1, #0
 80069b2:	2204      	movs	r2, #4
 80069b4:	f102 0514 	add.w	r5, r2, #20
 80069b8:	429d      	cmp	r5, r3
 80069ba:	d91f      	bls.n	80069fc <_dtoa_r+0x2a4>
 80069bc:	6041      	str	r1, [r0, #4]
 80069be:	4658      	mov	r0, fp
 80069c0:	f000 fd8e 	bl	80074e0 <_Balloc>
 80069c4:	4682      	mov	sl, r0
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d13c      	bne.n	8006a44 <_dtoa_r+0x2ec>
 80069ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006a38 <_dtoa_r+0x2e0>)
 80069cc:	4602      	mov	r2, r0
 80069ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80069d2:	e6d8      	b.n	8006786 <_dtoa_r+0x2e>
 80069d4:	2301      	movs	r3, #1
 80069d6:	e7e0      	b.n	800699a <_dtoa_r+0x242>
 80069d8:	2401      	movs	r4, #1
 80069da:	2300      	movs	r3, #0
 80069dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80069de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069e0:	f04f 33ff 	mov.w	r3, #4294967295
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	9307      	str	r3, [sp, #28]
 80069e8:	2200      	movs	r2, #0
 80069ea:	2312      	movs	r3, #18
 80069ec:	e7d0      	b.n	8006990 <_dtoa_r+0x238>
 80069ee:	2301      	movs	r3, #1
 80069f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069f2:	e7f5      	b.n	80069e0 <_dtoa_r+0x288>
 80069f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	9307      	str	r3, [sp, #28]
 80069fa:	e7d7      	b.n	80069ac <_dtoa_r+0x254>
 80069fc:	3101      	adds	r1, #1
 80069fe:	0052      	lsls	r2, r2, #1
 8006a00:	e7d8      	b.n	80069b4 <_dtoa_r+0x25c>
 8006a02:	bf00      	nop
 8006a04:	f3af 8000 	nop.w
 8006a08:	636f4361 	.word	0x636f4361
 8006a0c:	3fd287a7 	.word	0x3fd287a7
 8006a10:	8b60c8b3 	.word	0x8b60c8b3
 8006a14:	3fc68a28 	.word	0x3fc68a28
 8006a18:	509f79fb 	.word	0x509f79fb
 8006a1c:	3fd34413 	.word	0x3fd34413
 8006a20:	08008795 	.word	0x08008795
 8006a24:	080087ac 	.word	0x080087ac
 8006a28:	7ff00000 	.word	0x7ff00000
 8006a2c:	08008765 	.word	0x08008765
 8006a30:	3ff80000 	.word	0x3ff80000
 8006a34:	080088a8 	.word	0x080088a8
 8006a38:	08008804 	.word	0x08008804
 8006a3c:	08008791 	.word	0x08008791
 8006a40:	08008764 	.word	0x08008764
 8006a44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a48:	6018      	str	r0, [r3, #0]
 8006a4a:	9b07      	ldr	r3, [sp, #28]
 8006a4c:	2b0e      	cmp	r3, #14
 8006a4e:	f200 80a4 	bhi.w	8006b9a <_dtoa_r+0x442>
 8006a52:	2c00      	cmp	r4, #0
 8006a54:	f000 80a1 	beq.w	8006b9a <_dtoa_r+0x442>
 8006a58:	2f00      	cmp	r7, #0
 8006a5a:	dd33      	ble.n	8006ac4 <_dtoa_r+0x36c>
 8006a5c:	4bad      	ldr	r3, [pc, #692]	@ (8006d14 <_dtoa_r+0x5bc>)
 8006a5e:	f007 020f 	and.w	r2, r7, #15
 8006a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a66:	ed93 7b00 	vldr	d7, [r3]
 8006a6a:	05f8      	lsls	r0, r7, #23
 8006a6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a74:	d516      	bpl.n	8006aa4 <_dtoa_r+0x34c>
 8006a76:	4ba8      	ldr	r3, [pc, #672]	@ (8006d18 <_dtoa_r+0x5c0>)
 8006a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a80:	f7f9 fee4 	bl	800084c <__aeabi_ddiv>
 8006a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a88:	f004 040f 	and.w	r4, r4, #15
 8006a8c:	2603      	movs	r6, #3
 8006a8e:	4da2      	ldr	r5, [pc, #648]	@ (8006d18 <_dtoa_r+0x5c0>)
 8006a90:	b954      	cbnz	r4, 8006aa8 <_dtoa_r+0x350>
 8006a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a9a:	f7f9 fed7 	bl	800084c <__aeabi_ddiv>
 8006a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aa2:	e028      	b.n	8006af6 <_dtoa_r+0x39e>
 8006aa4:	2602      	movs	r6, #2
 8006aa6:	e7f2      	b.n	8006a8e <_dtoa_r+0x336>
 8006aa8:	07e1      	lsls	r1, r4, #31
 8006aaa:	d508      	bpl.n	8006abe <_dtoa_r+0x366>
 8006aac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ab4:	f7f9 fda0 	bl	80005f8 <__aeabi_dmul>
 8006ab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006abc:	3601      	adds	r6, #1
 8006abe:	1064      	asrs	r4, r4, #1
 8006ac0:	3508      	adds	r5, #8
 8006ac2:	e7e5      	b.n	8006a90 <_dtoa_r+0x338>
 8006ac4:	f000 80d2 	beq.w	8006c6c <_dtoa_r+0x514>
 8006ac8:	427c      	negs	r4, r7
 8006aca:	4b92      	ldr	r3, [pc, #584]	@ (8006d14 <_dtoa_r+0x5bc>)
 8006acc:	4d92      	ldr	r5, [pc, #584]	@ (8006d18 <_dtoa_r+0x5c0>)
 8006ace:	f004 020f 	and.w	r2, r4, #15
 8006ad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ade:	f7f9 fd8b 	bl	80005f8 <__aeabi_dmul>
 8006ae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ae6:	1124      	asrs	r4, r4, #4
 8006ae8:	2300      	movs	r3, #0
 8006aea:	2602      	movs	r6, #2
 8006aec:	2c00      	cmp	r4, #0
 8006aee:	f040 80b2 	bne.w	8006c56 <_dtoa_r+0x4fe>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1d3      	bne.n	8006a9e <_dtoa_r+0x346>
 8006af6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006af8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 80b7 	beq.w	8006c70 <_dtoa_r+0x518>
 8006b02:	4b86      	ldr	r3, [pc, #536]	@ (8006d1c <_dtoa_r+0x5c4>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	4620      	mov	r0, r4
 8006b08:	4629      	mov	r1, r5
 8006b0a:	f7f9 ffe7 	bl	8000adc <__aeabi_dcmplt>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	f000 80ae 	beq.w	8006c70 <_dtoa_r+0x518>
 8006b14:	9b07      	ldr	r3, [sp, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 80aa 	beq.w	8006c70 <_dtoa_r+0x518>
 8006b1c:	9b00      	ldr	r3, [sp, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	dd37      	ble.n	8006b92 <_dtoa_r+0x43a>
 8006b22:	1e7b      	subs	r3, r7, #1
 8006b24:	9304      	str	r3, [sp, #16]
 8006b26:	4620      	mov	r0, r4
 8006b28:	4b7d      	ldr	r3, [pc, #500]	@ (8006d20 <_dtoa_r+0x5c8>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7f9 fd63 	bl	80005f8 <__aeabi_dmul>
 8006b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b36:	9c00      	ldr	r4, [sp, #0]
 8006b38:	3601      	adds	r6, #1
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f7f9 fcf2 	bl	8000524 <__aeabi_i2d>
 8006b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b44:	f7f9 fd58 	bl	80005f8 <__aeabi_dmul>
 8006b48:	4b76      	ldr	r3, [pc, #472]	@ (8006d24 <_dtoa_r+0x5cc>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f7f9 fb9e 	bl	800028c <__adddf3>
 8006b50:	4605      	mov	r5, r0
 8006b52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b56:	2c00      	cmp	r4, #0
 8006b58:	f040 808d 	bne.w	8006c76 <_dtoa_r+0x51e>
 8006b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b60:	4b71      	ldr	r3, [pc, #452]	@ (8006d28 <_dtoa_r+0x5d0>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	f7f9 fb90 	bl	8000288 <__aeabi_dsub>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b70:	462a      	mov	r2, r5
 8006b72:	4633      	mov	r3, r6
 8006b74:	f7f9 ffd0 	bl	8000b18 <__aeabi_dcmpgt>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	f040 828b 	bne.w	8007094 <_dtoa_r+0x93c>
 8006b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b82:	462a      	mov	r2, r5
 8006b84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b88:	f7f9 ffa8 	bl	8000adc <__aeabi_dcmplt>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	f040 8128 	bne.w	8006de2 <_dtoa_r+0x68a>
 8006b92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006b96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006b9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f2c0 815a 	blt.w	8006e56 <_dtoa_r+0x6fe>
 8006ba2:	2f0e      	cmp	r7, #14
 8006ba4:	f300 8157 	bgt.w	8006e56 <_dtoa_r+0x6fe>
 8006ba8:	4b5a      	ldr	r3, [pc, #360]	@ (8006d14 <_dtoa_r+0x5bc>)
 8006baa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bae:	ed93 7b00 	vldr	d7, [r3]
 8006bb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	ed8d 7b00 	vstr	d7, [sp]
 8006bba:	da03      	bge.n	8006bc4 <_dtoa_r+0x46c>
 8006bbc:	9b07      	ldr	r3, [sp, #28]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f340 8101 	ble.w	8006dc6 <_dtoa_r+0x66e>
 8006bc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006bc8:	4656      	mov	r6, sl
 8006bca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	f7f9 fe3b 	bl	800084c <__aeabi_ddiv>
 8006bd6:	f7f9 ffbf 	bl	8000b58 <__aeabi_d2iz>
 8006bda:	4680      	mov	r8, r0
 8006bdc:	f7f9 fca2 	bl	8000524 <__aeabi_i2d>
 8006be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006be4:	f7f9 fd08 	bl	80005f8 <__aeabi_dmul>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4620      	mov	r0, r4
 8006bee:	4629      	mov	r1, r5
 8006bf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006bf4:	f7f9 fb48 	bl	8000288 <__aeabi_dsub>
 8006bf8:	f806 4b01 	strb.w	r4, [r6], #1
 8006bfc:	9d07      	ldr	r5, [sp, #28]
 8006bfe:	eba6 040a 	sub.w	r4, r6, sl
 8006c02:	42a5      	cmp	r5, r4
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	f040 8117 	bne.w	8006e3a <_dtoa_r+0x6e2>
 8006c0c:	f7f9 fb3e 	bl	800028c <__adddf3>
 8006c10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c14:	4604      	mov	r4, r0
 8006c16:	460d      	mov	r5, r1
 8006c18:	f7f9 ff7e 	bl	8000b18 <__aeabi_dcmpgt>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	f040 80f9 	bne.w	8006e14 <_dtoa_r+0x6bc>
 8006c22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 ff4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c2e:	b118      	cbz	r0, 8006c38 <_dtoa_r+0x4e0>
 8006c30:	f018 0f01 	tst.w	r8, #1
 8006c34:	f040 80ee 	bne.w	8006e14 <_dtoa_r+0x6bc>
 8006c38:	4649      	mov	r1, r9
 8006c3a:	4658      	mov	r0, fp
 8006c3c:	f000 fc90 	bl	8007560 <_Bfree>
 8006c40:	2300      	movs	r3, #0
 8006c42:	7033      	strb	r3, [r6, #0]
 8006c44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c46:	3701      	adds	r7, #1
 8006c48:	601f      	str	r7, [r3, #0]
 8006c4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 831d 	beq.w	800728c <_dtoa_r+0xb34>
 8006c52:	601e      	str	r6, [r3, #0]
 8006c54:	e31a      	b.n	800728c <_dtoa_r+0xb34>
 8006c56:	07e2      	lsls	r2, r4, #31
 8006c58:	d505      	bpl.n	8006c66 <_dtoa_r+0x50e>
 8006c5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c5e:	f7f9 fccb 	bl	80005f8 <__aeabi_dmul>
 8006c62:	3601      	adds	r6, #1
 8006c64:	2301      	movs	r3, #1
 8006c66:	1064      	asrs	r4, r4, #1
 8006c68:	3508      	adds	r5, #8
 8006c6a:	e73f      	b.n	8006aec <_dtoa_r+0x394>
 8006c6c:	2602      	movs	r6, #2
 8006c6e:	e742      	b.n	8006af6 <_dtoa_r+0x39e>
 8006c70:	9c07      	ldr	r4, [sp, #28]
 8006c72:	9704      	str	r7, [sp, #16]
 8006c74:	e761      	b.n	8006b3a <_dtoa_r+0x3e2>
 8006c76:	4b27      	ldr	r3, [pc, #156]	@ (8006d14 <_dtoa_r+0x5bc>)
 8006c78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c82:	4454      	add	r4, sl
 8006c84:	2900      	cmp	r1, #0
 8006c86:	d053      	beq.n	8006d30 <_dtoa_r+0x5d8>
 8006c88:	4928      	ldr	r1, [pc, #160]	@ (8006d2c <_dtoa_r+0x5d4>)
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	f7f9 fdde 	bl	800084c <__aeabi_ddiv>
 8006c90:	4633      	mov	r3, r6
 8006c92:	462a      	mov	r2, r5
 8006c94:	f7f9 faf8 	bl	8000288 <__aeabi_dsub>
 8006c98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c9c:	4656      	mov	r6, sl
 8006c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ca2:	f7f9 ff59 	bl	8000b58 <__aeabi_d2iz>
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	f7f9 fc3c 	bl	8000524 <__aeabi_i2d>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cb4:	f7f9 fae8 	bl	8000288 <__aeabi_dsub>
 8006cb8:	3530      	adds	r5, #48	@ 0x30
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cc2:	f806 5b01 	strb.w	r5, [r6], #1
 8006cc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cca:	f7f9 ff07 	bl	8000adc <__aeabi_dcmplt>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d171      	bne.n	8006db6 <_dtoa_r+0x65e>
 8006cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cd6:	4911      	ldr	r1, [pc, #68]	@ (8006d1c <_dtoa_r+0x5c4>)
 8006cd8:	2000      	movs	r0, #0
 8006cda:	f7f9 fad5 	bl	8000288 <__aeabi_dsub>
 8006cde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ce2:	f7f9 fefb 	bl	8000adc <__aeabi_dcmplt>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f040 8095 	bne.w	8006e16 <_dtoa_r+0x6be>
 8006cec:	42a6      	cmp	r6, r4
 8006cee:	f43f af50 	beq.w	8006b92 <_dtoa_r+0x43a>
 8006cf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d20 <_dtoa_r+0x5c8>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f7f9 fc7d 	bl	80005f8 <__aeabi_dmul>
 8006cfe:	4b08      	ldr	r3, [pc, #32]	@ (8006d20 <_dtoa_r+0x5c8>)
 8006d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d04:	2200      	movs	r2, #0
 8006d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d0a:	f7f9 fc75 	bl	80005f8 <__aeabi_dmul>
 8006d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d12:	e7c4      	b.n	8006c9e <_dtoa_r+0x546>
 8006d14:	080088a8 	.word	0x080088a8
 8006d18:	08008880 	.word	0x08008880
 8006d1c:	3ff00000 	.word	0x3ff00000
 8006d20:	40240000 	.word	0x40240000
 8006d24:	401c0000 	.word	0x401c0000
 8006d28:	40140000 	.word	0x40140000
 8006d2c:	3fe00000 	.word	0x3fe00000
 8006d30:	4631      	mov	r1, r6
 8006d32:	4628      	mov	r0, r5
 8006d34:	f7f9 fc60 	bl	80005f8 <__aeabi_dmul>
 8006d38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d3c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006d3e:	4656      	mov	r6, sl
 8006d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d44:	f7f9 ff08 	bl	8000b58 <__aeabi_d2iz>
 8006d48:	4605      	mov	r5, r0
 8006d4a:	f7f9 fbeb 	bl	8000524 <__aeabi_i2d>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d56:	f7f9 fa97 	bl	8000288 <__aeabi_dsub>
 8006d5a:	3530      	adds	r5, #48	@ 0x30
 8006d5c:	f806 5b01 	strb.w	r5, [r6], #1
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	42a6      	cmp	r6, r4
 8006d66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	d124      	bne.n	8006dba <_dtoa_r+0x662>
 8006d70:	4bac      	ldr	r3, [pc, #688]	@ (8007024 <_dtoa_r+0x8cc>)
 8006d72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d76:	f7f9 fa89 	bl	800028c <__adddf3>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d82:	f7f9 fec9 	bl	8000b18 <__aeabi_dcmpgt>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d145      	bne.n	8006e16 <_dtoa_r+0x6be>
 8006d8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d8e:	49a5      	ldr	r1, [pc, #660]	@ (8007024 <_dtoa_r+0x8cc>)
 8006d90:	2000      	movs	r0, #0
 8006d92:	f7f9 fa79 	bl	8000288 <__aeabi_dsub>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d9e:	f7f9 fe9d 	bl	8000adc <__aeabi_dcmplt>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f43f aef5 	beq.w	8006b92 <_dtoa_r+0x43a>
 8006da8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006daa:	1e73      	subs	r3, r6, #1
 8006dac:	9315      	str	r3, [sp, #84]	@ 0x54
 8006dae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006db2:	2b30      	cmp	r3, #48	@ 0x30
 8006db4:	d0f8      	beq.n	8006da8 <_dtoa_r+0x650>
 8006db6:	9f04      	ldr	r7, [sp, #16]
 8006db8:	e73e      	b.n	8006c38 <_dtoa_r+0x4e0>
 8006dba:	4b9b      	ldr	r3, [pc, #620]	@ (8007028 <_dtoa_r+0x8d0>)
 8006dbc:	f7f9 fc1c 	bl	80005f8 <__aeabi_dmul>
 8006dc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dc4:	e7bc      	b.n	8006d40 <_dtoa_r+0x5e8>
 8006dc6:	d10c      	bne.n	8006de2 <_dtoa_r+0x68a>
 8006dc8:	4b98      	ldr	r3, [pc, #608]	@ (800702c <_dtoa_r+0x8d4>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dd0:	f7f9 fc12 	bl	80005f8 <__aeabi_dmul>
 8006dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dd8:	f7f9 fe94 	bl	8000b04 <__aeabi_dcmpge>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	f000 8157 	beq.w	8007090 <_dtoa_r+0x938>
 8006de2:	2400      	movs	r4, #0
 8006de4:	4625      	mov	r5, r4
 8006de6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006de8:	43db      	mvns	r3, r3
 8006dea:	9304      	str	r3, [sp, #16]
 8006dec:	4656      	mov	r6, sl
 8006dee:	2700      	movs	r7, #0
 8006df0:	4621      	mov	r1, r4
 8006df2:	4658      	mov	r0, fp
 8006df4:	f000 fbb4 	bl	8007560 <_Bfree>
 8006df8:	2d00      	cmp	r5, #0
 8006dfa:	d0dc      	beq.n	8006db6 <_dtoa_r+0x65e>
 8006dfc:	b12f      	cbz	r7, 8006e0a <_dtoa_r+0x6b2>
 8006dfe:	42af      	cmp	r7, r5
 8006e00:	d003      	beq.n	8006e0a <_dtoa_r+0x6b2>
 8006e02:	4639      	mov	r1, r7
 8006e04:	4658      	mov	r0, fp
 8006e06:	f000 fbab 	bl	8007560 <_Bfree>
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	4658      	mov	r0, fp
 8006e0e:	f000 fba7 	bl	8007560 <_Bfree>
 8006e12:	e7d0      	b.n	8006db6 <_dtoa_r+0x65e>
 8006e14:	9704      	str	r7, [sp, #16]
 8006e16:	4633      	mov	r3, r6
 8006e18:	461e      	mov	r6, r3
 8006e1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e1e:	2a39      	cmp	r2, #57	@ 0x39
 8006e20:	d107      	bne.n	8006e32 <_dtoa_r+0x6da>
 8006e22:	459a      	cmp	sl, r3
 8006e24:	d1f8      	bne.n	8006e18 <_dtoa_r+0x6c0>
 8006e26:	9a04      	ldr	r2, [sp, #16]
 8006e28:	3201      	adds	r2, #1
 8006e2a:	9204      	str	r2, [sp, #16]
 8006e2c:	2230      	movs	r2, #48	@ 0x30
 8006e2e:	f88a 2000 	strb.w	r2, [sl]
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	3201      	adds	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	e7bd      	b.n	8006db6 <_dtoa_r+0x65e>
 8006e3a:	4b7b      	ldr	r3, [pc, #492]	@ (8007028 <_dtoa_r+0x8d0>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f7f9 fbdb 	bl	80005f8 <__aeabi_dmul>
 8006e42:	2200      	movs	r2, #0
 8006e44:	2300      	movs	r3, #0
 8006e46:	4604      	mov	r4, r0
 8006e48:	460d      	mov	r5, r1
 8006e4a:	f7f9 fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f43f aebb 	beq.w	8006bca <_dtoa_r+0x472>
 8006e54:	e6f0      	b.n	8006c38 <_dtoa_r+0x4e0>
 8006e56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e58:	2a00      	cmp	r2, #0
 8006e5a:	f000 80db 	beq.w	8007014 <_dtoa_r+0x8bc>
 8006e5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e60:	2a01      	cmp	r2, #1
 8006e62:	f300 80bf 	bgt.w	8006fe4 <_dtoa_r+0x88c>
 8006e66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006e68:	2a00      	cmp	r2, #0
 8006e6a:	f000 80b7 	beq.w	8006fdc <_dtoa_r+0x884>
 8006e6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e74:	4646      	mov	r6, r8
 8006e76:	9a08      	ldr	r2, [sp, #32]
 8006e78:	2101      	movs	r1, #1
 8006e7a:	441a      	add	r2, r3
 8006e7c:	4658      	mov	r0, fp
 8006e7e:	4498      	add	r8, r3
 8006e80:	9208      	str	r2, [sp, #32]
 8006e82:	f000 fc21 	bl	80076c8 <__i2b>
 8006e86:	4605      	mov	r5, r0
 8006e88:	b15e      	cbz	r6, 8006ea2 <_dtoa_r+0x74a>
 8006e8a:	9b08      	ldr	r3, [sp, #32]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	dd08      	ble.n	8006ea2 <_dtoa_r+0x74a>
 8006e90:	42b3      	cmp	r3, r6
 8006e92:	9a08      	ldr	r2, [sp, #32]
 8006e94:	bfa8      	it	ge
 8006e96:	4633      	movge	r3, r6
 8006e98:	eba8 0803 	sub.w	r8, r8, r3
 8006e9c:	1af6      	subs	r6, r6, r3
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	9308      	str	r3, [sp, #32]
 8006ea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ea4:	b1f3      	cbz	r3, 8006ee4 <_dtoa_r+0x78c>
 8006ea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 80b7 	beq.w	800701c <_dtoa_r+0x8c4>
 8006eae:	b18c      	cbz	r4, 8006ed4 <_dtoa_r+0x77c>
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	4658      	mov	r0, fp
 8006eb6:	f000 fcc7 	bl	8007848 <__pow5mult>
 8006eba:	464a      	mov	r2, r9
 8006ebc:	4601      	mov	r1, r0
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	4658      	mov	r0, fp
 8006ec2:	f000 fc17 	bl	80076f4 <__multiply>
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	9004      	str	r0, [sp, #16]
 8006eca:	4658      	mov	r0, fp
 8006ecc:	f000 fb48 	bl	8007560 <_Bfree>
 8006ed0:	9b04      	ldr	r3, [sp, #16]
 8006ed2:	4699      	mov	r9, r3
 8006ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ed6:	1b1a      	subs	r2, r3, r4
 8006ed8:	d004      	beq.n	8006ee4 <_dtoa_r+0x78c>
 8006eda:	4649      	mov	r1, r9
 8006edc:	4658      	mov	r0, fp
 8006ede:	f000 fcb3 	bl	8007848 <__pow5mult>
 8006ee2:	4681      	mov	r9, r0
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	f000 fbee 	bl	80076c8 <__i2b>
 8006eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eee:	4604      	mov	r4, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 81cf 	beq.w	8007294 <_dtoa_r+0xb3c>
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	4601      	mov	r1, r0
 8006efa:	4658      	mov	r0, fp
 8006efc:	f000 fca4 	bl	8007848 <__pow5mult>
 8006f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	4604      	mov	r4, r0
 8006f06:	f300 8095 	bgt.w	8007034 <_dtoa_r+0x8dc>
 8006f0a:	9b02      	ldr	r3, [sp, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f040 8087 	bne.w	8007020 <_dtoa_r+0x8c8>
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f040 8089 	bne.w	8007030 <_dtoa_r+0x8d8>
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f24:	0d1b      	lsrs	r3, r3, #20
 8006f26:	051b      	lsls	r3, r3, #20
 8006f28:	b12b      	cbz	r3, 8006f36 <_dtoa_r+0x7de>
 8006f2a:	9b08      	ldr	r3, [sp, #32]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	9308      	str	r3, [sp, #32]
 8006f30:	f108 0801 	add.w	r8, r8, #1
 8006f34:	2301      	movs	r3, #1
 8006f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 81b0 	beq.w	80072a0 <_dtoa_r+0xb48>
 8006f40:	6923      	ldr	r3, [r4, #16]
 8006f42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f46:	6918      	ldr	r0, [r3, #16]
 8006f48:	f000 fb72 	bl	8007630 <__hi0bits>
 8006f4c:	f1c0 0020 	rsb	r0, r0, #32
 8006f50:	9b08      	ldr	r3, [sp, #32]
 8006f52:	4418      	add	r0, r3
 8006f54:	f010 001f 	ands.w	r0, r0, #31
 8006f58:	d077      	beq.n	800704a <_dtoa_r+0x8f2>
 8006f5a:	f1c0 0320 	rsb	r3, r0, #32
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	dd6b      	ble.n	800703a <_dtoa_r+0x8e2>
 8006f62:	9b08      	ldr	r3, [sp, #32]
 8006f64:	f1c0 001c 	rsb	r0, r0, #28
 8006f68:	4403      	add	r3, r0
 8006f6a:	4480      	add	r8, r0
 8006f6c:	4406      	add	r6, r0
 8006f6e:	9308      	str	r3, [sp, #32]
 8006f70:	f1b8 0f00 	cmp.w	r8, #0
 8006f74:	dd05      	ble.n	8006f82 <_dtoa_r+0x82a>
 8006f76:	4649      	mov	r1, r9
 8006f78:	4642      	mov	r2, r8
 8006f7a:	4658      	mov	r0, fp
 8006f7c:	f000 fcbe 	bl	80078fc <__lshift>
 8006f80:	4681      	mov	r9, r0
 8006f82:	9b08      	ldr	r3, [sp, #32]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	dd05      	ble.n	8006f94 <_dtoa_r+0x83c>
 8006f88:	4621      	mov	r1, r4
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	4658      	mov	r0, fp
 8006f8e:	f000 fcb5 	bl	80078fc <__lshift>
 8006f92:	4604      	mov	r4, r0
 8006f94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d059      	beq.n	800704e <_dtoa_r+0x8f6>
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	4648      	mov	r0, r9
 8006f9e:	f000 fd19 	bl	80079d4 <__mcmp>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	da53      	bge.n	800704e <_dtoa_r+0x8f6>
 8006fa6:	1e7b      	subs	r3, r7, #1
 8006fa8:	9304      	str	r3, [sp, #16]
 8006faa:	4649      	mov	r1, r9
 8006fac:	2300      	movs	r3, #0
 8006fae:	220a      	movs	r2, #10
 8006fb0:	4658      	mov	r0, fp
 8006fb2:	f000 faf7 	bl	80075a4 <__multadd>
 8006fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fb8:	4681      	mov	r9, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 8172 	beq.w	80072a4 <_dtoa_r+0xb4c>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	220a      	movs	r2, #10
 8006fc6:	4658      	mov	r0, fp
 8006fc8:	f000 faec 	bl	80075a4 <__multadd>
 8006fcc:	9b00      	ldr	r3, [sp, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	dc67      	bgt.n	80070a4 <_dtoa_r+0x94c>
 8006fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	dc41      	bgt.n	800705e <_dtoa_r+0x906>
 8006fda:	e063      	b.n	80070a4 <_dtoa_r+0x94c>
 8006fdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006fe2:	e746      	b.n	8006e72 <_dtoa_r+0x71a>
 8006fe4:	9b07      	ldr	r3, [sp, #28]
 8006fe6:	1e5c      	subs	r4, r3, #1
 8006fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fea:	42a3      	cmp	r3, r4
 8006fec:	bfbf      	itttt	lt
 8006fee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006ff0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006ff2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006ff4:	1ae3      	sublt	r3, r4, r3
 8006ff6:	bfb4      	ite	lt
 8006ff8:	18d2      	addlt	r2, r2, r3
 8006ffa:	1b1c      	subge	r4, r3, r4
 8006ffc:	9b07      	ldr	r3, [sp, #28]
 8006ffe:	bfbc      	itt	lt
 8007000:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007002:	2400      	movlt	r4, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	bfb5      	itete	lt
 8007008:	eba8 0603 	sublt.w	r6, r8, r3
 800700c:	9b07      	ldrge	r3, [sp, #28]
 800700e:	2300      	movlt	r3, #0
 8007010:	4646      	movge	r6, r8
 8007012:	e730      	b.n	8006e76 <_dtoa_r+0x71e>
 8007014:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007016:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007018:	4646      	mov	r6, r8
 800701a:	e735      	b.n	8006e88 <_dtoa_r+0x730>
 800701c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800701e:	e75c      	b.n	8006eda <_dtoa_r+0x782>
 8007020:	2300      	movs	r3, #0
 8007022:	e788      	b.n	8006f36 <_dtoa_r+0x7de>
 8007024:	3fe00000 	.word	0x3fe00000
 8007028:	40240000 	.word	0x40240000
 800702c:	40140000 	.word	0x40140000
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	e780      	b.n	8006f36 <_dtoa_r+0x7de>
 8007034:	2300      	movs	r3, #0
 8007036:	930a      	str	r3, [sp, #40]	@ 0x28
 8007038:	e782      	b.n	8006f40 <_dtoa_r+0x7e8>
 800703a:	d099      	beq.n	8006f70 <_dtoa_r+0x818>
 800703c:	9a08      	ldr	r2, [sp, #32]
 800703e:	331c      	adds	r3, #28
 8007040:	441a      	add	r2, r3
 8007042:	4498      	add	r8, r3
 8007044:	441e      	add	r6, r3
 8007046:	9208      	str	r2, [sp, #32]
 8007048:	e792      	b.n	8006f70 <_dtoa_r+0x818>
 800704a:	4603      	mov	r3, r0
 800704c:	e7f6      	b.n	800703c <_dtoa_r+0x8e4>
 800704e:	9b07      	ldr	r3, [sp, #28]
 8007050:	9704      	str	r7, [sp, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	dc20      	bgt.n	8007098 <_dtoa_r+0x940>
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800705a:	2b02      	cmp	r3, #2
 800705c:	dd1e      	ble.n	800709c <_dtoa_r+0x944>
 800705e:	9b00      	ldr	r3, [sp, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	f47f aec0 	bne.w	8006de6 <_dtoa_r+0x68e>
 8007066:	4621      	mov	r1, r4
 8007068:	2205      	movs	r2, #5
 800706a:	4658      	mov	r0, fp
 800706c:	f000 fa9a 	bl	80075a4 <__multadd>
 8007070:	4601      	mov	r1, r0
 8007072:	4604      	mov	r4, r0
 8007074:	4648      	mov	r0, r9
 8007076:	f000 fcad 	bl	80079d4 <__mcmp>
 800707a:	2800      	cmp	r0, #0
 800707c:	f77f aeb3 	ble.w	8006de6 <_dtoa_r+0x68e>
 8007080:	4656      	mov	r6, sl
 8007082:	2331      	movs	r3, #49	@ 0x31
 8007084:	f806 3b01 	strb.w	r3, [r6], #1
 8007088:	9b04      	ldr	r3, [sp, #16]
 800708a:	3301      	adds	r3, #1
 800708c:	9304      	str	r3, [sp, #16]
 800708e:	e6ae      	b.n	8006dee <_dtoa_r+0x696>
 8007090:	9c07      	ldr	r4, [sp, #28]
 8007092:	9704      	str	r7, [sp, #16]
 8007094:	4625      	mov	r5, r4
 8007096:	e7f3      	b.n	8007080 <_dtoa_r+0x928>
 8007098:	9b07      	ldr	r3, [sp, #28]
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 8104 	beq.w	80072ac <_dtoa_r+0xb54>
 80070a4:	2e00      	cmp	r6, #0
 80070a6:	dd05      	ble.n	80070b4 <_dtoa_r+0x95c>
 80070a8:	4629      	mov	r1, r5
 80070aa:	4632      	mov	r2, r6
 80070ac:	4658      	mov	r0, fp
 80070ae:	f000 fc25 	bl	80078fc <__lshift>
 80070b2:	4605      	mov	r5, r0
 80070b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d05a      	beq.n	8007170 <_dtoa_r+0xa18>
 80070ba:	6869      	ldr	r1, [r5, #4]
 80070bc:	4658      	mov	r0, fp
 80070be:	f000 fa0f 	bl	80074e0 <_Balloc>
 80070c2:	4606      	mov	r6, r0
 80070c4:	b928      	cbnz	r0, 80070d2 <_dtoa_r+0x97a>
 80070c6:	4b84      	ldr	r3, [pc, #528]	@ (80072d8 <_dtoa_r+0xb80>)
 80070c8:	4602      	mov	r2, r0
 80070ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80070ce:	f7ff bb5a 	b.w	8006786 <_dtoa_r+0x2e>
 80070d2:	692a      	ldr	r2, [r5, #16]
 80070d4:	3202      	adds	r2, #2
 80070d6:	0092      	lsls	r2, r2, #2
 80070d8:	f105 010c 	add.w	r1, r5, #12
 80070dc:	300c      	adds	r0, #12
 80070de:	f000 ffaf 	bl	8008040 <memcpy>
 80070e2:	2201      	movs	r2, #1
 80070e4:	4631      	mov	r1, r6
 80070e6:	4658      	mov	r0, fp
 80070e8:	f000 fc08 	bl	80078fc <__lshift>
 80070ec:	f10a 0301 	add.w	r3, sl, #1
 80070f0:	9307      	str	r3, [sp, #28]
 80070f2:	9b00      	ldr	r3, [sp, #0]
 80070f4:	4453      	add	r3, sl
 80070f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070f8:	9b02      	ldr	r3, [sp, #8]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	462f      	mov	r7, r5
 8007100:	930a      	str	r3, [sp, #40]	@ 0x28
 8007102:	4605      	mov	r5, r0
 8007104:	9b07      	ldr	r3, [sp, #28]
 8007106:	4621      	mov	r1, r4
 8007108:	3b01      	subs	r3, #1
 800710a:	4648      	mov	r0, r9
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	f7ff fa9a 	bl	8006646 <quorem>
 8007112:	4639      	mov	r1, r7
 8007114:	9002      	str	r0, [sp, #8]
 8007116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800711a:	4648      	mov	r0, r9
 800711c:	f000 fc5a 	bl	80079d4 <__mcmp>
 8007120:	462a      	mov	r2, r5
 8007122:	9008      	str	r0, [sp, #32]
 8007124:	4621      	mov	r1, r4
 8007126:	4658      	mov	r0, fp
 8007128:	f000 fc70 	bl	8007a0c <__mdiff>
 800712c:	68c2      	ldr	r2, [r0, #12]
 800712e:	4606      	mov	r6, r0
 8007130:	bb02      	cbnz	r2, 8007174 <_dtoa_r+0xa1c>
 8007132:	4601      	mov	r1, r0
 8007134:	4648      	mov	r0, r9
 8007136:	f000 fc4d 	bl	80079d4 <__mcmp>
 800713a:	4602      	mov	r2, r0
 800713c:	4631      	mov	r1, r6
 800713e:	4658      	mov	r0, fp
 8007140:	920e      	str	r2, [sp, #56]	@ 0x38
 8007142:	f000 fa0d 	bl	8007560 <_Bfree>
 8007146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007148:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800714a:	9e07      	ldr	r6, [sp, #28]
 800714c:	ea43 0102 	orr.w	r1, r3, r2
 8007150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007152:	4319      	orrs	r1, r3
 8007154:	d110      	bne.n	8007178 <_dtoa_r+0xa20>
 8007156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800715a:	d029      	beq.n	80071b0 <_dtoa_r+0xa58>
 800715c:	9b08      	ldr	r3, [sp, #32]
 800715e:	2b00      	cmp	r3, #0
 8007160:	dd02      	ble.n	8007168 <_dtoa_r+0xa10>
 8007162:	9b02      	ldr	r3, [sp, #8]
 8007164:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007168:	9b00      	ldr	r3, [sp, #0]
 800716a:	f883 8000 	strb.w	r8, [r3]
 800716e:	e63f      	b.n	8006df0 <_dtoa_r+0x698>
 8007170:	4628      	mov	r0, r5
 8007172:	e7bb      	b.n	80070ec <_dtoa_r+0x994>
 8007174:	2201      	movs	r2, #1
 8007176:	e7e1      	b.n	800713c <_dtoa_r+0x9e4>
 8007178:	9b08      	ldr	r3, [sp, #32]
 800717a:	2b00      	cmp	r3, #0
 800717c:	db04      	blt.n	8007188 <_dtoa_r+0xa30>
 800717e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007180:	430b      	orrs	r3, r1
 8007182:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007184:	430b      	orrs	r3, r1
 8007186:	d120      	bne.n	80071ca <_dtoa_r+0xa72>
 8007188:	2a00      	cmp	r2, #0
 800718a:	dded      	ble.n	8007168 <_dtoa_r+0xa10>
 800718c:	4649      	mov	r1, r9
 800718e:	2201      	movs	r2, #1
 8007190:	4658      	mov	r0, fp
 8007192:	f000 fbb3 	bl	80078fc <__lshift>
 8007196:	4621      	mov	r1, r4
 8007198:	4681      	mov	r9, r0
 800719a:	f000 fc1b 	bl	80079d4 <__mcmp>
 800719e:	2800      	cmp	r0, #0
 80071a0:	dc03      	bgt.n	80071aa <_dtoa_r+0xa52>
 80071a2:	d1e1      	bne.n	8007168 <_dtoa_r+0xa10>
 80071a4:	f018 0f01 	tst.w	r8, #1
 80071a8:	d0de      	beq.n	8007168 <_dtoa_r+0xa10>
 80071aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071ae:	d1d8      	bne.n	8007162 <_dtoa_r+0xa0a>
 80071b0:	9a00      	ldr	r2, [sp, #0]
 80071b2:	2339      	movs	r3, #57	@ 0x39
 80071b4:	7013      	strb	r3, [r2, #0]
 80071b6:	4633      	mov	r3, r6
 80071b8:	461e      	mov	r6, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80071c0:	2a39      	cmp	r2, #57	@ 0x39
 80071c2:	d052      	beq.n	800726a <_dtoa_r+0xb12>
 80071c4:	3201      	adds	r2, #1
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	e612      	b.n	8006df0 <_dtoa_r+0x698>
 80071ca:	2a00      	cmp	r2, #0
 80071cc:	dd07      	ble.n	80071de <_dtoa_r+0xa86>
 80071ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071d2:	d0ed      	beq.n	80071b0 <_dtoa_r+0xa58>
 80071d4:	9a00      	ldr	r2, [sp, #0]
 80071d6:	f108 0301 	add.w	r3, r8, #1
 80071da:	7013      	strb	r3, [r2, #0]
 80071dc:	e608      	b.n	8006df0 <_dtoa_r+0x698>
 80071de:	9b07      	ldr	r3, [sp, #28]
 80071e0:	9a07      	ldr	r2, [sp, #28]
 80071e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80071e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d028      	beq.n	800723e <_dtoa_r+0xae6>
 80071ec:	4649      	mov	r1, r9
 80071ee:	2300      	movs	r3, #0
 80071f0:	220a      	movs	r2, #10
 80071f2:	4658      	mov	r0, fp
 80071f4:	f000 f9d6 	bl	80075a4 <__multadd>
 80071f8:	42af      	cmp	r7, r5
 80071fa:	4681      	mov	r9, r0
 80071fc:	f04f 0300 	mov.w	r3, #0
 8007200:	f04f 020a 	mov.w	r2, #10
 8007204:	4639      	mov	r1, r7
 8007206:	4658      	mov	r0, fp
 8007208:	d107      	bne.n	800721a <_dtoa_r+0xac2>
 800720a:	f000 f9cb 	bl	80075a4 <__multadd>
 800720e:	4607      	mov	r7, r0
 8007210:	4605      	mov	r5, r0
 8007212:	9b07      	ldr	r3, [sp, #28]
 8007214:	3301      	adds	r3, #1
 8007216:	9307      	str	r3, [sp, #28]
 8007218:	e774      	b.n	8007104 <_dtoa_r+0x9ac>
 800721a:	f000 f9c3 	bl	80075a4 <__multadd>
 800721e:	4629      	mov	r1, r5
 8007220:	4607      	mov	r7, r0
 8007222:	2300      	movs	r3, #0
 8007224:	220a      	movs	r2, #10
 8007226:	4658      	mov	r0, fp
 8007228:	f000 f9bc 	bl	80075a4 <__multadd>
 800722c:	4605      	mov	r5, r0
 800722e:	e7f0      	b.n	8007212 <_dtoa_r+0xaba>
 8007230:	9b00      	ldr	r3, [sp, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	bfcc      	ite	gt
 8007236:	461e      	movgt	r6, r3
 8007238:	2601      	movle	r6, #1
 800723a:	4456      	add	r6, sl
 800723c:	2700      	movs	r7, #0
 800723e:	4649      	mov	r1, r9
 8007240:	2201      	movs	r2, #1
 8007242:	4658      	mov	r0, fp
 8007244:	f000 fb5a 	bl	80078fc <__lshift>
 8007248:	4621      	mov	r1, r4
 800724a:	4681      	mov	r9, r0
 800724c:	f000 fbc2 	bl	80079d4 <__mcmp>
 8007250:	2800      	cmp	r0, #0
 8007252:	dcb0      	bgt.n	80071b6 <_dtoa_r+0xa5e>
 8007254:	d102      	bne.n	800725c <_dtoa_r+0xb04>
 8007256:	f018 0f01 	tst.w	r8, #1
 800725a:	d1ac      	bne.n	80071b6 <_dtoa_r+0xa5e>
 800725c:	4633      	mov	r3, r6
 800725e:	461e      	mov	r6, r3
 8007260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007264:	2a30      	cmp	r2, #48	@ 0x30
 8007266:	d0fa      	beq.n	800725e <_dtoa_r+0xb06>
 8007268:	e5c2      	b.n	8006df0 <_dtoa_r+0x698>
 800726a:	459a      	cmp	sl, r3
 800726c:	d1a4      	bne.n	80071b8 <_dtoa_r+0xa60>
 800726e:	9b04      	ldr	r3, [sp, #16]
 8007270:	3301      	adds	r3, #1
 8007272:	9304      	str	r3, [sp, #16]
 8007274:	2331      	movs	r3, #49	@ 0x31
 8007276:	f88a 3000 	strb.w	r3, [sl]
 800727a:	e5b9      	b.n	8006df0 <_dtoa_r+0x698>
 800727c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800727e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80072dc <_dtoa_r+0xb84>
 8007282:	b11b      	cbz	r3, 800728c <_dtoa_r+0xb34>
 8007284:	f10a 0308 	add.w	r3, sl, #8
 8007288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	4650      	mov	r0, sl
 800728e:	b019      	add	sp, #100	@ 0x64
 8007290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007296:	2b01      	cmp	r3, #1
 8007298:	f77f ae37 	ble.w	8006f0a <_dtoa_r+0x7b2>
 800729c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800729e:	930a      	str	r3, [sp, #40]	@ 0x28
 80072a0:	2001      	movs	r0, #1
 80072a2:	e655      	b.n	8006f50 <_dtoa_r+0x7f8>
 80072a4:	9b00      	ldr	r3, [sp, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f77f aed6 	ble.w	8007058 <_dtoa_r+0x900>
 80072ac:	4656      	mov	r6, sl
 80072ae:	4621      	mov	r1, r4
 80072b0:	4648      	mov	r0, r9
 80072b2:	f7ff f9c8 	bl	8006646 <quorem>
 80072b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072ba:	f806 8b01 	strb.w	r8, [r6], #1
 80072be:	9b00      	ldr	r3, [sp, #0]
 80072c0:	eba6 020a 	sub.w	r2, r6, sl
 80072c4:	4293      	cmp	r3, r2
 80072c6:	ddb3      	ble.n	8007230 <_dtoa_r+0xad8>
 80072c8:	4649      	mov	r1, r9
 80072ca:	2300      	movs	r3, #0
 80072cc:	220a      	movs	r2, #10
 80072ce:	4658      	mov	r0, fp
 80072d0:	f000 f968 	bl	80075a4 <__multadd>
 80072d4:	4681      	mov	r9, r0
 80072d6:	e7ea      	b.n	80072ae <_dtoa_r+0xb56>
 80072d8:	08008804 	.word	0x08008804
 80072dc:	08008788 	.word	0x08008788

080072e0 <_free_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4605      	mov	r5, r0
 80072e4:	2900      	cmp	r1, #0
 80072e6:	d041      	beq.n	800736c <_free_r+0x8c>
 80072e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ec:	1f0c      	subs	r4, r1, #4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bfb8      	it	lt
 80072f2:	18e4      	addlt	r4, r4, r3
 80072f4:	f000 f8e8 	bl	80074c8 <__malloc_lock>
 80072f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007370 <_free_r+0x90>)
 80072fa:	6813      	ldr	r3, [r2, #0]
 80072fc:	b933      	cbnz	r3, 800730c <_free_r+0x2c>
 80072fe:	6063      	str	r3, [r4, #4]
 8007300:	6014      	str	r4, [r2, #0]
 8007302:	4628      	mov	r0, r5
 8007304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007308:	f000 b8e4 	b.w	80074d4 <__malloc_unlock>
 800730c:	42a3      	cmp	r3, r4
 800730e:	d908      	bls.n	8007322 <_free_r+0x42>
 8007310:	6820      	ldr	r0, [r4, #0]
 8007312:	1821      	adds	r1, r4, r0
 8007314:	428b      	cmp	r3, r1
 8007316:	bf01      	itttt	eq
 8007318:	6819      	ldreq	r1, [r3, #0]
 800731a:	685b      	ldreq	r3, [r3, #4]
 800731c:	1809      	addeq	r1, r1, r0
 800731e:	6021      	streq	r1, [r4, #0]
 8007320:	e7ed      	b.n	80072fe <_free_r+0x1e>
 8007322:	461a      	mov	r2, r3
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	b10b      	cbz	r3, 800732c <_free_r+0x4c>
 8007328:	42a3      	cmp	r3, r4
 800732a:	d9fa      	bls.n	8007322 <_free_r+0x42>
 800732c:	6811      	ldr	r1, [r2, #0]
 800732e:	1850      	adds	r0, r2, r1
 8007330:	42a0      	cmp	r0, r4
 8007332:	d10b      	bne.n	800734c <_free_r+0x6c>
 8007334:	6820      	ldr	r0, [r4, #0]
 8007336:	4401      	add	r1, r0
 8007338:	1850      	adds	r0, r2, r1
 800733a:	4283      	cmp	r3, r0
 800733c:	6011      	str	r1, [r2, #0]
 800733e:	d1e0      	bne.n	8007302 <_free_r+0x22>
 8007340:	6818      	ldr	r0, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	6053      	str	r3, [r2, #4]
 8007346:	4408      	add	r0, r1
 8007348:	6010      	str	r0, [r2, #0]
 800734a:	e7da      	b.n	8007302 <_free_r+0x22>
 800734c:	d902      	bls.n	8007354 <_free_r+0x74>
 800734e:	230c      	movs	r3, #12
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	e7d6      	b.n	8007302 <_free_r+0x22>
 8007354:	6820      	ldr	r0, [r4, #0]
 8007356:	1821      	adds	r1, r4, r0
 8007358:	428b      	cmp	r3, r1
 800735a:	bf04      	itt	eq
 800735c:	6819      	ldreq	r1, [r3, #0]
 800735e:	685b      	ldreq	r3, [r3, #4]
 8007360:	6063      	str	r3, [r4, #4]
 8007362:	bf04      	itt	eq
 8007364:	1809      	addeq	r1, r1, r0
 8007366:	6021      	streq	r1, [r4, #0]
 8007368:	6054      	str	r4, [r2, #4]
 800736a:	e7ca      	b.n	8007302 <_free_r+0x22>
 800736c:	bd38      	pop	{r3, r4, r5, pc}
 800736e:	bf00      	nop
 8007370:	200005cc 	.word	0x200005cc

08007374 <malloc>:
 8007374:	4b02      	ldr	r3, [pc, #8]	@ (8007380 <malloc+0xc>)
 8007376:	4601      	mov	r1, r0
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	f000 b825 	b.w	80073c8 <_malloc_r>
 800737e:	bf00      	nop
 8007380:	20000018 	.word	0x20000018

08007384 <sbrk_aligned>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	4e0f      	ldr	r6, [pc, #60]	@ (80073c4 <sbrk_aligned+0x40>)
 8007388:	460c      	mov	r4, r1
 800738a:	6831      	ldr	r1, [r6, #0]
 800738c:	4605      	mov	r5, r0
 800738e:	b911      	cbnz	r1, 8007396 <sbrk_aligned+0x12>
 8007390:	f000 fe46 	bl	8008020 <_sbrk_r>
 8007394:	6030      	str	r0, [r6, #0]
 8007396:	4621      	mov	r1, r4
 8007398:	4628      	mov	r0, r5
 800739a:	f000 fe41 	bl	8008020 <_sbrk_r>
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	d103      	bne.n	80073aa <sbrk_aligned+0x26>
 80073a2:	f04f 34ff 	mov.w	r4, #4294967295
 80073a6:	4620      	mov	r0, r4
 80073a8:	bd70      	pop	{r4, r5, r6, pc}
 80073aa:	1cc4      	adds	r4, r0, #3
 80073ac:	f024 0403 	bic.w	r4, r4, #3
 80073b0:	42a0      	cmp	r0, r4
 80073b2:	d0f8      	beq.n	80073a6 <sbrk_aligned+0x22>
 80073b4:	1a21      	subs	r1, r4, r0
 80073b6:	4628      	mov	r0, r5
 80073b8:	f000 fe32 	bl	8008020 <_sbrk_r>
 80073bc:	3001      	adds	r0, #1
 80073be:	d1f2      	bne.n	80073a6 <sbrk_aligned+0x22>
 80073c0:	e7ef      	b.n	80073a2 <sbrk_aligned+0x1e>
 80073c2:	bf00      	nop
 80073c4:	200005c8 	.word	0x200005c8

080073c8 <_malloc_r>:
 80073c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073cc:	1ccd      	adds	r5, r1, #3
 80073ce:	f025 0503 	bic.w	r5, r5, #3
 80073d2:	3508      	adds	r5, #8
 80073d4:	2d0c      	cmp	r5, #12
 80073d6:	bf38      	it	cc
 80073d8:	250c      	movcc	r5, #12
 80073da:	2d00      	cmp	r5, #0
 80073dc:	4606      	mov	r6, r0
 80073de:	db01      	blt.n	80073e4 <_malloc_r+0x1c>
 80073e0:	42a9      	cmp	r1, r5
 80073e2:	d904      	bls.n	80073ee <_malloc_r+0x26>
 80073e4:	230c      	movs	r3, #12
 80073e6:	6033      	str	r3, [r6, #0]
 80073e8:	2000      	movs	r0, #0
 80073ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074c4 <_malloc_r+0xfc>
 80073f2:	f000 f869 	bl	80074c8 <__malloc_lock>
 80073f6:	f8d8 3000 	ldr.w	r3, [r8]
 80073fa:	461c      	mov	r4, r3
 80073fc:	bb44      	cbnz	r4, 8007450 <_malloc_r+0x88>
 80073fe:	4629      	mov	r1, r5
 8007400:	4630      	mov	r0, r6
 8007402:	f7ff ffbf 	bl	8007384 <sbrk_aligned>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	4604      	mov	r4, r0
 800740a:	d158      	bne.n	80074be <_malloc_r+0xf6>
 800740c:	f8d8 4000 	ldr.w	r4, [r8]
 8007410:	4627      	mov	r7, r4
 8007412:	2f00      	cmp	r7, #0
 8007414:	d143      	bne.n	800749e <_malloc_r+0xd6>
 8007416:	2c00      	cmp	r4, #0
 8007418:	d04b      	beq.n	80074b2 <_malloc_r+0xea>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	4639      	mov	r1, r7
 800741e:	4630      	mov	r0, r6
 8007420:	eb04 0903 	add.w	r9, r4, r3
 8007424:	f000 fdfc 	bl	8008020 <_sbrk_r>
 8007428:	4581      	cmp	r9, r0
 800742a:	d142      	bne.n	80074b2 <_malloc_r+0xea>
 800742c:	6821      	ldr	r1, [r4, #0]
 800742e:	1a6d      	subs	r5, r5, r1
 8007430:	4629      	mov	r1, r5
 8007432:	4630      	mov	r0, r6
 8007434:	f7ff ffa6 	bl	8007384 <sbrk_aligned>
 8007438:	3001      	adds	r0, #1
 800743a:	d03a      	beq.n	80074b2 <_malloc_r+0xea>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	442b      	add	r3, r5
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	f8d8 3000 	ldr.w	r3, [r8]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	bb62      	cbnz	r2, 80074a4 <_malloc_r+0xdc>
 800744a:	f8c8 7000 	str.w	r7, [r8]
 800744e:	e00f      	b.n	8007470 <_malloc_r+0xa8>
 8007450:	6822      	ldr	r2, [r4, #0]
 8007452:	1b52      	subs	r2, r2, r5
 8007454:	d420      	bmi.n	8007498 <_malloc_r+0xd0>
 8007456:	2a0b      	cmp	r2, #11
 8007458:	d917      	bls.n	800748a <_malloc_r+0xc2>
 800745a:	1961      	adds	r1, r4, r5
 800745c:	42a3      	cmp	r3, r4
 800745e:	6025      	str	r5, [r4, #0]
 8007460:	bf18      	it	ne
 8007462:	6059      	strne	r1, [r3, #4]
 8007464:	6863      	ldr	r3, [r4, #4]
 8007466:	bf08      	it	eq
 8007468:	f8c8 1000 	streq.w	r1, [r8]
 800746c:	5162      	str	r2, [r4, r5]
 800746e:	604b      	str	r3, [r1, #4]
 8007470:	4630      	mov	r0, r6
 8007472:	f000 f82f 	bl	80074d4 <__malloc_unlock>
 8007476:	f104 000b 	add.w	r0, r4, #11
 800747a:	1d23      	adds	r3, r4, #4
 800747c:	f020 0007 	bic.w	r0, r0, #7
 8007480:	1ac2      	subs	r2, r0, r3
 8007482:	bf1c      	itt	ne
 8007484:	1a1b      	subne	r3, r3, r0
 8007486:	50a3      	strne	r3, [r4, r2]
 8007488:	e7af      	b.n	80073ea <_malloc_r+0x22>
 800748a:	6862      	ldr	r2, [r4, #4]
 800748c:	42a3      	cmp	r3, r4
 800748e:	bf0c      	ite	eq
 8007490:	f8c8 2000 	streq.w	r2, [r8]
 8007494:	605a      	strne	r2, [r3, #4]
 8007496:	e7eb      	b.n	8007470 <_malloc_r+0xa8>
 8007498:	4623      	mov	r3, r4
 800749a:	6864      	ldr	r4, [r4, #4]
 800749c:	e7ae      	b.n	80073fc <_malloc_r+0x34>
 800749e:	463c      	mov	r4, r7
 80074a0:	687f      	ldr	r7, [r7, #4]
 80074a2:	e7b6      	b.n	8007412 <_malloc_r+0x4a>
 80074a4:	461a      	mov	r2, r3
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	42a3      	cmp	r3, r4
 80074aa:	d1fb      	bne.n	80074a4 <_malloc_r+0xdc>
 80074ac:	2300      	movs	r3, #0
 80074ae:	6053      	str	r3, [r2, #4]
 80074b0:	e7de      	b.n	8007470 <_malloc_r+0xa8>
 80074b2:	230c      	movs	r3, #12
 80074b4:	6033      	str	r3, [r6, #0]
 80074b6:	4630      	mov	r0, r6
 80074b8:	f000 f80c 	bl	80074d4 <__malloc_unlock>
 80074bc:	e794      	b.n	80073e8 <_malloc_r+0x20>
 80074be:	6005      	str	r5, [r0, #0]
 80074c0:	e7d6      	b.n	8007470 <_malloc_r+0xa8>
 80074c2:	bf00      	nop
 80074c4:	200005cc 	.word	0x200005cc

080074c8 <__malloc_lock>:
 80074c8:	4801      	ldr	r0, [pc, #4]	@ (80074d0 <__malloc_lock+0x8>)
 80074ca:	f7ff b8ba 	b.w	8006642 <__retarget_lock_acquire_recursive>
 80074ce:	bf00      	nop
 80074d0:	200005c4 	.word	0x200005c4

080074d4 <__malloc_unlock>:
 80074d4:	4801      	ldr	r0, [pc, #4]	@ (80074dc <__malloc_unlock+0x8>)
 80074d6:	f7ff b8b5 	b.w	8006644 <__retarget_lock_release_recursive>
 80074da:	bf00      	nop
 80074dc:	200005c4 	.word	0x200005c4

080074e0 <_Balloc>:
 80074e0:	b570      	push	{r4, r5, r6, lr}
 80074e2:	69c6      	ldr	r6, [r0, #28]
 80074e4:	4604      	mov	r4, r0
 80074e6:	460d      	mov	r5, r1
 80074e8:	b976      	cbnz	r6, 8007508 <_Balloc+0x28>
 80074ea:	2010      	movs	r0, #16
 80074ec:	f7ff ff42 	bl	8007374 <malloc>
 80074f0:	4602      	mov	r2, r0
 80074f2:	61e0      	str	r0, [r4, #28]
 80074f4:	b920      	cbnz	r0, 8007500 <_Balloc+0x20>
 80074f6:	4b18      	ldr	r3, [pc, #96]	@ (8007558 <_Balloc+0x78>)
 80074f8:	4818      	ldr	r0, [pc, #96]	@ (800755c <_Balloc+0x7c>)
 80074fa:	216b      	movs	r1, #107	@ 0x6b
 80074fc:	f000 fdae 	bl	800805c <__assert_func>
 8007500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007504:	6006      	str	r6, [r0, #0]
 8007506:	60c6      	str	r6, [r0, #12]
 8007508:	69e6      	ldr	r6, [r4, #28]
 800750a:	68f3      	ldr	r3, [r6, #12]
 800750c:	b183      	cbz	r3, 8007530 <_Balloc+0x50>
 800750e:	69e3      	ldr	r3, [r4, #28]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007516:	b9b8      	cbnz	r0, 8007548 <_Balloc+0x68>
 8007518:	2101      	movs	r1, #1
 800751a:	fa01 f605 	lsl.w	r6, r1, r5
 800751e:	1d72      	adds	r2, r6, #5
 8007520:	0092      	lsls	r2, r2, #2
 8007522:	4620      	mov	r0, r4
 8007524:	f000 fdb8 	bl	8008098 <_calloc_r>
 8007528:	b160      	cbz	r0, 8007544 <_Balloc+0x64>
 800752a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800752e:	e00e      	b.n	800754e <_Balloc+0x6e>
 8007530:	2221      	movs	r2, #33	@ 0x21
 8007532:	2104      	movs	r1, #4
 8007534:	4620      	mov	r0, r4
 8007536:	f000 fdaf 	bl	8008098 <_calloc_r>
 800753a:	69e3      	ldr	r3, [r4, #28]
 800753c:	60f0      	str	r0, [r6, #12]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1e4      	bne.n	800750e <_Balloc+0x2e>
 8007544:	2000      	movs	r0, #0
 8007546:	bd70      	pop	{r4, r5, r6, pc}
 8007548:	6802      	ldr	r2, [r0, #0]
 800754a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800754e:	2300      	movs	r3, #0
 8007550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007554:	e7f7      	b.n	8007546 <_Balloc+0x66>
 8007556:	bf00      	nop
 8007558:	08008795 	.word	0x08008795
 800755c:	08008815 	.word	0x08008815

08007560 <_Bfree>:
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	69c6      	ldr	r6, [r0, #28]
 8007564:	4605      	mov	r5, r0
 8007566:	460c      	mov	r4, r1
 8007568:	b976      	cbnz	r6, 8007588 <_Bfree+0x28>
 800756a:	2010      	movs	r0, #16
 800756c:	f7ff ff02 	bl	8007374 <malloc>
 8007570:	4602      	mov	r2, r0
 8007572:	61e8      	str	r0, [r5, #28]
 8007574:	b920      	cbnz	r0, 8007580 <_Bfree+0x20>
 8007576:	4b09      	ldr	r3, [pc, #36]	@ (800759c <_Bfree+0x3c>)
 8007578:	4809      	ldr	r0, [pc, #36]	@ (80075a0 <_Bfree+0x40>)
 800757a:	218f      	movs	r1, #143	@ 0x8f
 800757c:	f000 fd6e 	bl	800805c <__assert_func>
 8007580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007584:	6006      	str	r6, [r0, #0]
 8007586:	60c6      	str	r6, [r0, #12]
 8007588:	b13c      	cbz	r4, 800759a <_Bfree+0x3a>
 800758a:	69eb      	ldr	r3, [r5, #28]
 800758c:	6862      	ldr	r2, [r4, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007594:	6021      	str	r1, [r4, #0]
 8007596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800759a:	bd70      	pop	{r4, r5, r6, pc}
 800759c:	08008795 	.word	0x08008795
 80075a0:	08008815 	.word	0x08008815

080075a4 <__multadd>:
 80075a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a8:	690d      	ldr	r5, [r1, #16]
 80075aa:	4607      	mov	r7, r0
 80075ac:	460c      	mov	r4, r1
 80075ae:	461e      	mov	r6, r3
 80075b0:	f101 0c14 	add.w	ip, r1, #20
 80075b4:	2000      	movs	r0, #0
 80075b6:	f8dc 3000 	ldr.w	r3, [ip]
 80075ba:	b299      	uxth	r1, r3
 80075bc:	fb02 6101 	mla	r1, r2, r1, r6
 80075c0:	0c1e      	lsrs	r6, r3, #16
 80075c2:	0c0b      	lsrs	r3, r1, #16
 80075c4:	fb02 3306 	mla	r3, r2, r6, r3
 80075c8:	b289      	uxth	r1, r1
 80075ca:	3001      	adds	r0, #1
 80075cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075d0:	4285      	cmp	r5, r0
 80075d2:	f84c 1b04 	str.w	r1, [ip], #4
 80075d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075da:	dcec      	bgt.n	80075b6 <__multadd+0x12>
 80075dc:	b30e      	cbz	r6, 8007622 <__multadd+0x7e>
 80075de:	68a3      	ldr	r3, [r4, #8]
 80075e0:	42ab      	cmp	r3, r5
 80075e2:	dc19      	bgt.n	8007618 <__multadd+0x74>
 80075e4:	6861      	ldr	r1, [r4, #4]
 80075e6:	4638      	mov	r0, r7
 80075e8:	3101      	adds	r1, #1
 80075ea:	f7ff ff79 	bl	80074e0 <_Balloc>
 80075ee:	4680      	mov	r8, r0
 80075f0:	b928      	cbnz	r0, 80075fe <__multadd+0x5a>
 80075f2:	4602      	mov	r2, r0
 80075f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007628 <__multadd+0x84>)
 80075f6:	480d      	ldr	r0, [pc, #52]	@ (800762c <__multadd+0x88>)
 80075f8:	21ba      	movs	r1, #186	@ 0xba
 80075fa:	f000 fd2f 	bl	800805c <__assert_func>
 80075fe:	6922      	ldr	r2, [r4, #16]
 8007600:	3202      	adds	r2, #2
 8007602:	f104 010c 	add.w	r1, r4, #12
 8007606:	0092      	lsls	r2, r2, #2
 8007608:	300c      	adds	r0, #12
 800760a:	f000 fd19 	bl	8008040 <memcpy>
 800760e:	4621      	mov	r1, r4
 8007610:	4638      	mov	r0, r7
 8007612:	f7ff ffa5 	bl	8007560 <_Bfree>
 8007616:	4644      	mov	r4, r8
 8007618:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800761c:	3501      	adds	r5, #1
 800761e:	615e      	str	r6, [r3, #20]
 8007620:	6125      	str	r5, [r4, #16]
 8007622:	4620      	mov	r0, r4
 8007624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007628:	08008804 	.word	0x08008804
 800762c:	08008815 	.word	0x08008815

08007630 <__hi0bits>:
 8007630:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007634:	4603      	mov	r3, r0
 8007636:	bf36      	itet	cc
 8007638:	0403      	lslcc	r3, r0, #16
 800763a:	2000      	movcs	r0, #0
 800763c:	2010      	movcc	r0, #16
 800763e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007642:	bf3c      	itt	cc
 8007644:	021b      	lslcc	r3, r3, #8
 8007646:	3008      	addcc	r0, #8
 8007648:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800764c:	bf3c      	itt	cc
 800764e:	011b      	lslcc	r3, r3, #4
 8007650:	3004      	addcc	r0, #4
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007656:	bf3c      	itt	cc
 8007658:	009b      	lslcc	r3, r3, #2
 800765a:	3002      	addcc	r0, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	db05      	blt.n	800766c <__hi0bits+0x3c>
 8007660:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007664:	f100 0001 	add.w	r0, r0, #1
 8007668:	bf08      	it	eq
 800766a:	2020      	moveq	r0, #32
 800766c:	4770      	bx	lr

0800766e <__lo0bits>:
 800766e:	6803      	ldr	r3, [r0, #0]
 8007670:	4602      	mov	r2, r0
 8007672:	f013 0007 	ands.w	r0, r3, #7
 8007676:	d00b      	beq.n	8007690 <__lo0bits+0x22>
 8007678:	07d9      	lsls	r1, r3, #31
 800767a:	d421      	bmi.n	80076c0 <__lo0bits+0x52>
 800767c:	0798      	lsls	r0, r3, #30
 800767e:	bf49      	itett	mi
 8007680:	085b      	lsrmi	r3, r3, #1
 8007682:	089b      	lsrpl	r3, r3, #2
 8007684:	2001      	movmi	r0, #1
 8007686:	6013      	strmi	r3, [r2, #0]
 8007688:	bf5c      	itt	pl
 800768a:	6013      	strpl	r3, [r2, #0]
 800768c:	2002      	movpl	r0, #2
 800768e:	4770      	bx	lr
 8007690:	b299      	uxth	r1, r3
 8007692:	b909      	cbnz	r1, 8007698 <__lo0bits+0x2a>
 8007694:	0c1b      	lsrs	r3, r3, #16
 8007696:	2010      	movs	r0, #16
 8007698:	b2d9      	uxtb	r1, r3
 800769a:	b909      	cbnz	r1, 80076a0 <__lo0bits+0x32>
 800769c:	3008      	adds	r0, #8
 800769e:	0a1b      	lsrs	r3, r3, #8
 80076a0:	0719      	lsls	r1, r3, #28
 80076a2:	bf04      	itt	eq
 80076a4:	091b      	lsreq	r3, r3, #4
 80076a6:	3004      	addeq	r0, #4
 80076a8:	0799      	lsls	r1, r3, #30
 80076aa:	bf04      	itt	eq
 80076ac:	089b      	lsreq	r3, r3, #2
 80076ae:	3002      	addeq	r0, #2
 80076b0:	07d9      	lsls	r1, r3, #31
 80076b2:	d403      	bmi.n	80076bc <__lo0bits+0x4e>
 80076b4:	085b      	lsrs	r3, r3, #1
 80076b6:	f100 0001 	add.w	r0, r0, #1
 80076ba:	d003      	beq.n	80076c4 <__lo0bits+0x56>
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	4770      	bx	lr
 80076c0:	2000      	movs	r0, #0
 80076c2:	4770      	bx	lr
 80076c4:	2020      	movs	r0, #32
 80076c6:	4770      	bx	lr

080076c8 <__i2b>:
 80076c8:	b510      	push	{r4, lr}
 80076ca:	460c      	mov	r4, r1
 80076cc:	2101      	movs	r1, #1
 80076ce:	f7ff ff07 	bl	80074e0 <_Balloc>
 80076d2:	4602      	mov	r2, r0
 80076d4:	b928      	cbnz	r0, 80076e2 <__i2b+0x1a>
 80076d6:	4b05      	ldr	r3, [pc, #20]	@ (80076ec <__i2b+0x24>)
 80076d8:	4805      	ldr	r0, [pc, #20]	@ (80076f0 <__i2b+0x28>)
 80076da:	f240 1145 	movw	r1, #325	@ 0x145
 80076de:	f000 fcbd 	bl	800805c <__assert_func>
 80076e2:	2301      	movs	r3, #1
 80076e4:	6144      	str	r4, [r0, #20]
 80076e6:	6103      	str	r3, [r0, #16]
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	bf00      	nop
 80076ec:	08008804 	.word	0x08008804
 80076f0:	08008815 	.word	0x08008815

080076f4 <__multiply>:
 80076f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f8:	4614      	mov	r4, r2
 80076fa:	690a      	ldr	r2, [r1, #16]
 80076fc:	6923      	ldr	r3, [r4, #16]
 80076fe:	429a      	cmp	r2, r3
 8007700:	bfa8      	it	ge
 8007702:	4623      	movge	r3, r4
 8007704:	460f      	mov	r7, r1
 8007706:	bfa4      	itt	ge
 8007708:	460c      	movge	r4, r1
 800770a:	461f      	movge	r7, r3
 800770c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007710:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007714:	68a3      	ldr	r3, [r4, #8]
 8007716:	6861      	ldr	r1, [r4, #4]
 8007718:	eb0a 0609 	add.w	r6, sl, r9
 800771c:	42b3      	cmp	r3, r6
 800771e:	b085      	sub	sp, #20
 8007720:	bfb8      	it	lt
 8007722:	3101      	addlt	r1, #1
 8007724:	f7ff fedc 	bl	80074e0 <_Balloc>
 8007728:	b930      	cbnz	r0, 8007738 <__multiply+0x44>
 800772a:	4602      	mov	r2, r0
 800772c:	4b44      	ldr	r3, [pc, #272]	@ (8007840 <__multiply+0x14c>)
 800772e:	4845      	ldr	r0, [pc, #276]	@ (8007844 <__multiply+0x150>)
 8007730:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007734:	f000 fc92 	bl	800805c <__assert_func>
 8007738:	f100 0514 	add.w	r5, r0, #20
 800773c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007740:	462b      	mov	r3, r5
 8007742:	2200      	movs	r2, #0
 8007744:	4543      	cmp	r3, r8
 8007746:	d321      	bcc.n	800778c <__multiply+0x98>
 8007748:	f107 0114 	add.w	r1, r7, #20
 800774c:	f104 0214 	add.w	r2, r4, #20
 8007750:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007754:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007758:	9302      	str	r3, [sp, #8]
 800775a:	1b13      	subs	r3, r2, r4
 800775c:	3b15      	subs	r3, #21
 800775e:	f023 0303 	bic.w	r3, r3, #3
 8007762:	3304      	adds	r3, #4
 8007764:	f104 0715 	add.w	r7, r4, #21
 8007768:	42ba      	cmp	r2, r7
 800776a:	bf38      	it	cc
 800776c:	2304      	movcc	r3, #4
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	9b02      	ldr	r3, [sp, #8]
 8007772:	9103      	str	r1, [sp, #12]
 8007774:	428b      	cmp	r3, r1
 8007776:	d80c      	bhi.n	8007792 <__multiply+0x9e>
 8007778:	2e00      	cmp	r6, #0
 800777a:	dd03      	ble.n	8007784 <__multiply+0x90>
 800777c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007780:	2b00      	cmp	r3, #0
 8007782:	d05b      	beq.n	800783c <__multiply+0x148>
 8007784:	6106      	str	r6, [r0, #16]
 8007786:	b005      	add	sp, #20
 8007788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778c:	f843 2b04 	str.w	r2, [r3], #4
 8007790:	e7d8      	b.n	8007744 <__multiply+0x50>
 8007792:	f8b1 a000 	ldrh.w	sl, [r1]
 8007796:	f1ba 0f00 	cmp.w	sl, #0
 800779a:	d024      	beq.n	80077e6 <__multiply+0xf2>
 800779c:	f104 0e14 	add.w	lr, r4, #20
 80077a0:	46a9      	mov	r9, r5
 80077a2:	f04f 0c00 	mov.w	ip, #0
 80077a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077aa:	f8d9 3000 	ldr.w	r3, [r9]
 80077ae:	fa1f fb87 	uxth.w	fp, r7
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80077b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80077bc:	f8d9 7000 	ldr.w	r7, [r9]
 80077c0:	4463      	add	r3, ip
 80077c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80077c6:	fb0a c70b 	mla	r7, sl, fp, ip
 80077ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077d4:	4572      	cmp	r2, lr
 80077d6:	f849 3b04 	str.w	r3, [r9], #4
 80077da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80077de:	d8e2      	bhi.n	80077a6 <__multiply+0xb2>
 80077e0:	9b01      	ldr	r3, [sp, #4]
 80077e2:	f845 c003 	str.w	ip, [r5, r3]
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077ec:	3104      	adds	r1, #4
 80077ee:	f1b9 0f00 	cmp.w	r9, #0
 80077f2:	d021      	beq.n	8007838 <__multiply+0x144>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	f104 0c14 	add.w	ip, r4, #20
 80077fa:	46ae      	mov	lr, r5
 80077fc:	f04f 0a00 	mov.w	sl, #0
 8007800:	f8bc b000 	ldrh.w	fp, [ip]
 8007804:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007808:	fb09 770b 	mla	r7, r9, fp, r7
 800780c:	4457      	add	r7, sl
 800780e:	b29b      	uxth	r3, r3
 8007810:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007814:	f84e 3b04 	str.w	r3, [lr], #4
 8007818:	f85c 3b04 	ldr.w	r3, [ip], #4
 800781c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007820:	f8be 3000 	ldrh.w	r3, [lr]
 8007824:	fb09 330a 	mla	r3, r9, sl, r3
 8007828:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800782c:	4562      	cmp	r2, ip
 800782e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007832:	d8e5      	bhi.n	8007800 <__multiply+0x10c>
 8007834:	9f01      	ldr	r7, [sp, #4]
 8007836:	51eb      	str	r3, [r5, r7]
 8007838:	3504      	adds	r5, #4
 800783a:	e799      	b.n	8007770 <__multiply+0x7c>
 800783c:	3e01      	subs	r6, #1
 800783e:	e79b      	b.n	8007778 <__multiply+0x84>
 8007840:	08008804 	.word	0x08008804
 8007844:	08008815 	.word	0x08008815

08007848 <__pow5mult>:
 8007848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800784c:	4615      	mov	r5, r2
 800784e:	f012 0203 	ands.w	r2, r2, #3
 8007852:	4607      	mov	r7, r0
 8007854:	460e      	mov	r6, r1
 8007856:	d007      	beq.n	8007868 <__pow5mult+0x20>
 8007858:	4c25      	ldr	r4, [pc, #148]	@ (80078f0 <__pow5mult+0xa8>)
 800785a:	3a01      	subs	r2, #1
 800785c:	2300      	movs	r3, #0
 800785e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007862:	f7ff fe9f 	bl	80075a4 <__multadd>
 8007866:	4606      	mov	r6, r0
 8007868:	10ad      	asrs	r5, r5, #2
 800786a:	d03d      	beq.n	80078e8 <__pow5mult+0xa0>
 800786c:	69fc      	ldr	r4, [r7, #28]
 800786e:	b97c      	cbnz	r4, 8007890 <__pow5mult+0x48>
 8007870:	2010      	movs	r0, #16
 8007872:	f7ff fd7f 	bl	8007374 <malloc>
 8007876:	4602      	mov	r2, r0
 8007878:	61f8      	str	r0, [r7, #28]
 800787a:	b928      	cbnz	r0, 8007888 <__pow5mult+0x40>
 800787c:	4b1d      	ldr	r3, [pc, #116]	@ (80078f4 <__pow5mult+0xac>)
 800787e:	481e      	ldr	r0, [pc, #120]	@ (80078f8 <__pow5mult+0xb0>)
 8007880:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007884:	f000 fbea 	bl	800805c <__assert_func>
 8007888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800788c:	6004      	str	r4, [r0, #0]
 800788e:	60c4      	str	r4, [r0, #12]
 8007890:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007898:	b94c      	cbnz	r4, 80078ae <__pow5mult+0x66>
 800789a:	f240 2171 	movw	r1, #625	@ 0x271
 800789e:	4638      	mov	r0, r7
 80078a0:	f7ff ff12 	bl	80076c8 <__i2b>
 80078a4:	2300      	movs	r3, #0
 80078a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80078aa:	4604      	mov	r4, r0
 80078ac:	6003      	str	r3, [r0, #0]
 80078ae:	f04f 0900 	mov.w	r9, #0
 80078b2:	07eb      	lsls	r3, r5, #31
 80078b4:	d50a      	bpl.n	80078cc <__pow5mult+0x84>
 80078b6:	4631      	mov	r1, r6
 80078b8:	4622      	mov	r2, r4
 80078ba:	4638      	mov	r0, r7
 80078bc:	f7ff ff1a 	bl	80076f4 <__multiply>
 80078c0:	4631      	mov	r1, r6
 80078c2:	4680      	mov	r8, r0
 80078c4:	4638      	mov	r0, r7
 80078c6:	f7ff fe4b 	bl	8007560 <_Bfree>
 80078ca:	4646      	mov	r6, r8
 80078cc:	106d      	asrs	r5, r5, #1
 80078ce:	d00b      	beq.n	80078e8 <__pow5mult+0xa0>
 80078d0:	6820      	ldr	r0, [r4, #0]
 80078d2:	b938      	cbnz	r0, 80078e4 <__pow5mult+0x9c>
 80078d4:	4622      	mov	r2, r4
 80078d6:	4621      	mov	r1, r4
 80078d8:	4638      	mov	r0, r7
 80078da:	f7ff ff0b 	bl	80076f4 <__multiply>
 80078de:	6020      	str	r0, [r4, #0]
 80078e0:	f8c0 9000 	str.w	r9, [r0]
 80078e4:	4604      	mov	r4, r0
 80078e6:	e7e4      	b.n	80078b2 <__pow5mult+0x6a>
 80078e8:	4630      	mov	r0, r6
 80078ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ee:	bf00      	nop
 80078f0:	08008870 	.word	0x08008870
 80078f4:	08008795 	.word	0x08008795
 80078f8:	08008815 	.word	0x08008815

080078fc <__lshift>:
 80078fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007900:	460c      	mov	r4, r1
 8007902:	6849      	ldr	r1, [r1, #4]
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800790a:	68a3      	ldr	r3, [r4, #8]
 800790c:	4607      	mov	r7, r0
 800790e:	4691      	mov	r9, r2
 8007910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007914:	f108 0601 	add.w	r6, r8, #1
 8007918:	42b3      	cmp	r3, r6
 800791a:	db0b      	blt.n	8007934 <__lshift+0x38>
 800791c:	4638      	mov	r0, r7
 800791e:	f7ff fddf 	bl	80074e0 <_Balloc>
 8007922:	4605      	mov	r5, r0
 8007924:	b948      	cbnz	r0, 800793a <__lshift+0x3e>
 8007926:	4602      	mov	r2, r0
 8007928:	4b28      	ldr	r3, [pc, #160]	@ (80079cc <__lshift+0xd0>)
 800792a:	4829      	ldr	r0, [pc, #164]	@ (80079d0 <__lshift+0xd4>)
 800792c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007930:	f000 fb94 	bl	800805c <__assert_func>
 8007934:	3101      	adds	r1, #1
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	e7ee      	b.n	8007918 <__lshift+0x1c>
 800793a:	2300      	movs	r3, #0
 800793c:	f100 0114 	add.w	r1, r0, #20
 8007940:	f100 0210 	add.w	r2, r0, #16
 8007944:	4618      	mov	r0, r3
 8007946:	4553      	cmp	r3, sl
 8007948:	db33      	blt.n	80079b2 <__lshift+0xb6>
 800794a:	6920      	ldr	r0, [r4, #16]
 800794c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007950:	f104 0314 	add.w	r3, r4, #20
 8007954:	f019 091f 	ands.w	r9, r9, #31
 8007958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800795c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007960:	d02b      	beq.n	80079ba <__lshift+0xbe>
 8007962:	f1c9 0e20 	rsb	lr, r9, #32
 8007966:	468a      	mov	sl, r1
 8007968:	2200      	movs	r2, #0
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	fa00 f009 	lsl.w	r0, r0, r9
 8007970:	4310      	orrs	r0, r2
 8007972:	f84a 0b04 	str.w	r0, [sl], #4
 8007976:	f853 2b04 	ldr.w	r2, [r3], #4
 800797a:	459c      	cmp	ip, r3
 800797c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007980:	d8f3      	bhi.n	800796a <__lshift+0x6e>
 8007982:	ebac 0304 	sub.w	r3, ip, r4
 8007986:	3b15      	subs	r3, #21
 8007988:	f023 0303 	bic.w	r3, r3, #3
 800798c:	3304      	adds	r3, #4
 800798e:	f104 0015 	add.w	r0, r4, #21
 8007992:	4584      	cmp	ip, r0
 8007994:	bf38      	it	cc
 8007996:	2304      	movcc	r3, #4
 8007998:	50ca      	str	r2, [r1, r3]
 800799a:	b10a      	cbz	r2, 80079a0 <__lshift+0xa4>
 800799c:	f108 0602 	add.w	r6, r8, #2
 80079a0:	3e01      	subs	r6, #1
 80079a2:	4638      	mov	r0, r7
 80079a4:	612e      	str	r6, [r5, #16]
 80079a6:	4621      	mov	r1, r4
 80079a8:	f7ff fdda 	bl	8007560 <_Bfree>
 80079ac:	4628      	mov	r0, r5
 80079ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80079b6:	3301      	adds	r3, #1
 80079b8:	e7c5      	b.n	8007946 <__lshift+0x4a>
 80079ba:	3904      	subs	r1, #4
 80079bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80079c4:	459c      	cmp	ip, r3
 80079c6:	d8f9      	bhi.n	80079bc <__lshift+0xc0>
 80079c8:	e7ea      	b.n	80079a0 <__lshift+0xa4>
 80079ca:	bf00      	nop
 80079cc:	08008804 	.word	0x08008804
 80079d0:	08008815 	.word	0x08008815

080079d4 <__mcmp>:
 80079d4:	690a      	ldr	r2, [r1, #16]
 80079d6:	4603      	mov	r3, r0
 80079d8:	6900      	ldr	r0, [r0, #16]
 80079da:	1a80      	subs	r0, r0, r2
 80079dc:	b530      	push	{r4, r5, lr}
 80079de:	d10e      	bne.n	80079fe <__mcmp+0x2a>
 80079e0:	3314      	adds	r3, #20
 80079e2:	3114      	adds	r1, #20
 80079e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079f4:	4295      	cmp	r5, r2
 80079f6:	d003      	beq.n	8007a00 <__mcmp+0x2c>
 80079f8:	d205      	bcs.n	8007a06 <__mcmp+0x32>
 80079fa:	f04f 30ff 	mov.w	r0, #4294967295
 80079fe:	bd30      	pop	{r4, r5, pc}
 8007a00:	42a3      	cmp	r3, r4
 8007a02:	d3f3      	bcc.n	80079ec <__mcmp+0x18>
 8007a04:	e7fb      	b.n	80079fe <__mcmp+0x2a>
 8007a06:	2001      	movs	r0, #1
 8007a08:	e7f9      	b.n	80079fe <__mcmp+0x2a>
	...

08007a0c <__mdiff>:
 8007a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a10:	4689      	mov	r9, r1
 8007a12:	4606      	mov	r6, r0
 8007a14:	4611      	mov	r1, r2
 8007a16:	4648      	mov	r0, r9
 8007a18:	4614      	mov	r4, r2
 8007a1a:	f7ff ffdb 	bl	80079d4 <__mcmp>
 8007a1e:	1e05      	subs	r5, r0, #0
 8007a20:	d112      	bne.n	8007a48 <__mdiff+0x3c>
 8007a22:	4629      	mov	r1, r5
 8007a24:	4630      	mov	r0, r6
 8007a26:	f7ff fd5b 	bl	80074e0 <_Balloc>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	b928      	cbnz	r0, 8007a3a <__mdiff+0x2e>
 8007a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8007b2c <__mdiff+0x120>)
 8007a30:	f240 2137 	movw	r1, #567	@ 0x237
 8007a34:	483e      	ldr	r0, [pc, #248]	@ (8007b30 <__mdiff+0x124>)
 8007a36:	f000 fb11 	bl	800805c <__assert_func>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a40:	4610      	mov	r0, r2
 8007a42:	b003      	add	sp, #12
 8007a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a48:	bfbc      	itt	lt
 8007a4a:	464b      	movlt	r3, r9
 8007a4c:	46a1      	movlt	r9, r4
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a54:	bfba      	itte	lt
 8007a56:	461c      	movlt	r4, r3
 8007a58:	2501      	movlt	r5, #1
 8007a5a:	2500      	movge	r5, #0
 8007a5c:	f7ff fd40 	bl	80074e0 <_Balloc>
 8007a60:	4602      	mov	r2, r0
 8007a62:	b918      	cbnz	r0, 8007a6c <__mdiff+0x60>
 8007a64:	4b31      	ldr	r3, [pc, #196]	@ (8007b2c <__mdiff+0x120>)
 8007a66:	f240 2145 	movw	r1, #581	@ 0x245
 8007a6a:	e7e3      	b.n	8007a34 <__mdiff+0x28>
 8007a6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a70:	6926      	ldr	r6, [r4, #16]
 8007a72:	60c5      	str	r5, [r0, #12]
 8007a74:	f109 0310 	add.w	r3, r9, #16
 8007a78:	f109 0514 	add.w	r5, r9, #20
 8007a7c:	f104 0e14 	add.w	lr, r4, #20
 8007a80:	f100 0b14 	add.w	fp, r0, #20
 8007a84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	46d9      	mov	r9, fp
 8007a90:	f04f 0c00 	mov.w	ip, #0
 8007a94:	9b01      	ldr	r3, [sp, #4]
 8007a96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	fa1f f38a 	uxth.w	r3, sl
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	b283      	uxth	r3, r0
 8007aa8:	1acb      	subs	r3, r1, r3
 8007aaa:	0c00      	lsrs	r0, r0, #16
 8007aac:	4463      	add	r3, ip
 8007aae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ab2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007abc:	4576      	cmp	r6, lr
 8007abe:	f849 3b04 	str.w	r3, [r9], #4
 8007ac2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ac6:	d8e5      	bhi.n	8007a94 <__mdiff+0x88>
 8007ac8:	1b33      	subs	r3, r6, r4
 8007aca:	3b15      	subs	r3, #21
 8007acc:	f023 0303 	bic.w	r3, r3, #3
 8007ad0:	3415      	adds	r4, #21
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	42a6      	cmp	r6, r4
 8007ad6:	bf38      	it	cc
 8007ad8:	2304      	movcc	r3, #4
 8007ada:	441d      	add	r5, r3
 8007adc:	445b      	add	r3, fp
 8007ade:	461e      	mov	r6, r3
 8007ae0:	462c      	mov	r4, r5
 8007ae2:	4544      	cmp	r4, r8
 8007ae4:	d30e      	bcc.n	8007b04 <__mdiff+0xf8>
 8007ae6:	f108 0103 	add.w	r1, r8, #3
 8007aea:	1b49      	subs	r1, r1, r5
 8007aec:	f021 0103 	bic.w	r1, r1, #3
 8007af0:	3d03      	subs	r5, #3
 8007af2:	45a8      	cmp	r8, r5
 8007af4:	bf38      	it	cc
 8007af6:	2100      	movcc	r1, #0
 8007af8:	440b      	add	r3, r1
 8007afa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007afe:	b191      	cbz	r1, 8007b26 <__mdiff+0x11a>
 8007b00:	6117      	str	r7, [r2, #16]
 8007b02:	e79d      	b.n	8007a40 <__mdiff+0x34>
 8007b04:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b08:	46e6      	mov	lr, ip
 8007b0a:	0c08      	lsrs	r0, r1, #16
 8007b0c:	fa1c fc81 	uxtah	ip, ip, r1
 8007b10:	4471      	add	r1, lr
 8007b12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b16:	b289      	uxth	r1, r1
 8007b18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b1c:	f846 1b04 	str.w	r1, [r6], #4
 8007b20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b24:	e7dd      	b.n	8007ae2 <__mdiff+0xd6>
 8007b26:	3f01      	subs	r7, #1
 8007b28:	e7e7      	b.n	8007afa <__mdiff+0xee>
 8007b2a:	bf00      	nop
 8007b2c:	08008804 	.word	0x08008804
 8007b30:	08008815 	.word	0x08008815

08007b34 <__d2b>:
 8007b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b38:	460f      	mov	r7, r1
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	ec59 8b10 	vmov	r8, r9, d0
 8007b40:	4616      	mov	r6, r2
 8007b42:	f7ff fccd 	bl	80074e0 <_Balloc>
 8007b46:	4604      	mov	r4, r0
 8007b48:	b930      	cbnz	r0, 8007b58 <__d2b+0x24>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	4b23      	ldr	r3, [pc, #140]	@ (8007bdc <__d2b+0xa8>)
 8007b4e:	4824      	ldr	r0, [pc, #144]	@ (8007be0 <__d2b+0xac>)
 8007b50:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b54:	f000 fa82 	bl	800805c <__assert_func>
 8007b58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b60:	b10d      	cbz	r5, 8007b66 <__d2b+0x32>
 8007b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b66:	9301      	str	r3, [sp, #4]
 8007b68:	f1b8 0300 	subs.w	r3, r8, #0
 8007b6c:	d023      	beq.n	8007bb6 <__d2b+0x82>
 8007b6e:	4668      	mov	r0, sp
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	f7ff fd7c 	bl	800766e <__lo0bits>
 8007b76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b7a:	b1d0      	cbz	r0, 8007bb2 <__d2b+0x7e>
 8007b7c:	f1c0 0320 	rsb	r3, r0, #32
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	430b      	orrs	r3, r1
 8007b86:	40c2      	lsrs	r2, r0
 8007b88:	6163      	str	r3, [r4, #20]
 8007b8a:	9201      	str	r2, [sp, #4]
 8007b8c:	9b01      	ldr	r3, [sp, #4]
 8007b8e:	61a3      	str	r3, [r4, #24]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bf0c      	ite	eq
 8007b94:	2201      	moveq	r2, #1
 8007b96:	2202      	movne	r2, #2
 8007b98:	6122      	str	r2, [r4, #16]
 8007b9a:	b1a5      	cbz	r5, 8007bc6 <__d2b+0x92>
 8007b9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ba0:	4405      	add	r5, r0
 8007ba2:	603d      	str	r5, [r7, #0]
 8007ba4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ba8:	6030      	str	r0, [r6, #0]
 8007baa:	4620      	mov	r0, r4
 8007bac:	b003      	add	sp, #12
 8007bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bb2:	6161      	str	r1, [r4, #20]
 8007bb4:	e7ea      	b.n	8007b8c <__d2b+0x58>
 8007bb6:	a801      	add	r0, sp, #4
 8007bb8:	f7ff fd59 	bl	800766e <__lo0bits>
 8007bbc:	9b01      	ldr	r3, [sp, #4]
 8007bbe:	6163      	str	r3, [r4, #20]
 8007bc0:	3020      	adds	r0, #32
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	e7e8      	b.n	8007b98 <__d2b+0x64>
 8007bc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007bce:	6038      	str	r0, [r7, #0]
 8007bd0:	6918      	ldr	r0, [r3, #16]
 8007bd2:	f7ff fd2d 	bl	8007630 <__hi0bits>
 8007bd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bda:	e7e5      	b.n	8007ba8 <__d2b+0x74>
 8007bdc:	08008804 	.word	0x08008804
 8007be0:	08008815 	.word	0x08008815

08007be4 <__ssputs_r>:
 8007be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be8:	688e      	ldr	r6, [r1, #8]
 8007bea:	461f      	mov	r7, r3
 8007bec:	42be      	cmp	r6, r7
 8007bee:	680b      	ldr	r3, [r1, #0]
 8007bf0:	4682      	mov	sl, r0
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	4690      	mov	r8, r2
 8007bf6:	d82d      	bhi.n	8007c54 <__ssputs_r+0x70>
 8007bf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c00:	d026      	beq.n	8007c50 <__ssputs_r+0x6c>
 8007c02:	6965      	ldr	r5, [r4, #20]
 8007c04:	6909      	ldr	r1, [r1, #16]
 8007c06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c0a:	eba3 0901 	sub.w	r9, r3, r1
 8007c0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c12:	1c7b      	adds	r3, r7, #1
 8007c14:	444b      	add	r3, r9
 8007c16:	106d      	asrs	r5, r5, #1
 8007c18:	429d      	cmp	r5, r3
 8007c1a:	bf38      	it	cc
 8007c1c:	461d      	movcc	r5, r3
 8007c1e:	0553      	lsls	r3, r2, #21
 8007c20:	d527      	bpl.n	8007c72 <__ssputs_r+0x8e>
 8007c22:	4629      	mov	r1, r5
 8007c24:	f7ff fbd0 	bl	80073c8 <_malloc_r>
 8007c28:	4606      	mov	r6, r0
 8007c2a:	b360      	cbz	r0, 8007c86 <__ssputs_r+0xa2>
 8007c2c:	6921      	ldr	r1, [r4, #16]
 8007c2e:	464a      	mov	r2, r9
 8007c30:	f000 fa06 	bl	8008040 <memcpy>
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c3e:	81a3      	strh	r3, [r4, #12]
 8007c40:	6126      	str	r6, [r4, #16]
 8007c42:	6165      	str	r5, [r4, #20]
 8007c44:	444e      	add	r6, r9
 8007c46:	eba5 0509 	sub.w	r5, r5, r9
 8007c4a:	6026      	str	r6, [r4, #0]
 8007c4c:	60a5      	str	r5, [r4, #8]
 8007c4e:	463e      	mov	r6, r7
 8007c50:	42be      	cmp	r6, r7
 8007c52:	d900      	bls.n	8007c56 <__ssputs_r+0x72>
 8007c54:	463e      	mov	r6, r7
 8007c56:	6820      	ldr	r0, [r4, #0]
 8007c58:	4632      	mov	r2, r6
 8007c5a:	4641      	mov	r1, r8
 8007c5c:	f000 f9c6 	bl	8007fec <memmove>
 8007c60:	68a3      	ldr	r3, [r4, #8]
 8007c62:	1b9b      	subs	r3, r3, r6
 8007c64:	60a3      	str	r3, [r4, #8]
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	4433      	add	r3, r6
 8007c6a:	6023      	str	r3, [r4, #0]
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c72:	462a      	mov	r2, r5
 8007c74:	f000 fa36 	bl	80080e4 <_realloc_r>
 8007c78:	4606      	mov	r6, r0
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d1e0      	bne.n	8007c40 <__ssputs_r+0x5c>
 8007c7e:	6921      	ldr	r1, [r4, #16]
 8007c80:	4650      	mov	r0, sl
 8007c82:	f7ff fb2d 	bl	80072e0 <_free_r>
 8007c86:	230c      	movs	r3, #12
 8007c88:	f8ca 3000 	str.w	r3, [sl]
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	e7e9      	b.n	8007c6e <__ssputs_r+0x8a>
	...

08007c9c <_svfiprintf_r>:
 8007c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca0:	4698      	mov	r8, r3
 8007ca2:	898b      	ldrh	r3, [r1, #12]
 8007ca4:	061b      	lsls	r3, r3, #24
 8007ca6:	b09d      	sub	sp, #116	@ 0x74
 8007ca8:	4607      	mov	r7, r0
 8007caa:	460d      	mov	r5, r1
 8007cac:	4614      	mov	r4, r2
 8007cae:	d510      	bpl.n	8007cd2 <_svfiprintf_r+0x36>
 8007cb0:	690b      	ldr	r3, [r1, #16]
 8007cb2:	b973      	cbnz	r3, 8007cd2 <_svfiprintf_r+0x36>
 8007cb4:	2140      	movs	r1, #64	@ 0x40
 8007cb6:	f7ff fb87 	bl	80073c8 <_malloc_r>
 8007cba:	6028      	str	r0, [r5, #0]
 8007cbc:	6128      	str	r0, [r5, #16]
 8007cbe:	b930      	cbnz	r0, 8007cce <_svfiprintf_r+0x32>
 8007cc0:	230c      	movs	r3, #12
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	b01d      	add	sp, #116	@ 0x74
 8007cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cce:	2340      	movs	r3, #64	@ 0x40
 8007cd0:	616b      	str	r3, [r5, #20]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cd6:	2320      	movs	r3, #32
 8007cd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ce0:	2330      	movs	r3, #48	@ 0x30
 8007ce2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007e80 <_svfiprintf_r+0x1e4>
 8007ce6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cea:	f04f 0901 	mov.w	r9, #1
 8007cee:	4623      	mov	r3, r4
 8007cf0:	469a      	mov	sl, r3
 8007cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf6:	b10a      	cbz	r2, 8007cfc <_svfiprintf_r+0x60>
 8007cf8:	2a25      	cmp	r2, #37	@ 0x25
 8007cfa:	d1f9      	bne.n	8007cf0 <_svfiprintf_r+0x54>
 8007cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8007d00:	d00b      	beq.n	8007d1a <_svfiprintf_r+0x7e>
 8007d02:	465b      	mov	r3, fp
 8007d04:	4622      	mov	r2, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	4638      	mov	r0, r7
 8007d0a:	f7ff ff6b 	bl	8007be4 <__ssputs_r>
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f000 80a7 	beq.w	8007e62 <_svfiprintf_r+0x1c6>
 8007d14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d16:	445a      	add	r2, fp
 8007d18:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 809f 	beq.w	8007e62 <_svfiprintf_r+0x1c6>
 8007d24:	2300      	movs	r3, #0
 8007d26:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d2e:	f10a 0a01 	add.w	sl, sl, #1
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	9307      	str	r3, [sp, #28]
 8007d36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d3c:	4654      	mov	r4, sl
 8007d3e:	2205      	movs	r2, #5
 8007d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d44:	484e      	ldr	r0, [pc, #312]	@ (8007e80 <_svfiprintf_r+0x1e4>)
 8007d46:	f7f8 fa43 	bl	80001d0 <memchr>
 8007d4a:	9a04      	ldr	r2, [sp, #16]
 8007d4c:	b9d8      	cbnz	r0, 8007d86 <_svfiprintf_r+0xea>
 8007d4e:	06d0      	lsls	r0, r2, #27
 8007d50:	bf44      	itt	mi
 8007d52:	2320      	movmi	r3, #32
 8007d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d58:	0711      	lsls	r1, r2, #28
 8007d5a:	bf44      	itt	mi
 8007d5c:	232b      	movmi	r3, #43	@ 0x2b
 8007d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d62:	f89a 3000 	ldrb.w	r3, [sl]
 8007d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d68:	d015      	beq.n	8007d96 <_svfiprintf_r+0xfa>
 8007d6a:	9a07      	ldr	r2, [sp, #28]
 8007d6c:	4654      	mov	r4, sl
 8007d6e:	2000      	movs	r0, #0
 8007d70:	f04f 0c0a 	mov.w	ip, #10
 8007d74:	4621      	mov	r1, r4
 8007d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d7a:	3b30      	subs	r3, #48	@ 0x30
 8007d7c:	2b09      	cmp	r3, #9
 8007d7e:	d94b      	bls.n	8007e18 <_svfiprintf_r+0x17c>
 8007d80:	b1b0      	cbz	r0, 8007db0 <_svfiprintf_r+0x114>
 8007d82:	9207      	str	r2, [sp, #28]
 8007d84:	e014      	b.n	8007db0 <_svfiprintf_r+0x114>
 8007d86:	eba0 0308 	sub.w	r3, r0, r8
 8007d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	46a2      	mov	sl, r4
 8007d94:	e7d2      	b.n	8007d3c <_svfiprintf_r+0xa0>
 8007d96:	9b03      	ldr	r3, [sp, #12]
 8007d98:	1d19      	adds	r1, r3, #4
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	9103      	str	r1, [sp, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bfbb      	ittet	lt
 8007da2:	425b      	neglt	r3, r3
 8007da4:	f042 0202 	orrlt.w	r2, r2, #2
 8007da8:	9307      	strge	r3, [sp, #28]
 8007daa:	9307      	strlt	r3, [sp, #28]
 8007dac:	bfb8      	it	lt
 8007dae:	9204      	strlt	r2, [sp, #16]
 8007db0:	7823      	ldrb	r3, [r4, #0]
 8007db2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007db4:	d10a      	bne.n	8007dcc <_svfiprintf_r+0x130>
 8007db6:	7863      	ldrb	r3, [r4, #1]
 8007db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dba:	d132      	bne.n	8007e22 <_svfiprintf_r+0x186>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	1d1a      	adds	r2, r3, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	9203      	str	r2, [sp, #12]
 8007dc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007dc8:	3402      	adds	r4, #2
 8007dca:	9305      	str	r3, [sp, #20]
 8007dcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007e90 <_svfiprintf_r+0x1f4>
 8007dd0:	7821      	ldrb	r1, [r4, #0]
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	f7f8 f9fb 	bl	80001d0 <memchr>
 8007dda:	b138      	cbz	r0, 8007dec <_svfiprintf_r+0x150>
 8007ddc:	9b04      	ldr	r3, [sp, #16]
 8007dde:	eba0 000a 	sub.w	r0, r0, sl
 8007de2:	2240      	movs	r2, #64	@ 0x40
 8007de4:	4082      	lsls	r2, r0
 8007de6:	4313      	orrs	r3, r2
 8007de8:	3401      	adds	r4, #1
 8007dea:	9304      	str	r3, [sp, #16]
 8007dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df0:	4824      	ldr	r0, [pc, #144]	@ (8007e84 <_svfiprintf_r+0x1e8>)
 8007df2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007df6:	2206      	movs	r2, #6
 8007df8:	f7f8 f9ea 	bl	80001d0 <memchr>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d036      	beq.n	8007e6e <_svfiprintf_r+0x1d2>
 8007e00:	4b21      	ldr	r3, [pc, #132]	@ (8007e88 <_svfiprintf_r+0x1ec>)
 8007e02:	bb1b      	cbnz	r3, 8007e4c <_svfiprintf_r+0x1b0>
 8007e04:	9b03      	ldr	r3, [sp, #12]
 8007e06:	3307      	adds	r3, #7
 8007e08:	f023 0307 	bic.w	r3, r3, #7
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	9303      	str	r3, [sp, #12]
 8007e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e12:	4433      	add	r3, r6
 8007e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e16:	e76a      	b.n	8007cee <_svfiprintf_r+0x52>
 8007e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	2001      	movs	r0, #1
 8007e20:	e7a8      	b.n	8007d74 <_svfiprintf_r+0xd8>
 8007e22:	2300      	movs	r3, #0
 8007e24:	3401      	adds	r4, #1
 8007e26:	9305      	str	r3, [sp, #20]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	f04f 0c0a 	mov.w	ip, #10
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e34:	3a30      	subs	r2, #48	@ 0x30
 8007e36:	2a09      	cmp	r2, #9
 8007e38:	d903      	bls.n	8007e42 <_svfiprintf_r+0x1a6>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0c6      	beq.n	8007dcc <_svfiprintf_r+0x130>
 8007e3e:	9105      	str	r1, [sp, #20]
 8007e40:	e7c4      	b.n	8007dcc <_svfiprintf_r+0x130>
 8007e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e46:	4604      	mov	r4, r0
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e7f0      	b.n	8007e2e <_svfiprintf_r+0x192>
 8007e4c:	ab03      	add	r3, sp, #12
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	462a      	mov	r2, r5
 8007e52:	4b0e      	ldr	r3, [pc, #56]	@ (8007e8c <_svfiprintf_r+0x1f0>)
 8007e54:	a904      	add	r1, sp, #16
 8007e56:	4638      	mov	r0, r7
 8007e58:	f7fd fe98 	bl	8005b8c <_printf_float>
 8007e5c:	1c42      	adds	r2, r0, #1
 8007e5e:	4606      	mov	r6, r0
 8007e60:	d1d6      	bne.n	8007e10 <_svfiprintf_r+0x174>
 8007e62:	89ab      	ldrh	r3, [r5, #12]
 8007e64:	065b      	lsls	r3, r3, #25
 8007e66:	f53f af2d 	bmi.w	8007cc4 <_svfiprintf_r+0x28>
 8007e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e6c:	e72c      	b.n	8007cc8 <_svfiprintf_r+0x2c>
 8007e6e:	ab03      	add	r3, sp, #12
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	462a      	mov	r2, r5
 8007e74:	4b05      	ldr	r3, [pc, #20]	@ (8007e8c <_svfiprintf_r+0x1f0>)
 8007e76:	a904      	add	r1, sp, #16
 8007e78:	4638      	mov	r0, r7
 8007e7a:	f7fe f91f 	bl	80060bc <_printf_i>
 8007e7e:	e7ed      	b.n	8007e5c <_svfiprintf_r+0x1c0>
 8007e80:	08008970 	.word	0x08008970
 8007e84:	0800897a 	.word	0x0800897a
 8007e88:	08005b8d 	.word	0x08005b8d
 8007e8c:	08007be5 	.word	0x08007be5
 8007e90:	08008976 	.word	0x08008976

08007e94 <__sflush_r>:
 8007e94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e9c:	0716      	lsls	r6, r2, #28
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	d454      	bmi.n	8007f4e <__sflush_r+0xba>
 8007ea4:	684b      	ldr	r3, [r1, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dc02      	bgt.n	8007eb0 <__sflush_r+0x1c>
 8007eaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dd48      	ble.n	8007f42 <__sflush_r+0xae>
 8007eb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007eb2:	2e00      	cmp	r6, #0
 8007eb4:	d045      	beq.n	8007f42 <__sflush_r+0xae>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ebc:	682f      	ldr	r7, [r5, #0]
 8007ebe:	6a21      	ldr	r1, [r4, #32]
 8007ec0:	602b      	str	r3, [r5, #0]
 8007ec2:	d030      	beq.n	8007f26 <__sflush_r+0x92>
 8007ec4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	0759      	lsls	r1, r3, #29
 8007eca:	d505      	bpl.n	8007ed8 <__sflush_r+0x44>
 8007ecc:	6863      	ldr	r3, [r4, #4]
 8007ece:	1ad2      	subs	r2, r2, r3
 8007ed0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ed2:	b10b      	cbz	r3, 8007ed8 <__sflush_r+0x44>
 8007ed4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ed6:	1ad2      	subs	r2, r2, r3
 8007ed8:	2300      	movs	r3, #0
 8007eda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007edc:	6a21      	ldr	r1, [r4, #32]
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b0      	blx	r6
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	d106      	bne.n	8007ef6 <__sflush_r+0x62>
 8007ee8:	6829      	ldr	r1, [r5, #0]
 8007eea:	291d      	cmp	r1, #29
 8007eec:	d82b      	bhi.n	8007f46 <__sflush_r+0xb2>
 8007eee:	4a2a      	ldr	r2, [pc, #168]	@ (8007f98 <__sflush_r+0x104>)
 8007ef0:	410a      	asrs	r2, r1
 8007ef2:	07d6      	lsls	r6, r2, #31
 8007ef4:	d427      	bmi.n	8007f46 <__sflush_r+0xb2>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	6062      	str	r2, [r4, #4]
 8007efa:	04d9      	lsls	r1, r3, #19
 8007efc:	6922      	ldr	r2, [r4, #16]
 8007efe:	6022      	str	r2, [r4, #0]
 8007f00:	d504      	bpl.n	8007f0c <__sflush_r+0x78>
 8007f02:	1c42      	adds	r2, r0, #1
 8007f04:	d101      	bne.n	8007f0a <__sflush_r+0x76>
 8007f06:	682b      	ldr	r3, [r5, #0]
 8007f08:	b903      	cbnz	r3, 8007f0c <__sflush_r+0x78>
 8007f0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f0e:	602f      	str	r7, [r5, #0]
 8007f10:	b1b9      	cbz	r1, 8007f42 <__sflush_r+0xae>
 8007f12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f16:	4299      	cmp	r1, r3
 8007f18:	d002      	beq.n	8007f20 <__sflush_r+0x8c>
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f7ff f9e0 	bl	80072e0 <_free_r>
 8007f20:	2300      	movs	r3, #0
 8007f22:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f24:	e00d      	b.n	8007f42 <__sflush_r+0xae>
 8007f26:	2301      	movs	r3, #1
 8007f28:	4628      	mov	r0, r5
 8007f2a:	47b0      	blx	r6
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	1c50      	adds	r0, r2, #1
 8007f30:	d1c9      	bne.n	8007ec6 <__sflush_r+0x32>
 8007f32:	682b      	ldr	r3, [r5, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d0c6      	beq.n	8007ec6 <__sflush_r+0x32>
 8007f38:	2b1d      	cmp	r3, #29
 8007f3a:	d001      	beq.n	8007f40 <__sflush_r+0xac>
 8007f3c:	2b16      	cmp	r3, #22
 8007f3e:	d11e      	bne.n	8007f7e <__sflush_r+0xea>
 8007f40:	602f      	str	r7, [r5, #0]
 8007f42:	2000      	movs	r0, #0
 8007f44:	e022      	b.n	8007f8c <__sflush_r+0xf8>
 8007f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f4a:	b21b      	sxth	r3, r3
 8007f4c:	e01b      	b.n	8007f86 <__sflush_r+0xf2>
 8007f4e:	690f      	ldr	r7, [r1, #16]
 8007f50:	2f00      	cmp	r7, #0
 8007f52:	d0f6      	beq.n	8007f42 <__sflush_r+0xae>
 8007f54:	0793      	lsls	r3, r2, #30
 8007f56:	680e      	ldr	r6, [r1, #0]
 8007f58:	bf08      	it	eq
 8007f5a:	694b      	ldreq	r3, [r1, #20]
 8007f5c:	600f      	str	r7, [r1, #0]
 8007f5e:	bf18      	it	ne
 8007f60:	2300      	movne	r3, #0
 8007f62:	eba6 0807 	sub.w	r8, r6, r7
 8007f66:	608b      	str	r3, [r1, #8]
 8007f68:	f1b8 0f00 	cmp.w	r8, #0
 8007f6c:	dde9      	ble.n	8007f42 <__sflush_r+0xae>
 8007f6e:	6a21      	ldr	r1, [r4, #32]
 8007f70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f72:	4643      	mov	r3, r8
 8007f74:	463a      	mov	r2, r7
 8007f76:	4628      	mov	r0, r5
 8007f78:	47b0      	blx	r6
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	dc08      	bgt.n	8007f90 <__sflush_r+0xfc>
 8007f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f86:	81a3      	strh	r3, [r4, #12]
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f90:	4407      	add	r7, r0
 8007f92:	eba8 0800 	sub.w	r8, r8, r0
 8007f96:	e7e7      	b.n	8007f68 <__sflush_r+0xd4>
 8007f98:	dfbffffe 	.word	0xdfbffffe

08007f9c <_fflush_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	690b      	ldr	r3, [r1, #16]
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	b913      	cbnz	r3, 8007fac <_fflush_r+0x10>
 8007fa6:	2500      	movs	r5, #0
 8007fa8:	4628      	mov	r0, r5
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	b118      	cbz	r0, 8007fb6 <_fflush_r+0x1a>
 8007fae:	6a03      	ldr	r3, [r0, #32]
 8007fb0:	b90b      	cbnz	r3, 8007fb6 <_fflush_r+0x1a>
 8007fb2:	f7fe fa2f 	bl	8006414 <__sinit>
 8007fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0f3      	beq.n	8007fa6 <_fflush_r+0xa>
 8007fbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fc0:	07d0      	lsls	r0, r2, #31
 8007fc2:	d404      	bmi.n	8007fce <_fflush_r+0x32>
 8007fc4:	0599      	lsls	r1, r3, #22
 8007fc6:	d402      	bmi.n	8007fce <_fflush_r+0x32>
 8007fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fca:	f7fe fb3a 	bl	8006642 <__retarget_lock_acquire_recursive>
 8007fce:	4628      	mov	r0, r5
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	f7ff ff5f 	bl	8007e94 <__sflush_r>
 8007fd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fd8:	07da      	lsls	r2, r3, #31
 8007fda:	4605      	mov	r5, r0
 8007fdc:	d4e4      	bmi.n	8007fa8 <_fflush_r+0xc>
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	059b      	lsls	r3, r3, #22
 8007fe2:	d4e1      	bmi.n	8007fa8 <_fflush_r+0xc>
 8007fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fe6:	f7fe fb2d 	bl	8006644 <__retarget_lock_release_recursive>
 8007fea:	e7dd      	b.n	8007fa8 <_fflush_r+0xc>

08007fec <memmove>:
 8007fec:	4288      	cmp	r0, r1
 8007fee:	b510      	push	{r4, lr}
 8007ff0:	eb01 0402 	add.w	r4, r1, r2
 8007ff4:	d902      	bls.n	8007ffc <memmove+0x10>
 8007ff6:	4284      	cmp	r4, r0
 8007ff8:	4623      	mov	r3, r4
 8007ffa:	d807      	bhi.n	800800c <memmove+0x20>
 8007ffc:	1e43      	subs	r3, r0, #1
 8007ffe:	42a1      	cmp	r1, r4
 8008000:	d008      	beq.n	8008014 <memmove+0x28>
 8008002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800800a:	e7f8      	b.n	8007ffe <memmove+0x12>
 800800c:	4402      	add	r2, r0
 800800e:	4601      	mov	r1, r0
 8008010:	428a      	cmp	r2, r1
 8008012:	d100      	bne.n	8008016 <memmove+0x2a>
 8008014:	bd10      	pop	{r4, pc}
 8008016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800801a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800801e:	e7f7      	b.n	8008010 <memmove+0x24>

08008020 <_sbrk_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4d06      	ldr	r5, [pc, #24]	@ (800803c <_sbrk_r+0x1c>)
 8008024:	2300      	movs	r3, #0
 8008026:	4604      	mov	r4, r0
 8008028:	4608      	mov	r0, r1
 800802a:	602b      	str	r3, [r5, #0]
 800802c:	f7f9 ff36 	bl	8001e9c <_sbrk>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_sbrk_r+0x1a>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	b103      	cbz	r3, 800803a <_sbrk_r+0x1a>
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	200005c0 	.word	0x200005c0

08008040 <memcpy>:
 8008040:	440a      	add	r2, r1
 8008042:	4291      	cmp	r1, r2
 8008044:	f100 33ff 	add.w	r3, r0, #4294967295
 8008048:	d100      	bne.n	800804c <memcpy+0xc>
 800804a:	4770      	bx	lr
 800804c:	b510      	push	{r4, lr}
 800804e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008056:	4291      	cmp	r1, r2
 8008058:	d1f9      	bne.n	800804e <memcpy+0xe>
 800805a:	bd10      	pop	{r4, pc}

0800805c <__assert_func>:
 800805c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800805e:	4614      	mov	r4, r2
 8008060:	461a      	mov	r2, r3
 8008062:	4b09      	ldr	r3, [pc, #36]	@ (8008088 <__assert_func+0x2c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4605      	mov	r5, r0
 8008068:	68d8      	ldr	r0, [r3, #12]
 800806a:	b954      	cbnz	r4, 8008082 <__assert_func+0x26>
 800806c:	4b07      	ldr	r3, [pc, #28]	@ (800808c <__assert_func+0x30>)
 800806e:	461c      	mov	r4, r3
 8008070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008074:	9100      	str	r1, [sp, #0]
 8008076:	462b      	mov	r3, r5
 8008078:	4905      	ldr	r1, [pc, #20]	@ (8008090 <__assert_func+0x34>)
 800807a:	f000 f86f 	bl	800815c <fiprintf>
 800807e:	f000 f87f 	bl	8008180 <abort>
 8008082:	4b04      	ldr	r3, [pc, #16]	@ (8008094 <__assert_func+0x38>)
 8008084:	e7f4      	b.n	8008070 <__assert_func+0x14>
 8008086:	bf00      	nop
 8008088:	20000018 	.word	0x20000018
 800808c:	080089c6 	.word	0x080089c6
 8008090:	08008998 	.word	0x08008998
 8008094:	0800898b 	.word	0x0800898b

08008098 <_calloc_r>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	fba1 5402 	umull	r5, r4, r1, r2
 800809e:	b93c      	cbnz	r4, 80080b0 <_calloc_r+0x18>
 80080a0:	4629      	mov	r1, r5
 80080a2:	f7ff f991 	bl	80073c8 <_malloc_r>
 80080a6:	4606      	mov	r6, r0
 80080a8:	b928      	cbnz	r0, 80080b6 <_calloc_r+0x1e>
 80080aa:	2600      	movs	r6, #0
 80080ac:	4630      	mov	r0, r6
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	220c      	movs	r2, #12
 80080b2:	6002      	str	r2, [r0, #0]
 80080b4:	e7f9      	b.n	80080aa <_calloc_r+0x12>
 80080b6:	462a      	mov	r2, r5
 80080b8:	4621      	mov	r1, r4
 80080ba:	f7fe fa44 	bl	8006546 <memset>
 80080be:	e7f5      	b.n	80080ac <_calloc_r+0x14>

080080c0 <__ascii_mbtowc>:
 80080c0:	b082      	sub	sp, #8
 80080c2:	b901      	cbnz	r1, 80080c6 <__ascii_mbtowc+0x6>
 80080c4:	a901      	add	r1, sp, #4
 80080c6:	b142      	cbz	r2, 80080da <__ascii_mbtowc+0x1a>
 80080c8:	b14b      	cbz	r3, 80080de <__ascii_mbtowc+0x1e>
 80080ca:	7813      	ldrb	r3, [r2, #0]
 80080cc:	600b      	str	r3, [r1, #0]
 80080ce:	7812      	ldrb	r2, [r2, #0]
 80080d0:	1e10      	subs	r0, r2, #0
 80080d2:	bf18      	it	ne
 80080d4:	2001      	movne	r0, #1
 80080d6:	b002      	add	sp, #8
 80080d8:	4770      	bx	lr
 80080da:	4610      	mov	r0, r2
 80080dc:	e7fb      	b.n	80080d6 <__ascii_mbtowc+0x16>
 80080de:	f06f 0001 	mvn.w	r0, #1
 80080e2:	e7f8      	b.n	80080d6 <__ascii_mbtowc+0x16>

080080e4 <_realloc_r>:
 80080e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e8:	4680      	mov	r8, r0
 80080ea:	4615      	mov	r5, r2
 80080ec:	460c      	mov	r4, r1
 80080ee:	b921      	cbnz	r1, 80080fa <_realloc_r+0x16>
 80080f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080f4:	4611      	mov	r1, r2
 80080f6:	f7ff b967 	b.w	80073c8 <_malloc_r>
 80080fa:	b92a      	cbnz	r2, 8008108 <_realloc_r+0x24>
 80080fc:	f7ff f8f0 	bl	80072e0 <_free_r>
 8008100:	2400      	movs	r4, #0
 8008102:	4620      	mov	r0, r4
 8008104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008108:	f000 f841 	bl	800818e <_malloc_usable_size_r>
 800810c:	4285      	cmp	r5, r0
 800810e:	4606      	mov	r6, r0
 8008110:	d802      	bhi.n	8008118 <_realloc_r+0x34>
 8008112:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008116:	d8f4      	bhi.n	8008102 <_realloc_r+0x1e>
 8008118:	4629      	mov	r1, r5
 800811a:	4640      	mov	r0, r8
 800811c:	f7ff f954 	bl	80073c8 <_malloc_r>
 8008120:	4607      	mov	r7, r0
 8008122:	2800      	cmp	r0, #0
 8008124:	d0ec      	beq.n	8008100 <_realloc_r+0x1c>
 8008126:	42b5      	cmp	r5, r6
 8008128:	462a      	mov	r2, r5
 800812a:	4621      	mov	r1, r4
 800812c:	bf28      	it	cs
 800812e:	4632      	movcs	r2, r6
 8008130:	f7ff ff86 	bl	8008040 <memcpy>
 8008134:	4621      	mov	r1, r4
 8008136:	4640      	mov	r0, r8
 8008138:	f7ff f8d2 	bl	80072e0 <_free_r>
 800813c:	463c      	mov	r4, r7
 800813e:	e7e0      	b.n	8008102 <_realloc_r+0x1e>

08008140 <__ascii_wctomb>:
 8008140:	4603      	mov	r3, r0
 8008142:	4608      	mov	r0, r1
 8008144:	b141      	cbz	r1, 8008158 <__ascii_wctomb+0x18>
 8008146:	2aff      	cmp	r2, #255	@ 0xff
 8008148:	d904      	bls.n	8008154 <__ascii_wctomb+0x14>
 800814a:	228a      	movs	r2, #138	@ 0x8a
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	f04f 30ff 	mov.w	r0, #4294967295
 8008152:	4770      	bx	lr
 8008154:	700a      	strb	r2, [r1, #0]
 8008156:	2001      	movs	r0, #1
 8008158:	4770      	bx	lr
	...

0800815c <fiprintf>:
 800815c:	b40e      	push	{r1, r2, r3}
 800815e:	b503      	push	{r0, r1, lr}
 8008160:	4601      	mov	r1, r0
 8008162:	ab03      	add	r3, sp, #12
 8008164:	4805      	ldr	r0, [pc, #20]	@ (800817c <fiprintf+0x20>)
 8008166:	f853 2b04 	ldr.w	r2, [r3], #4
 800816a:	6800      	ldr	r0, [r0, #0]
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	f000 f83f 	bl	80081f0 <_vfiprintf_r>
 8008172:	b002      	add	sp, #8
 8008174:	f85d eb04 	ldr.w	lr, [sp], #4
 8008178:	b003      	add	sp, #12
 800817a:	4770      	bx	lr
 800817c:	20000018 	.word	0x20000018

08008180 <abort>:
 8008180:	b508      	push	{r3, lr}
 8008182:	2006      	movs	r0, #6
 8008184:	f000 fa08 	bl	8008598 <raise>
 8008188:	2001      	movs	r0, #1
 800818a:	f7f9 fe0f 	bl	8001dac <_exit>

0800818e <_malloc_usable_size_r>:
 800818e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008192:	1f18      	subs	r0, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	bfbc      	itt	lt
 8008198:	580b      	ldrlt	r3, [r1, r0]
 800819a:	18c0      	addlt	r0, r0, r3
 800819c:	4770      	bx	lr

0800819e <__sfputc_r>:
 800819e:	6893      	ldr	r3, [r2, #8]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	b410      	push	{r4}
 80081a6:	6093      	str	r3, [r2, #8]
 80081a8:	da08      	bge.n	80081bc <__sfputc_r+0x1e>
 80081aa:	6994      	ldr	r4, [r2, #24]
 80081ac:	42a3      	cmp	r3, r4
 80081ae:	db01      	blt.n	80081b4 <__sfputc_r+0x16>
 80081b0:	290a      	cmp	r1, #10
 80081b2:	d103      	bne.n	80081bc <__sfputc_r+0x1e>
 80081b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081b8:	f000 b932 	b.w	8008420 <__swbuf_r>
 80081bc:	6813      	ldr	r3, [r2, #0]
 80081be:	1c58      	adds	r0, r3, #1
 80081c0:	6010      	str	r0, [r2, #0]
 80081c2:	7019      	strb	r1, [r3, #0]
 80081c4:	4608      	mov	r0, r1
 80081c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <__sfputs_r>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	4606      	mov	r6, r0
 80081d0:	460f      	mov	r7, r1
 80081d2:	4614      	mov	r4, r2
 80081d4:	18d5      	adds	r5, r2, r3
 80081d6:	42ac      	cmp	r4, r5
 80081d8:	d101      	bne.n	80081de <__sfputs_r+0x12>
 80081da:	2000      	movs	r0, #0
 80081dc:	e007      	b.n	80081ee <__sfputs_r+0x22>
 80081de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e2:	463a      	mov	r2, r7
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7ff ffda 	bl	800819e <__sfputc_r>
 80081ea:	1c43      	adds	r3, r0, #1
 80081ec:	d1f3      	bne.n	80081d6 <__sfputs_r+0xa>
 80081ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081f0 <_vfiprintf_r>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	460d      	mov	r5, r1
 80081f6:	b09d      	sub	sp, #116	@ 0x74
 80081f8:	4614      	mov	r4, r2
 80081fa:	4698      	mov	r8, r3
 80081fc:	4606      	mov	r6, r0
 80081fe:	b118      	cbz	r0, 8008208 <_vfiprintf_r+0x18>
 8008200:	6a03      	ldr	r3, [r0, #32]
 8008202:	b90b      	cbnz	r3, 8008208 <_vfiprintf_r+0x18>
 8008204:	f7fe f906 	bl	8006414 <__sinit>
 8008208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800820a:	07d9      	lsls	r1, r3, #31
 800820c:	d405      	bmi.n	800821a <_vfiprintf_r+0x2a>
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	059a      	lsls	r2, r3, #22
 8008212:	d402      	bmi.n	800821a <_vfiprintf_r+0x2a>
 8008214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008216:	f7fe fa14 	bl	8006642 <__retarget_lock_acquire_recursive>
 800821a:	89ab      	ldrh	r3, [r5, #12]
 800821c:	071b      	lsls	r3, r3, #28
 800821e:	d501      	bpl.n	8008224 <_vfiprintf_r+0x34>
 8008220:	692b      	ldr	r3, [r5, #16]
 8008222:	b99b      	cbnz	r3, 800824c <_vfiprintf_r+0x5c>
 8008224:	4629      	mov	r1, r5
 8008226:	4630      	mov	r0, r6
 8008228:	f000 f938 	bl	800849c <__swsetup_r>
 800822c:	b170      	cbz	r0, 800824c <_vfiprintf_r+0x5c>
 800822e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008230:	07dc      	lsls	r4, r3, #31
 8008232:	d504      	bpl.n	800823e <_vfiprintf_r+0x4e>
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	b01d      	add	sp, #116	@ 0x74
 800823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823e:	89ab      	ldrh	r3, [r5, #12]
 8008240:	0598      	lsls	r0, r3, #22
 8008242:	d4f7      	bmi.n	8008234 <_vfiprintf_r+0x44>
 8008244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008246:	f7fe f9fd 	bl	8006644 <__retarget_lock_release_recursive>
 800824a:	e7f3      	b.n	8008234 <_vfiprintf_r+0x44>
 800824c:	2300      	movs	r3, #0
 800824e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008250:	2320      	movs	r3, #32
 8008252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008256:	f8cd 800c 	str.w	r8, [sp, #12]
 800825a:	2330      	movs	r3, #48	@ 0x30
 800825c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800840c <_vfiprintf_r+0x21c>
 8008260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008264:	f04f 0901 	mov.w	r9, #1
 8008268:	4623      	mov	r3, r4
 800826a:	469a      	mov	sl, r3
 800826c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008270:	b10a      	cbz	r2, 8008276 <_vfiprintf_r+0x86>
 8008272:	2a25      	cmp	r2, #37	@ 0x25
 8008274:	d1f9      	bne.n	800826a <_vfiprintf_r+0x7a>
 8008276:	ebba 0b04 	subs.w	fp, sl, r4
 800827a:	d00b      	beq.n	8008294 <_vfiprintf_r+0xa4>
 800827c:	465b      	mov	r3, fp
 800827e:	4622      	mov	r2, r4
 8008280:	4629      	mov	r1, r5
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff ffa2 	bl	80081cc <__sfputs_r>
 8008288:	3001      	adds	r0, #1
 800828a:	f000 80a7 	beq.w	80083dc <_vfiprintf_r+0x1ec>
 800828e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008290:	445a      	add	r2, fp
 8008292:	9209      	str	r2, [sp, #36]	@ 0x24
 8008294:	f89a 3000 	ldrb.w	r3, [sl]
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 809f 	beq.w	80083dc <_vfiprintf_r+0x1ec>
 800829e:	2300      	movs	r3, #0
 80082a0:	f04f 32ff 	mov.w	r2, #4294967295
 80082a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082a8:	f10a 0a01 	add.w	sl, sl, #1
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	9307      	str	r3, [sp, #28]
 80082b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80082b6:	4654      	mov	r4, sl
 80082b8:	2205      	movs	r2, #5
 80082ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082be:	4853      	ldr	r0, [pc, #332]	@ (800840c <_vfiprintf_r+0x21c>)
 80082c0:	f7f7 ff86 	bl	80001d0 <memchr>
 80082c4:	9a04      	ldr	r2, [sp, #16]
 80082c6:	b9d8      	cbnz	r0, 8008300 <_vfiprintf_r+0x110>
 80082c8:	06d1      	lsls	r1, r2, #27
 80082ca:	bf44      	itt	mi
 80082cc:	2320      	movmi	r3, #32
 80082ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082d2:	0713      	lsls	r3, r2, #28
 80082d4:	bf44      	itt	mi
 80082d6:	232b      	movmi	r3, #43	@ 0x2b
 80082d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082dc:	f89a 3000 	ldrb.w	r3, [sl]
 80082e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082e2:	d015      	beq.n	8008310 <_vfiprintf_r+0x120>
 80082e4:	9a07      	ldr	r2, [sp, #28]
 80082e6:	4654      	mov	r4, sl
 80082e8:	2000      	movs	r0, #0
 80082ea:	f04f 0c0a 	mov.w	ip, #10
 80082ee:	4621      	mov	r1, r4
 80082f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082f4:	3b30      	subs	r3, #48	@ 0x30
 80082f6:	2b09      	cmp	r3, #9
 80082f8:	d94b      	bls.n	8008392 <_vfiprintf_r+0x1a2>
 80082fa:	b1b0      	cbz	r0, 800832a <_vfiprintf_r+0x13a>
 80082fc:	9207      	str	r2, [sp, #28]
 80082fe:	e014      	b.n	800832a <_vfiprintf_r+0x13a>
 8008300:	eba0 0308 	sub.w	r3, r0, r8
 8008304:	fa09 f303 	lsl.w	r3, r9, r3
 8008308:	4313      	orrs	r3, r2
 800830a:	9304      	str	r3, [sp, #16]
 800830c:	46a2      	mov	sl, r4
 800830e:	e7d2      	b.n	80082b6 <_vfiprintf_r+0xc6>
 8008310:	9b03      	ldr	r3, [sp, #12]
 8008312:	1d19      	adds	r1, r3, #4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	9103      	str	r1, [sp, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	bfbb      	ittet	lt
 800831c:	425b      	neglt	r3, r3
 800831e:	f042 0202 	orrlt.w	r2, r2, #2
 8008322:	9307      	strge	r3, [sp, #28]
 8008324:	9307      	strlt	r3, [sp, #28]
 8008326:	bfb8      	it	lt
 8008328:	9204      	strlt	r2, [sp, #16]
 800832a:	7823      	ldrb	r3, [r4, #0]
 800832c:	2b2e      	cmp	r3, #46	@ 0x2e
 800832e:	d10a      	bne.n	8008346 <_vfiprintf_r+0x156>
 8008330:	7863      	ldrb	r3, [r4, #1]
 8008332:	2b2a      	cmp	r3, #42	@ 0x2a
 8008334:	d132      	bne.n	800839c <_vfiprintf_r+0x1ac>
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	1d1a      	adds	r2, r3, #4
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	9203      	str	r2, [sp, #12]
 800833e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008342:	3402      	adds	r4, #2
 8008344:	9305      	str	r3, [sp, #20]
 8008346:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800841c <_vfiprintf_r+0x22c>
 800834a:	7821      	ldrb	r1, [r4, #0]
 800834c:	2203      	movs	r2, #3
 800834e:	4650      	mov	r0, sl
 8008350:	f7f7 ff3e 	bl	80001d0 <memchr>
 8008354:	b138      	cbz	r0, 8008366 <_vfiprintf_r+0x176>
 8008356:	9b04      	ldr	r3, [sp, #16]
 8008358:	eba0 000a 	sub.w	r0, r0, sl
 800835c:	2240      	movs	r2, #64	@ 0x40
 800835e:	4082      	lsls	r2, r0
 8008360:	4313      	orrs	r3, r2
 8008362:	3401      	adds	r4, #1
 8008364:	9304      	str	r3, [sp, #16]
 8008366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836a:	4829      	ldr	r0, [pc, #164]	@ (8008410 <_vfiprintf_r+0x220>)
 800836c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008370:	2206      	movs	r2, #6
 8008372:	f7f7 ff2d 	bl	80001d0 <memchr>
 8008376:	2800      	cmp	r0, #0
 8008378:	d03f      	beq.n	80083fa <_vfiprintf_r+0x20a>
 800837a:	4b26      	ldr	r3, [pc, #152]	@ (8008414 <_vfiprintf_r+0x224>)
 800837c:	bb1b      	cbnz	r3, 80083c6 <_vfiprintf_r+0x1d6>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	3307      	adds	r3, #7
 8008382:	f023 0307 	bic.w	r3, r3, #7
 8008386:	3308      	adds	r3, #8
 8008388:	9303      	str	r3, [sp, #12]
 800838a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800838c:	443b      	add	r3, r7
 800838e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008390:	e76a      	b.n	8008268 <_vfiprintf_r+0x78>
 8008392:	fb0c 3202 	mla	r2, ip, r2, r3
 8008396:	460c      	mov	r4, r1
 8008398:	2001      	movs	r0, #1
 800839a:	e7a8      	b.n	80082ee <_vfiprintf_r+0xfe>
 800839c:	2300      	movs	r3, #0
 800839e:	3401      	adds	r4, #1
 80083a0:	9305      	str	r3, [sp, #20]
 80083a2:	4619      	mov	r1, r3
 80083a4:	f04f 0c0a 	mov.w	ip, #10
 80083a8:	4620      	mov	r0, r4
 80083aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083ae:	3a30      	subs	r2, #48	@ 0x30
 80083b0:	2a09      	cmp	r2, #9
 80083b2:	d903      	bls.n	80083bc <_vfiprintf_r+0x1cc>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0c6      	beq.n	8008346 <_vfiprintf_r+0x156>
 80083b8:	9105      	str	r1, [sp, #20]
 80083ba:	e7c4      	b.n	8008346 <_vfiprintf_r+0x156>
 80083bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80083c0:	4604      	mov	r4, r0
 80083c2:	2301      	movs	r3, #1
 80083c4:	e7f0      	b.n	80083a8 <_vfiprintf_r+0x1b8>
 80083c6:	ab03      	add	r3, sp, #12
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	462a      	mov	r2, r5
 80083cc:	4b12      	ldr	r3, [pc, #72]	@ (8008418 <_vfiprintf_r+0x228>)
 80083ce:	a904      	add	r1, sp, #16
 80083d0:	4630      	mov	r0, r6
 80083d2:	f7fd fbdb 	bl	8005b8c <_printf_float>
 80083d6:	4607      	mov	r7, r0
 80083d8:	1c78      	adds	r0, r7, #1
 80083da:	d1d6      	bne.n	800838a <_vfiprintf_r+0x19a>
 80083dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083de:	07d9      	lsls	r1, r3, #31
 80083e0:	d405      	bmi.n	80083ee <_vfiprintf_r+0x1fe>
 80083e2:	89ab      	ldrh	r3, [r5, #12]
 80083e4:	059a      	lsls	r2, r3, #22
 80083e6:	d402      	bmi.n	80083ee <_vfiprintf_r+0x1fe>
 80083e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ea:	f7fe f92b 	bl	8006644 <__retarget_lock_release_recursive>
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	065b      	lsls	r3, r3, #25
 80083f2:	f53f af1f 	bmi.w	8008234 <_vfiprintf_r+0x44>
 80083f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083f8:	e71e      	b.n	8008238 <_vfiprintf_r+0x48>
 80083fa:	ab03      	add	r3, sp, #12
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	462a      	mov	r2, r5
 8008400:	4b05      	ldr	r3, [pc, #20]	@ (8008418 <_vfiprintf_r+0x228>)
 8008402:	a904      	add	r1, sp, #16
 8008404:	4630      	mov	r0, r6
 8008406:	f7fd fe59 	bl	80060bc <_printf_i>
 800840a:	e7e4      	b.n	80083d6 <_vfiprintf_r+0x1e6>
 800840c:	08008970 	.word	0x08008970
 8008410:	0800897a 	.word	0x0800897a
 8008414:	08005b8d 	.word	0x08005b8d
 8008418:	080081cd 	.word	0x080081cd
 800841c:	08008976 	.word	0x08008976

08008420 <__swbuf_r>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	460e      	mov	r6, r1
 8008424:	4614      	mov	r4, r2
 8008426:	4605      	mov	r5, r0
 8008428:	b118      	cbz	r0, 8008432 <__swbuf_r+0x12>
 800842a:	6a03      	ldr	r3, [r0, #32]
 800842c:	b90b      	cbnz	r3, 8008432 <__swbuf_r+0x12>
 800842e:	f7fd fff1 	bl	8006414 <__sinit>
 8008432:	69a3      	ldr	r3, [r4, #24]
 8008434:	60a3      	str	r3, [r4, #8]
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	071a      	lsls	r2, r3, #28
 800843a:	d501      	bpl.n	8008440 <__swbuf_r+0x20>
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	b943      	cbnz	r3, 8008452 <__swbuf_r+0x32>
 8008440:	4621      	mov	r1, r4
 8008442:	4628      	mov	r0, r5
 8008444:	f000 f82a 	bl	800849c <__swsetup_r>
 8008448:	b118      	cbz	r0, 8008452 <__swbuf_r+0x32>
 800844a:	f04f 37ff 	mov.w	r7, #4294967295
 800844e:	4638      	mov	r0, r7
 8008450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	1a98      	subs	r0, r3, r2
 8008458:	6963      	ldr	r3, [r4, #20]
 800845a:	b2f6      	uxtb	r6, r6
 800845c:	4283      	cmp	r3, r0
 800845e:	4637      	mov	r7, r6
 8008460:	dc05      	bgt.n	800846e <__swbuf_r+0x4e>
 8008462:	4621      	mov	r1, r4
 8008464:	4628      	mov	r0, r5
 8008466:	f7ff fd99 	bl	8007f9c <_fflush_r>
 800846a:	2800      	cmp	r0, #0
 800846c:	d1ed      	bne.n	800844a <__swbuf_r+0x2a>
 800846e:	68a3      	ldr	r3, [r4, #8]
 8008470:	3b01      	subs	r3, #1
 8008472:	60a3      	str	r3, [r4, #8]
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	6022      	str	r2, [r4, #0]
 800847a:	701e      	strb	r6, [r3, #0]
 800847c:	6962      	ldr	r2, [r4, #20]
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	429a      	cmp	r2, r3
 8008482:	d004      	beq.n	800848e <__swbuf_r+0x6e>
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	07db      	lsls	r3, r3, #31
 8008488:	d5e1      	bpl.n	800844e <__swbuf_r+0x2e>
 800848a:	2e0a      	cmp	r6, #10
 800848c:	d1df      	bne.n	800844e <__swbuf_r+0x2e>
 800848e:	4621      	mov	r1, r4
 8008490:	4628      	mov	r0, r5
 8008492:	f7ff fd83 	bl	8007f9c <_fflush_r>
 8008496:	2800      	cmp	r0, #0
 8008498:	d0d9      	beq.n	800844e <__swbuf_r+0x2e>
 800849a:	e7d6      	b.n	800844a <__swbuf_r+0x2a>

0800849c <__swsetup_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4b29      	ldr	r3, [pc, #164]	@ (8008544 <__swsetup_r+0xa8>)
 80084a0:	4605      	mov	r5, r0
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	460c      	mov	r4, r1
 80084a6:	b118      	cbz	r0, 80084b0 <__swsetup_r+0x14>
 80084a8:	6a03      	ldr	r3, [r0, #32]
 80084aa:	b90b      	cbnz	r3, 80084b0 <__swsetup_r+0x14>
 80084ac:	f7fd ffb2 	bl	8006414 <__sinit>
 80084b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b4:	0719      	lsls	r1, r3, #28
 80084b6:	d422      	bmi.n	80084fe <__swsetup_r+0x62>
 80084b8:	06da      	lsls	r2, r3, #27
 80084ba:	d407      	bmi.n	80084cc <__swsetup_r+0x30>
 80084bc:	2209      	movs	r2, #9
 80084be:	602a      	str	r2, [r5, #0]
 80084c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ca:	e033      	b.n	8008534 <__swsetup_r+0x98>
 80084cc:	0758      	lsls	r0, r3, #29
 80084ce:	d512      	bpl.n	80084f6 <__swsetup_r+0x5a>
 80084d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084d2:	b141      	cbz	r1, 80084e6 <__swsetup_r+0x4a>
 80084d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084d8:	4299      	cmp	r1, r3
 80084da:	d002      	beq.n	80084e2 <__swsetup_r+0x46>
 80084dc:	4628      	mov	r0, r5
 80084de:	f7fe feff 	bl	80072e0 <_free_r>
 80084e2:	2300      	movs	r3, #0
 80084e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084ec:	81a3      	strh	r3, [r4, #12]
 80084ee:	2300      	movs	r3, #0
 80084f0:	6063      	str	r3, [r4, #4]
 80084f2:	6923      	ldr	r3, [r4, #16]
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	f043 0308 	orr.w	r3, r3, #8
 80084fc:	81a3      	strh	r3, [r4, #12]
 80084fe:	6923      	ldr	r3, [r4, #16]
 8008500:	b94b      	cbnz	r3, 8008516 <__swsetup_r+0x7a>
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800850c:	d003      	beq.n	8008516 <__swsetup_r+0x7a>
 800850e:	4621      	mov	r1, r4
 8008510:	4628      	mov	r0, r5
 8008512:	f000 f883 	bl	800861c <__smakebuf_r>
 8008516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851a:	f013 0201 	ands.w	r2, r3, #1
 800851e:	d00a      	beq.n	8008536 <__swsetup_r+0x9a>
 8008520:	2200      	movs	r2, #0
 8008522:	60a2      	str	r2, [r4, #8]
 8008524:	6962      	ldr	r2, [r4, #20]
 8008526:	4252      	negs	r2, r2
 8008528:	61a2      	str	r2, [r4, #24]
 800852a:	6922      	ldr	r2, [r4, #16]
 800852c:	b942      	cbnz	r2, 8008540 <__swsetup_r+0xa4>
 800852e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008532:	d1c5      	bne.n	80084c0 <__swsetup_r+0x24>
 8008534:	bd38      	pop	{r3, r4, r5, pc}
 8008536:	0799      	lsls	r1, r3, #30
 8008538:	bf58      	it	pl
 800853a:	6962      	ldrpl	r2, [r4, #20]
 800853c:	60a2      	str	r2, [r4, #8]
 800853e:	e7f4      	b.n	800852a <__swsetup_r+0x8e>
 8008540:	2000      	movs	r0, #0
 8008542:	e7f7      	b.n	8008534 <__swsetup_r+0x98>
 8008544:	20000018 	.word	0x20000018

08008548 <_raise_r>:
 8008548:	291f      	cmp	r1, #31
 800854a:	b538      	push	{r3, r4, r5, lr}
 800854c:	4605      	mov	r5, r0
 800854e:	460c      	mov	r4, r1
 8008550:	d904      	bls.n	800855c <_raise_r+0x14>
 8008552:	2316      	movs	r3, #22
 8008554:	6003      	str	r3, [r0, #0]
 8008556:	f04f 30ff 	mov.w	r0, #4294967295
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800855e:	b112      	cbz	r2, 8008566 <_raise_r+0x1e>
 8008560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008564:	b94b      	cbnz	r3, 800857a <_raise_r+0x32>
 8008566:	4628      	mov	r0, r5
 8008568:	f000 f830 	bl	80085cc <_getpid_r>
 800856c:	4622      	mov	r2, r4
 800856e:	4601      	mov	r1, r0
 8008570:	4628      	mov	r0, r5
 8008572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008576:	f000 b817 	b.w	80085a8 <_kill_r>
 800857a:	2b01      	cmp	r3, #1
 800857c:	d00a      	beq.n	8008594 <_raise_r+0x4c>
 800857e:	1c59      	adds	r1, r3, #1
 8008580:	d103      	bne.n	800858a <_raise_r+0x42>
 8008582:	2316      	movs	r3, #22
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	2001      	movs	r0, #1
 8008588:	e7e7      	b.n	800855a <_raise_r+0x12>
 800858a:	2100      	movs	r1, #0
 800858c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008590:	4620      	mov	r0, r4
 8008592:	4798      	blx	r3
 8008594:	2000      	movs	r0, #0
 8008596:	e7e0      	b.n	800855a <_raise_r+0x12>

08008598 <raise>:
 8008598:	4b02      	ldr	r3, [pc, #8]	@ (80085a4 <raise+0xc>)
 800859a:	4601      	mov	r1, r0
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	f7ff bfd3 	b.w	8008548 <_raise_r>
 80085a2:	bf00      	nop
 80085a4:	20000018 	.word	0x20000018

080085a8 <_kill_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d07      	ldr	r5, [pc, #28]	@ (80085c8 <_kill_r+0x20>)
 80085ac:	2300      	movs	r3, #0
 80085ae:	4604      	mov	r4, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	4611      	mov	r1, r2
 80085b4:	602b      	str	r3, [r5, #0]
 80085b6:	f7f9 fbe9 	bl	8001d8c <_kill>
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	d102      	bne.n	80085c4 <_kill_r+0x1c>
 80085be:	682b      	ldr	r3, [r5, #0]
 80085c0:	b103      	cbz	r3, 80085c4 <_kill_r+0x1c>
 80085c2:	6023      	str	r3, [r4, #0]
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
 80085c6:	bf00      	nop
 80085c8:	200005c0 	.word	0x200005c0

080085cc <_getpid_r>:
 80085cc:	f7f9 bbd6 	b.w	8001d7c <_getpid>

080085d0 <__swhatbuf_r>:
 80085d0:	b570      	push	{r4, r5, r6, lr}
 80085d2:	460c      	mov	r4, r1
 80085d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d8:	2900      	cmp	r1, #0
 80085da:	b096      	sub	sp, #88	@ 0x58
 80085dc:	4615      	mov	r5, r2
 80085de:	461e      	mov	r6, r3
 80085e0:	da0d      	bge.n	80085fe <__swhatbuf_r+0x2e>
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085e8:	f04f 0100 	mov.w	r1, #0
 80085ec:	bf14      	ite	ne
 80085ee:	2340      	movne	r3, #64	@ 0x40
 80085f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085f4:	2000      	movs	r0, #0
 80085f6:	6031      	str	r1, [r6, #0]
 80085f8:	602b      	str	r3, [r5, #0]
 80085fa:	b016      	add	sp, #88	@ 0x58
 80085fc:	bd70      	pop	{r4, r5, r6, pc}
 80085fe:	466a      	mov	r2, sp
 8008600:	f000 f848 	bl	8008694 <_fstat_r>
 8008604:	2800      	cmp	r0, #0
 8008606:	dbec      	blt.n	80085e2 <__swhatbuf_r+0x12>
 8008608:	9901      	ldr	r1, [sp, #4]
 800860a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800860e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008612:	4259      	negs	r1, r3
 8008614:	4159      	adcs	r1, r3
 8008616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800861a:	e7eb      	b.n	80085f4 <__swhatbuf_r+0x24>

0800861c <__smakebuf_r>:
 800861c:	898b      	ldrh	r3, [r1, #12]
 800861e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008620:	079d      	lsls	r5, r3, #30
 8008622:	4606      	mov	r6, r0
 8008624:	460c      	mov	r4, r1
 8008626:	d507      	bpl.n	8008638 <__smakebuf_r+0x1c>
 8008628:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	6123      	str	r3, [r4, #16]
 8008630:	2301      	movs	r3, #1
 8008632:	6163      	str	r3, [r4, #20]
 8008634:	b003      	add	sp, #12
 8008636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008638:	ab01      	add	r3, sp, #4
 800863a:	466a      	mov	r2, sp
 800863c:	f7ff ffc8 	bl	80085d0 <__swhatbuf_r>
 8008640:	9f00      	ldr	r7, [sp, #0]
 8008642:	4605      	mov	r5, r0
 8008644:	4639      	mov	r1, r7
 8008646:	4630      	mov	r0, r6
 8008648:	f7fe febe 	bl	80073c8 <_malloc_r>
 800864c:	b948      	cbnz	r0, 8008662 <__smakebuf_r+0x46>
 800864e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008652:	059a      	lsls	r2, r3, #22
 8008654:	d4ee      	bmi.n	8008634 <__smakebuf_r+0x18>
 8008656:	f023 0303 	bic.w	r3, r3, #3
 800865a:	f043 0302 	orr.w	r3, r3, #2
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	e7e2      	b.n	8008628 <__smakebuf_r+0xc>
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	6020      	str	r0, [r4, #0]
 8008666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800866a:	81a3      	strh	r3, [r4, #12]
 800866c:	9b01      	ldr	r3, [sp, #4]
 800866e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008672:	b15b      	cbz	r3, 800868c <__smakebuf_r+0x70>
 8008674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008678:	4630      	mov	r0, r6
 800867a:	f000 f81d 	bl	80086b8 <_isatty_r>
 800867e:	b128      	cbz	r0, 800868c <__smakebuf_r+0x70>
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	f023 0303 	bic.w	r3, r3, #3
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	81a3      	strh	r3, [r4, #12]
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	431d      	orrs	r5, r3
 8008690:	81a5      	strh	r5, [r4, #12]
 8008692:	e7cf      	b.n	8008634 <__smakebuf_r+0x18>

08008694 <_fstat_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4d07      	ldr	r5, [pc, #28]	@ (80086b4 <_fstat_r+0x20>)
 8008698:	2300      	movs	r3, #0
 800869a:	4604      	mov	r4, r0
 800869c:	4608      	mov	r0, r1
 800869e:	4611      	mov	r1, r2
 80086a0:	602b      	str	r3, [r5, #0]
 80086a2:	f7f9 fbd3 	bl	8001e4c <_fstat>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	d102      	bne.n	80086b0 <_fstat_r+0x1c>
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	b103      	cbz	r3, 80086b0 <_fstat_r+0x1c>
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	bd38      	pop	{r3, r4, r5, pc}
 80086b2:	bf00      	nop
 80086b4:	200005c0 	.word	0x200005c0

080086b8 <_isatty_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d06      	ldr	r5, [pc, #24]	@ (80086d4 <_isatty_r+0x1c>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	602b      	str	r3, [r5, #0]
 80086c4:	f7f9 fbd2 	bl	8001e6c <_isatty>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d102      	bne.n	80086d2 <_isatty_r+0x1a>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	b103      	cbz	r3, 80086d2 <_isatty_r+0x1a>
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	200005c0 	.word	0x200005c0

080086d8 <_init>:
 80086d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086da:	bf00      	nop
 80086dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086de:	bc08      	pop	{r3}
 80086e0:	469e      	mov	lr, r3
 80086e2:	4770      	bx	lr

080086e4 <_fini>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	bf00      	nop
 80086e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ea:	bc08      	pop	{r3}
 80086ec:	469e      	mov	lr, r3
 80086ee:	4770      	bx	lr
